<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.25 (Ruby 2.7.0) -->
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-spinella-event-streaming-open-network-latest" category="info" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.0 -->
  <front>
    <title abbrev="ESON">Event Streaming Open Network</title>
    <seriesInfo name="Internet-Draft" value="draft-spinella-event-streaming-open-network-latest"/>
    <author initials="E." surname="Spinella" fullname="Emiliano Spinella">
      <organization>Syndeno</organization>
      <address>
        <email>emiliano.spinella@syndeno.com</email>
      </address>
    </author>
    <date year="2022" month="January" day="27"/>
    <area>TBD</area>
    <workgroup>TBD</workgroup>
    <keyword>Internet-Draft</keyword>
    <abstract>
      <t>This document describes the vision, architecture and network protocol for an Event Streaming Open Network over the Internet.</t>
    </abstract>
    <note removeInRFC="true">
      <name>About This Document</name>
      <t>
        The latest revision of this draft can be found at <eref target="https://example.com/LATEST"/>.
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-spinella-event-streaming-open-network/"/>.
      </t>
      <t>
      </t>
      <t>Source for this draft and an issue tracker can be found at
        <eref target="https://github.com/syndeno/draft-spinella-event-streaming-open-network"/>.</t>
    </note>
  </front>
  <middle>
    <section anchor="introduction">
      <name>1. Introduction</name>
      <t>Society is rapidly digitalizing and automating the exchanges of value that constitute the economy. Also, considerable time and energy is spent to assure that key transactions can be executed with reduced human involvement with better, faster, and more accurate results. In this context, Event Streaming can play a key role in how the economic system evolves.</t>
      <t>However, most of the application layer integrations executed today across organizational boundaries are not in real time. Also, they currently require employing a variety of formats and protocols. Some industries have adopted data formats for exchanging information between organizations, such as Electronic Data Interchange (EDI). However, those integrations are limited to specific use cases and represent a small fraction of all demanded organizational integrations.</t>
      <t>Thus, there is no consistent and common consensus on a mechanism for the exchange of events across organizations. This results in a completely custom landscape for each real-time cross-organization integration. In this scenario, development teams must invest plenty of time into understanding and defining a common interface for events exchange.</t>
      <t>In this context, we can now introduce how this landscape could change with the introductiopn of an Event Streaming Open Network over the Internet. When needing to connect real-time event flows across organizations, developers would have a common basis for finding, publishing, and subscribing to event streams. Also, given a set of standard formats to encode and transmit events, developers could use the programming language of their choice. Overall, this set of standards would drastically reduce the cost of real-time integration, which would also enable experimentation by users.</t>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
    </section>
    <section anchor="an-open-network-for-event-streaming-over-the-internet">
      <name>2. An Open Network for Event Streaming over the Internet</name>
      <t>In this section, we will argue how Internet standards are developed and why this could be the case for an Event Streaming Open Network.</t>
      <t>An interesting example of this phenomenon is the case of ISDN (Integrated Services Digital Network), a set of communications standards for the transmission of voice, video, and data over the PSTN (Public Switched Telephone Network) developed by the ITU-T (Telecommunication Standardization Sector) in 1988. ISDN pretended to use the existing public telephone network to transmit digital data in a time when the Internet connectivity access was not as broadly available as it is today. The main competitor of this standard was the incipient Internet itself, which could be used to transmit the same data.</t>
      <t>The Internet alternative needed a protocol to support the same services offered by ISDN, which was initially developed by the conjoint effort of the academic and private sector. Consequently, in 1992 the Mbone (Multicast Bone) was created. This project was an experimental network backbone built over the Internet for carrying multicast IP traffic, which could be used for multimedia content. After some important milestones of this project, the SIP (Session Initiation Protocol) was defined in 1996 and was published as a standard protocol in IETF's RFC-3261. The reality today is that SIP has completely won the standards battle for multimedia transmission over the Internet, and ISDN usage has been on continuous decline.</t>
      <t>As for Event Streaming, we see a similar scenario set-up today. There are currently several open specifications and implementations for Event Streaming, like AMQP (Advanced Messaging Queueing Protocol), supported by RabbitMQ. However, while AMQP can be used for several purposes, Kafka Protocol specializes on Event Streaming Processing and its specialized features make it more convenient than RabbitMQ (i.e. ordering).</t>
      <t>In the case of an Event Streaming Open Network over the Internet, if we guide ourselves by the history of the most widely adopted protocols on the Internet, the governance should be similar to that of the WWW or Email. Both the WWW and Email have open specifications as well as open-source implementations. We can mention the Apache Web Server as an open-source implementation of the HTTP protocol; Postfix for SMTP; and Bind for DNS. Nevertheless, the governance for these protocols' specifications relies on the IETF.</t>
      <t>In order to define the characteristics of an Event Streaming Open Network, we will focus on the definition of shared and openly accessible infrastructure. First, we will review the principles of Free, Open &amp; Neutral Networks and why they should be followed for an Event Streaming Open Network. Then, we will show how DNS complies with the criteria to be considered an infrastructure resource. Finally, we will demonstrate how this is also true for Event Streaming.</t>
      <section anchor="free-open-neutral-networks-fonn">
        <name>2.1. Free, Open &amp; Neutral Networks (FONN)</name>
        <t>The main principles of a Free, Open &amp; Neutral Network are:</t>
        <ul spacing="normal">
          <li>It is open because it is universally open to the participation of everybody without any kind of exclusion nor discrimination, and because it is always described how it works and its components, enabling everyone to improve it.</li>
          <li>It is free because everybody can use it for whatever purpose and enjoy it independently of his network participation degree.</li>
          <li>it is neutral because the network is independent of the contents, it does not influence them and they can freely circulate; the users can access and produce contents independently to their financial capacity or their social condition. The new contents produced are orientated to stimulate new ones, or for the network administration itself, or simply in exercise of the freedom of adding new contents, but not to replace or to to block other ones.</li>
          <li>It is also neutral with regard to the technology, the network can be built with whatever technology chosen by the participants with the only limitations resulting of the technology itself.</li>
        </ul>
      </section>
      <section anchor="non-discriminatory-and-open-access">
        <name>2.1.1. Non-discriminatory and open access</name>
        <t>Services such as DNS, the World Wide Web and Email do not discriminate and are open-accessible. Basically, people and organizations can access these networks as long as they can register an Internet Domain and host the required server components. Nowadays, there are alternatives to avoid having to register a domain name to have a web page or an email, such as Cloud WordPress Hosting or Gmail. However, we will focus on the network participants that provide services to end-users.</t>
        <t>In the case of Guifi.net, we can highlight how this principle has been adopted in the fact that everybody can take part in the project without discrimination. Moreover, an emphasis is made in easing the participation of the disadvantaged collectives, with less resources or less opportunities to access information technologies, telecommunications, and the Internet.</t>
        <t>An Event Streaming Open Network should provide resources in a similar way than the most widely adopted Internet Services. Thus, individuals and organizations must be able to register Flow address spaces for which the existing DNS infrastructure could be leveraged. Moreover, the specification of the protocols that implement the Metadata and Payload formats must also be openly accessible.</t>
      </section>
      <section anchor="open-participation">
        <name>2.1.2. Open participation</name>
        <t>Internet Services like DNS, WWW and Email provide individuals and organizations with different ways of participation. First, anybody can obtain the protocols' specification and build a custom implementation, which would result in a new product compatible with the protocols. Secondly, anybody can register a domain name and set up servers using compatible products. Thirdly, anybody can join and participate in the IETF, the institution that governs the specifications for these protocols.</t>
        <t>As for Guifi.net, not only anybody can extend the network with new nodes but also can also participate in existing projects of network extension. Also, the participants can add services on top of the network such as VoIP, FTP servers, broadcast radios, etc.</t>
        <t>Regarding active participation on an Event Streaming Open Network, we can highlight the possibility for individuals and organizations to expand the services provided by the open network. This extensibility could be made possible by different uses of the event payloads and will vary significantly depending on the sector. Since we have already proved how Flow is an infrastructure resource, innovation would play its part and its results would be materialized in services expansion.</t>
        <t>We can conclude that the same kind of openness of DNS, WWW and Email is necessary for an Event Streaming Open Network. Anybody should be able to obtain the specifications to build an implementation of the service. Also, since it should leverage the DNS infrastructure, anybody would be able to register Flow address spaces. Lastly, the specification could be governed by an institution such as the IETF, due the dependency of Flow with other Internet Services governed by this institution.</t>
      </section>
      <section anchor="open-access-infrastructure-resources">
        <name>2.2. Open Access Infrastructure Resources</name>
        <t>The literature about Commons Infrastructure (Frischmann, 2007) defines a set of criteria to evaluate if a resource can be considered an infrastructure resource. This analysis is relevant since it can provide some arguments to prove the need of an infrastructure of commons for Event Streaming, which could then be materialized in an Open Network for Event Streaming. The demand-side criteria for evaluating if a given resource can be considered as an infrastructure resource are:</t>
        <ol spacing="normal" type="1"><li>The resource can be consumed nonrivalrously.</li>
          <li>Social demand for the resource is driven primarily by downstream productive activity that requires the resource as an input.</li>
          <li>The resource is used as an input into a wide range of goods and services, including private goods, public goods and/or non-market goods.</li>
        </ol>
        <t>First, a nonrival good describes the "shareable" nature of a given good. Infrastructures are shareable in the sense that the resources can be accessed and used by multiple users at the same time. However, infrastructure resources vary in their capacity to accommodate multiple users, and this variance in the capacity differentiates nonrival resources from partially rival resources. A nonrival resource represents those resources with infinite capacity, while a partially rival resource has finite but renewable capacity. As an example, Broadcast Television is a nonrival resource since additional users do not affect the capacity of the resource. On the other hand, natural oil resources are completely rival since its availability is limited and it is not renewable. In the middle, we have partially rival resources like a highway, which may be congested. This last characteristic is also true for the Internet since it supports additional users without degrading the service to existing users to a certain extent.</t>
        <t>Secondly, infrastructure resources consumption is primarily driven by downstream activities that require this resource as an input. This means that the broad audience consumes infrastructure resources indirectly. For instance, highway infrastructure is used to transport every kind of physical good which people and organizations purchase. This facilitates the generation of positive externalities for society through the downstream production of public goods and non-market goods. These positive externalities might be suppressed under a regime where resource availability is driven solely based on individuals' willingness to pay.</t>
        <t>Regarding willingness to pay, it is relevant to analyze this factor more exhaustively. Frischmann states that if infrastructure access is allocated based on individuals' willingness to pay the potential positive externalities of that infrastructure might be stifled. Thus, infrastructure resources behave differently than end-user products: if the former are made available solely based on the end-user demands and willingness to pay, those needed infrastructure resources might never be made available. As an example, we can mention that if airports were built based on individuals' willingness to pay for them, they might not even be built. However, individuals are willing to pay for the airport's downstream activities, such as purchasing a flight or consuming air-transported goods. Then, a whole set of positive externalities are generated by the existence of an airport in a city.</t>
        <t>In the third place, infrastructure resources are used as input for a wide range of outputs. This criterion emphasizes both the variance of the downstream outputs and their nature. Thus, the infrastructure resources possess a high level of genericness which enable productive activities that produce different goods with high variance. If we consider how an airport complies with this criterion, we can mention that not only airports serve individuals that need to travel by air but are also used to transport many kinds of physical goods. These goods then enable other activities throughout the downstream value chain. Then, the output variance of the activities that take airport infrastructure as input is significantly high.</t>
        <section anchor="open-access-dns-resource-example">
          <name>2.2.1. Open Access DNS Resource Example</name>
          <t>Now, we will provide as an example how DNS complies with these criteria and why it can be considered an infrastructure resource.
1. DNS infrastructure is a partially rival resource because individuals and organizations can register domains in the Domain Name addressing space. It is partially rival because not every actor can acquire the same domain name. However, the access to registering domain names is open and non-discriminatory. Moreover, DNS is also prone to congestion, which emphasizes its partially rival nature.
2. DNS infrastructure demand is driven principally by downstream products and services. An average Internet user is not paying directly for this infrastructure, but all the Internet services the user consumes pay for DNS infrastructure. This is true for all the Internet services due to the ubiquitous nature of DNS infrastructure.
3. All Internet services take as input DNS infrastructure and produce a broad variety of outputs, which then generate positive externalities to society as a whole by means of private goods, public goods and/or non-market goods.</t>
          <t>We can conclude that DNS complies with Frischmann criteria for being considered as an infrastructure resource. The resource is represented both by the domain name that can be and by the querying capacity of DNS servers.</t>
        </section>
        <section anchor="flow-event-streaming-internet-resource">
          <name>2.2.2. Flow: Event Streaming Internet Resource</name>
          <t>In this section, we will describe an Event Streaming Internet Resources. For this, we will consider the previously described guidelines for FONN as well as the characteristics of DNS as a resource. This Event Streaming Internet Resource shall be refered to as "flow" from now onwards.</t>
          <t>To begin with, we need to define what elements could be considered as infrastructure resources in an Event Streaming Open Network. First, the resource must be capable of delivering streams of events to consumers. Secondly, it must also permit producers to write events to the stream. Thirdly, each stream must be identifiable (i.e., URI) and able to be located (i.e., URL). From now on, we will use "Flow" to refer to the infrastructure resource of an Event Streaming Open Network.
The first Frischmann criterion requires the resource to be consumed nonrivalrously. Complete nonrivalrously for any Internet Service cannot be achieved due to the possibility of congestion and potential unavailability of different elements of the network. The same would be true for a Flow resource. Moreover, the public naming addressing space for Flows would be limited to the same level as that of domain names.</t>
          <t>We will continue now with the third criterion. To illustrate the potential of Flow being used as inputs for downstream activities, we will refer to Urquhart's vision for Event Streaming. He lists two areas in which significant changes can happen:</t>
          <ol spacing="normal" type="1"><li>The use of time-critical data for customer experience and efficiency. This is driven because today's consumers are increasingly expecting great experiences, and organizations are almost always motivated to improve the efficiency of their operations.</li>
            <li>The emergence of new businesses and business models. Businesses and institutions will quickly discover use cases where data processed in a timely manner will change the economics of a process or transaction. They may even experiment with new processes, made possible by this timely data flow. Thus, flow resources will also enable innovation. These innovations are responsible for generating positive externalities.</li>
          </ol>
          <t>Then, we have demonstrated why Flow resources can be considered as infrastructure resources using Frischmann's Demand-side Theory of Infrastructure. These resources can be managed in an open manner to maximize positive externalities, which basically means maintaining its open access, not discriminating, and eliminating the need to obtain licenses to use the resources. Consequently, managing infrastructure resources in this manner eliminates the need to rely on either market actors or governments.</t>
          <t>Lastly, the adoption of an Event Streaming Open Network implies taking Flow resources as inputs for productive activities. These inputs would then be used downstream to generate private goods, public goods and/or non-market goods. Additionally, we can assure that most of the consumers of Flow would not directly consume Flow resources. They would consume the outputs of downstream activities that use Flow as input. Again, the consumers may not be willing to pay for Flow resources directly.</t>
          <t>We can conclude this section mentioning that an Event Streaming Open Network would enable one infrastructure resource called Flow. The access to this resource can be managed in an openly manner: maintaining open access, not discriminating users or different uses of the resource, and eliminating the need to obtain approval or a license to use the resource.</t>
        </section>
      </section>
    </section>
    <section anchor="necessities-for-an-event-streaming-open-network-over-the-internet">
      <name>3. Necessities for an Event Streaming Open Network over the Internet</name>
      <t>In this section, we will describe the main needs for the broad adoption of Event Streaming. The focus will be made on detecting and describing the missing capabilities that could not only enable but also accelerate the event data integration among different organizations. The different necessities detailed in this section will serve as input for an architecture design.</t>
      <section anchor="necessity-1-event-streaming-internet-resource-public-registry">
        <name>3.1. Necessity 1: Event Streaming Internet Resource Public Registry</name>
        <t>A public registry of an organization's available event streams does not exist. We will argue in this section why this is the core component that an Event Streaming Open Network can provide.</t>
        <t>Nowadays, when an organization needs to publish an event stream or event flow, they usually follow some form of the following steps:</t>
        <ol spacing="normal" type="1"><li>Develop and deploy a producer application that writes events to a queue.</li>
          <li>Create all necessary networking permissions for external public access to the queue.</li>
          <li>Inform the remote user the access information (i.e., Hostname/IP, protocol, and port) together with the required client details and technology for accessing the stream (i.e., Apache Kafka Protocol, RabbitMQ API, etc.).</li>
          <li>Create credentials for consumer authentication and authorization access to the queue.
5.Develop and deploy a consumer application that reads the queue.</li>
        </ol>
        <t>Now, we can compare this process to a simple email interaction:
1. Sender opens a graphical Mail User Agent application and sends an email to an email address formatted as user@domain.
2. The message is sent to an SMTP server that routes it to the destination SMTP servers for the given domain. Once received, the message is put into the user mailbox.
3. When the recipient checks its mailbox by IMAP or POP3, the new email is transferred to the Mail User Agent.</t>
        <t>In these two scenarios, we can see that the information needed to be exchanged offline by the actors is completely different in size and content.</t>
        <t>First, in the case of email, there is a shared naming space given by the Domain Name Service (DNS). The email format has been standardized by the IETF in RFC 5321, section 2.3.11. Thus, there is a common naming space that is used for referencing mailboxes in the format user@domain. Thus, the offline details communicated by the peers is only the recipient email address. There is no analogous standard nor an open alternative for Event Streaming.</t>
        <t>Therefore, in the case of Event Streaming, users need to perform plenty of offline communication to agree not only on the technology to use but also on the queue to use. For instance, two organizations may be currently using Apache Kafka and need to share an event stream among themselves. The organization having the source of the stream should provide the following details to the consumer organization:
* Bootstrap servers: Fully Qualified Domain Name list of the Apache Kafka brokers to start the connection to the Apache Kafka Brokers. Example: tcp://kf1.cluster.emiliano.ar:9092, tcp://kf2.cluster.emiliano.ar:9092, tcp://kf3.cluster.emiliano.ar:9092
* Topic or Queue name: name of the topic resource in the Apache Kafka Cluster
* Authentication information: User and password, TLS Certificate, etc.</t>
        <t>In the case these organizations were not both using Apache Kafka, the use case cannot be simply solved without incurring in development or complex configurations as well as adopting proprietary components.</t>
        <t>We can conclude that an Event Streaming Open Network should provide a global accessible URI for streams in a similar fashion than email, to reduce offline developers' interactions. This means being able to name event streams in a common naming space like DNS, as well as providing a mechanism for users to discover the location and connections requirements.</t>
      </section>
      <section anchor="necessity-2-establishment-of-a-user-space-for-events">
        <name>3.2. Necessity 2: Establishment of a User Space for Events</name>
        <t>Another need for broad adoption is due to the inexistence of a common and agreed user convention. In the general literature, we cannot find reference to the types of users that would consume or produce events to and from an event stream.</t>
        <t>In this sense, it is also appropriate to consider the email use case. Basically, an email user only needs to know the email address, the password, the URL of a web mail client or the details of IMAP/POP3 server connection. Once the user has this information, it's possible to access an email space or mailbox where the user can navigate the emails in it. Also, IMAP provides the possibility for the user to create folders and optionally share them with other users.</t>
        <t>There is no analogous service currently available for Event Streaming analogous to the email case. This means that the user concept in Event Streaming is limited to authentication and authorization. Thus, the user does not have access to a "streambox". The result is the impossibility for a person or an application to possess a home directory containing all the streams owned by the user.</t>
        <t>As a conclusion for this section, we can mention that it is necessary to embrace a user space resource for Event Streaming. This resource should not only solve the users' motivations and requirements but also reduce the offline verbal communications and custom development dependencies. In the next sections, we will refer to this component as the Event User Space Service.</t>
      </section>
      <section anchor="necessity-3-an-agnostic-subscription-protocol">
        <name>3.3. Necessity 3: An Agnostic Subscription Protocol</name>
        <t>A third need for wide adoption is an agnostic protocol to manage subscriptions to event streams. For this need to be solved, it would be necessary first to count with an Event User Space Service. Then, in case a user has created a stream and wants to enable public subscriptions by other users, there is no general protocol to inform other parties of this subscription intention nor its confirmation.</t>
        <t>The result is the inability for the users to seamlessly subscribe to an event stream. They either must employ protocols like MQTT or, in the need of employing other application protocols like Apache Kafka, hardcode the subscription details in the different software implementations. This means that there is no general subscription protocol for Event Streaming that is agnostic of the application protocol employed. This protocol implements both the Metadata Payload Format and Payload Format.</t>
        <t>A good example to illustrate the difference between a control protocol that implements a Metadata Payload Format from a payload protocol that implements a Payload Format is how SIP (Session Initiation Protocol) works with RTP (Real Time Protocol) to provide VoIP capabilities. The former is a control protocol that initiates and maintains a session or call while the latter is the one responsible for carrying the payloads, which in the case of VoIP it would be coded audio.</t>
        <t>Consequently, a similar definition of protocols could potentially mitigate this limitation for Event Streaming. If a protocol can be used to establish and maintain the subscriptions relationships while another different protocol is used for the events payload, all the current application protocols implementations could be supported.</t>
        <t>Additionally, by counting also with an Event Streaming Public Registry, it would be possible to provide URI for streams in a similar way as email works with the "mailto" URI. For instance, in web pages one can find that email addresses are linked to mailto URIs which, when clicked, open the default email user application (i.e., Microsoft Outlook) to send an email to the referenced email address.</t>
        <t>If a user counts with a user space or streambox, then a user application like an email client could provide access to it. Then, if the user clicks on a link of a stream URI (i.e. "stream:myeventflow"), the streambox application would open and subscribe to the given stream.</t>
        <t>Currently, the Metadata Payload Format as well as the Payload Format are both provided by the queue or log application protocol. In the case of Apache Kafka, both formats are implemented within the Apache Kafka Protocol. This introduces a barrier for interoperability among different technologies, meaning that flows of event data cannot be seamlessly connected, without relying on custom development or proprietary software licensing.</t>
        <t>We can conclude that there is an actual need for an open specification of an Event Subscription Service for event streams, which implements what Urquhart calls Metadata Payload Format. This specification could be materialized in a network protocol that introduces an abstraction for the event queue or log technologies implemented by different organizations.</t>
      </section>
      <section anchor="necessity-4-an-open-cross-sector-payload-format">
        <name>3.4. Necessity 4: An Open Cross-sector Payload Format</name>
        <t>Currently, the different implementations of Event Streaming combine both the Payload Format with the Metadata Format. This means that the same protocol utilized for payload transport is used for subscription management.</t>
        <t>When a producer intends to publish events to a queue or, using Apache Kafka terminology, when a producer intends to write records to a topic, first it needs to initiate a connection to at least one of the Apache Kafka Brokers. In that initial exchange of TCP packages, the producer is authenticated, authorized, and informed with topic details. This set of transactions would belong to a protocol that implements a Metadata Payload Format. Afterwards, when the Producer starts writing the events to the topic, it encapsulates the event payload in a Kafka Protocol message. This latter behavior makes use of a Payload Format. Thus, we can observe how both theoretical formats are coupled in a single protocol. Similar behavior of a coupled Metadata and Payload Format in one single protocol happens also in AMQP, MQTT and RabbitMQ.</t>
        <t>As for the consumer, the behavior is the same with the difference that the initial intention is to subscribe to a queue or, in Apache Kafka terminology, to consume records of a topic. Then, a set of TCP packages encapsulating the Apache Kafka protocol authenticates, authorizes, and informs the Consumer with topic details for consumption. Afterwards, the consumer can start polling for new records in the different partitions of the topic. It is worth mentioning that the consumer needs to implement more queue management logic than the Producer, especially when multiple replicas of a consumer type are deployed.</t>
        <t>If we focus on the Payload Format, there is the need for an implementation-agnostic payload format suitable for Event Streaming. In this sense, CloudEvents project of the CNCF proposes a specification and a set of libraries for this purpose. The goal is to use CloudEvents specification as a Payload Format regardless of the Payload Protocol being used. For instance, we could transmit events in the CloudEvents format using the Kafka or AMQP Protocol.</t>
        <t>The general structure of the CloudEvents Payload Format includes a standardized methodology to include event data in an event message. For instance, instead of defining a customized JSON structure for sending the events of temperature changes measured by a device, a CloudEvent object could be used. Temperature could be included as an attribute in the CloudEvent object.</t>
        <t>We can then conclude that while there is no current protocol candidate that implements the Metadata Format, CloudEvents is a good candidate for the Payload Format needed in an Event Streaming Open Network. In this way, the different CloudEvents libraries made available in several programming could be leveraged.</t>
      </section>
    </section>
    <section anchor="event-streaming-open-network-architecture">
      <name>4. Event Streaming Open Network Architecture</name>
      <t>In this section, we will describe the overall architectural proposal for an Event Streaming Open Network. This description will include the different actors in play, the software components required, as well as the network protocols that should be specificized.</t>
      <section anchor="architecture-overview">
        <name>4.1. Architecture overview</name>
        <t>In Figure 1 we illustrate a high-level overview of an architecture proposal for the Open Network.</t>
        <figure>
          <name>Figure 1</name>
          <artwork alt="High-level overview of the Event Streaming Open Network" type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure1.svg"/>
        </figure>
        <t>We can identify different Network Participant (NP) in Figure 1 represented by different colors. The different NPs act as equals when consuming or producing events as part of the Flows they own. All of NPs implement the Event Streaming Open Network Protocol, which Is described in the next chapter.</t>
        <t>In the diagram, an initial flow starts on the orange NP to which a user in the blue NP is subscribed. After processing the events received in the first flow, the results are published to a new flow in NP blue, to which the orange NP is subscribed as well. Now, the green participant is subscribed to the same flow, enabling downstream activities across the rest of the network participants.</t>
        <t>It is possible to observe how the high-level architecture allows sharing the streaming of events across different network participants and their users. Also, there is also the need for security, in order to allow or deny the access to write to and read from flows.</t>
        <t>Regarding security, the architecture considers the integration with an Identity &amp; Access Management service, which could implement popular protocols such as OAuth, SAML or SASL. However, the network should also enable anonymous access in the same way FTP does. This means that a given NP could publicly publish flow and allow any party to subscribe to it.</t>
        <t>For example, nowadays the Network Time Protocol (NTP) is used to synchronize the day and time on servers. There are many NTP servers available that allow anonymous access, meaning that the service is openly available. The same must be considered for the Event Streaming Open Network.</t>
        <t>Additionally, the NP must be able to expand the capacity to support any number of flows, as well as extending the network with new services. Not only NP must be able to include any given set of data within events but also, they must be able to build applications and services on top of the network by employing the architecture primitives.</t>
        <figure>
          <name>Figure 2</name>
          <artwork alt="Event Streaming Open Network Architecture components" type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure2.svg"/>
        </figure>
        <t>Now, we provide a brief description of all the components that appear in the diagram of Figure 2. In the next sections further details of the components are provided.</t>
        <ul spacing="normal">
          <li>Flow Events Broker (FEB): a high-available and fault-tolerant service that provide queues to be consumed by network services, by users, and their applications. An example of an Event Queue Broker can be Apache Kafka, AWS SQS or Google Cloud PubSub. The payload format implemented by these tools are what in 3.1.4 we called Event Streaming Payload Format.</li>
          <li>Flow Name Service (FNS): a DNS-based registry that acts as an authoritative server for a set of domain names, which are used to represent flow addresses in a flow namespace. These domains contain all the necessary information to resolve flow names into flow network locations. This component refers to what in 3.1.1 we named Event Streaming Registry.</li>
          <li>Flow Namespace User Agent (FNUA): an application similar to User Mail Agents like Microsoft Outlook or Gmail. This application provides access to flow namespaces to users of the network. 
The definition of this component implies the specification of a dedicated protocol. We will refer to this protocol as FNAP (Flow Namespace Accessing Protocol).</li>
          <li>Flow Namespace Accessing Agent (FNAA): the server-side of the Flow Namespace User Agent. This component is the one that must provide convenient integration methods for GUI. This component refers to what in 3.1.2 we named Event User Space Service.
This component must implement the same protocol selected for the Flow Namespace User Agent: FNAP (Flow Namespace Accessing Protocol).</li>
          <li>Flow Processor (FP): a flow processing instance used to set up subscriptions that connect local or remote flows on demand. This component implements the processing part of what in 3.1.3 we called Event Subscription Service. This component will be created and managed by a FNAA instance, and the communication is held through an Inter-process Communications (IPC) interface. Also, this service must implement an Event Payload Format, for which we will mainly consider CNCF's CloudEvents and Protobuf.</li>
          <li>Flow Namespace Accessing Protocol (FNAP): the protocol implemented in the Flow Namespace Accessing Agent as well as in the Flow Namespace User Agent. The former will act both as a server and a client while the latter only as a client. This protocol is described in the next chapter.</li>
        </ul>
        <section anchor="flow-events-broker-feb">
          <name>4.1.1. Flow Events Broker (FEB)</name>
          <t>The FEB implementation that we will mostly consider is Apache Kafka. This open-source project is quickly becoming a commodity platform, and major cloud providers are building utilities for it. However, as a design decision, it should be possible to use the same protocols to support other applications, such as RabbitMQ, Apache Pulsar or the cloud-based options like AWS SQS or Azure Events Hub.</t>
          <t>Apache Kafka is the ecosystem leader in the Event Streaming space, considering mainly adoption. There is a growing set of tools and vendors supporting its installation, operation, and consumption. This fact makes Apache Kafka much more appealing to enterprise developers. However, the broker should provide a common set of functionalities which can be seen in the diagram of Figure 3.</t>
          <figure>
            <name>Figure 3</name>
            <artwork type="svg" alt="Event Streaming Open Network Architecture components" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure3.svg"/>
          </figure>
          <t>The selection of the Events Broker will impact on the implementation of the Flow Namespace Accessing Agent. This last component will be responsible for knowing how to set up and manage flows on top of different Events Brokers.</t>
        </section>
        <section anchor="flow-name-service-fns">
          <name>4.1.2. Flow Name Service (FNS)</name>
          <t>FNS is a core component for the overall proposed architecture. This component provides all needed functionalities for obtaining Flow connection details based on a Flow URI (Uniform Resource Identifier). Thus, it is required to define a URI format for Flow resources and to specify mechanisms for resource location resolution.</t>
          <t>In this section, we will focus on describing both the URI for Flow as well as the DNS mechanism for obtaining Flow network location details.</t>
          <section anchor="leveraging-dns-infrastructure">
            <name>4.1.2.1. Leveraging DNS infrastructure</name>
            <t>As mentioned previously, this component must maximize its leverage on the existing Internet DNS infrastructure. The reason for this requirement is to avoid defining new protocols and services that prevent broad adoption. Currently, DNS is the de facto name resolution protocol for the Internet, and there exist libraries for its usage on every programming language.</t>
            <t>Whereas DNS is mainly used to resolve FQDN (Fully Qualified Domain Names) into IP addresses, there are many other functionalities provided by the global DNS infrastructure. Theoretically, DNS is an open network of a distributed database. Individuals and organizations that want to participate in the network need to register a domain name and set up Authoritative DNS servers for domains.</t>
            <t>It is not in the scope of this work to detail the different available usages of DNS functionalities, but we can mention that it provides special Resource Records (i.e., types of information for a FQDN) that are solely used by special protocols. For instance, the MX Resource Records are used by SMTP servers to exchange email messages.</t>
            <t>For the Flow Open Network, it will be required to define a URI format for flows as well as the mechanism to resolve an URI into all the needed information to connect to a flow. In the case of email, a URI is the email address while the connection details will be the SMTP server responsible for receiving emails for that account. For instance, an email URI could be user@domain.com while its connection details could be smtp://mail.domain.com. The way in which the connection details are obtained is by resolving the MX DNS Resource Records of domain.com, which in this example is mail.domain.com.</t>
          </section>
          <section anchor="flow-uri">
            <name>4.1.2.2. Flow URI</name>
            <t>As we mentioned previously, the first needed element is a URI definition for flow resources. These resources identification must capture the following details:
* Domain, a registered domain in which create flow resources references. For example, airport.com.
* Flow Namespace, a subdomain which is solely used by users to host flow names. This subdomain must be delegated to the Flow Name Server component and desirable should not be used for any other purpose other than flow.
* Flow Name, a name for each flow that must be unique within its domain. The combination of flow name and flow domain results in an FQDN. For instance, we could have a flow named arrivals of the domain flow.airport.com. Thus, the FQDN of the flow would be arrivals.flow.airport.com. Also, the name can contain dots so that the following FQDN could be also used: airline.arrivals.flow.airport.com.</t>
            <t>Thus, the general syntax of a flow URI would be:</t>
            <t>flow://flow_name.flow_namespace.domain</t>
            <t>This URI has the advantage that is similar to "mailto" URI and could be implemented in HTML to refer to flow resources. Some examples:</t>
            <ul spacing="normal">
              <li>flow://entrances.building.company.com</li>
              <li>flow://exits.building.company.com</li>
              <li>flow://temperature.house.mydomain.com</li>
              <li>flow://pressure.room1.office.mydomain.com</li>
            </ul>
            <t>The flow URI must unequivocally identify a flow resource and provide, by means of DNS resolution mechanisms, all the information required to use the flow. Among these parameters, at least the following should be resolvable:</t>
            <ul spacing="normal">
              <li>Event Queue Broker protocol utilized by the flow. For instance, if Apache Kafka is used, the protocol would be "kafka"; In case RabbitMQ is used by the flow, "amqp". Also, it must be informed if the protocol is protected by TLS.</li>
              <li>Event Queue Broker FQDN or list of FQDNs that resolve to the IP address of one or a set of the Event Queue Brokers. For instance, kafka-1.mycompany.com, kafka-2.mycompany.com.</li>
              <li>Event Queue Broker Port used by the Event Queue Brokers. For instance, in the case of Kafka: 9092, 9093.</li>
              <li>Event Queue Broker Transport Security Layer can be implemented. Thus, it is needed to know if the connection uses TLS before establishing it.</li>
              <li>Queue Name hosted in the Event Queue Broker, which must be equal to that of the corresponding flow name.</li>
            </ul>
            <t>The general syntax of the Flow URI would be as follows:</t>
            <t>flow://flowName.flowCategory.myNameSpace.domain.tld</t>
            <ul spacing="normal">
              <li>Flow Namespace FQDN: myNameSpace.domain.tld</li>
              <li>Flow Name: flowName.flowCategory</li>
              <li>Flow FQDN: flowName.flowCategory.myNameSpace.domain.tld</li>
            </ul>
            <t>The following are examples of this URI Syntax:</t>
            <t>flow://notifications.calendar.people.syndeno.com</t>
            <ul spacing="normal">
              <li>Flow Namespace FQDN: people.syndeno.com</li>
              <li>Flow Name: notifications.calendar</li>
              <li>Flow FQDN: notifications.calendar.people.syndeno.com</li>
            </ul>
            <t>flow://created.invoice.finance.syndeno.com:</t>
            <ul spacing="normal">
              <li>Flow Namespace FQDN: finance.syndeno.com</li>
              <li>Flow Name: created.invoice</li>
              <li>Flow FQDN: created.invoice.finance.syndeno.com</li>
            </ul>
          </section>
          <section anchor="flow-name-resolution">
            <name>4.1.2.2. Flow name resolution</name>
            <t>In Figure 4, we can see how a Flow FQDN can be resolved by means of the Flow Name Service.</t>
            <figure>
              <name>Figure 4</name>
              <artwork alt="High-level overview of the interactions with the Flow Name Service component." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure3.svg"/>
            </figure>
            <t>In order to illustrate the Flow Name resolution procedure by the FNAA (Flow Namespace Accessing Agent), we can consider the following flow URI:</t>
            <t>flow://notifications.calendar.people.syndeno.com</t>
            <t>First, the FNAA will perform a query to the DNS resolvers. These will perform a recursive DNS query to obtain the authoritative name servers for the Flow Namespace: people.syndeno.com. Thus, the authoritative name servers for syndeno.com will reply with one or more NS Resource Record containing the FQDN for the authoritative name servers of people.syndeno.com.</t>
            <t>Secondly, once these name servers are obtained, the FNUA will perform a PTR query on the Flow FQDN adding a service discovery prefix. The response of the PTR query will return another FQDN compliant with SRV DNS Resource Records (RFC-2782) and DNS Service Discovery (RFC-6763).</t>
            <t>In this case, the query for PTR records would be as follows:</t>
            <t>;; QUESTION SECTION:
;notifications.calendar.people.syndeno.com.             IN      PTR</t>
            <t>The response would be in the following form:</t>
            <t>;; ANSWER SECTION:
notifications.calendar.people.syndeno.com. 21600 IN     PTR _flow._tcp.notifications.calendar.people.syndeno.com.</t>
            <t>Using the FQDN returned by this query, an additional query asking for SRV records is made:</t>
            <t>;; QUESTION SECTION:
;_flow._tcp.notifications.calendar.people.syndeno.com.          IN      SRV</t>
            <t>;; ANSWER SECTION:
_flow._tcp.notifications.calendar.people.syndeno.com. 875 IN    SRV     30 30 65432 fnaa.syndeno.com.
_flow._tcp.notifications.calendar.people.syndeno.com. 875 IN TXT "tls"</t>
            <t>_queue._flow._tcp.notifications.calendar.people.syndeno.com. 875 IN     SRV     30 30 9092 kafka.syndeno.com.
_queue._flow._tcp.notifications.calendar.people.syndeno.com. 875 IN TXT "broker-type=kafka tls"</t>
            <t>First, the response informs the network location of the FNAA server, in this case a connection should be opened to TCP port 65432 of the IP resulting of resolving fnaa.syndeno.com:</t>
            <t>;; QUESTION SECTION:
;fnaa.syndeno.com.              IN      A</t>
            <t>;; ANSWER SECTION:
fnaa.syndeno.com.       21600   IN      A       208.68.163.200</t>
            <t>Secondly, this response offers other relevant information, like the TCP port where the queue service is located (9092). It also includes a TXT Resource Record that establishes the protocol of the Event Queue Broker, defined in the variable "broker-type=kafka".</t>
            <t>Now, using the returned FQDN for the queue, kafka.syndeno.com, the resolver can perform an additional query:</t>
            <t>;; QUESTION SECTION:
;kafka.syndeno.com.             IN      A</t>
            <t>;; ANSWER SECTION:
kafka.syndeno.com.      21600   IN      A       208.68.163.218</t>
          </section>
        </section>
        <section anchor="flow-namespace-accessing-agent-fnaa">
          <name>4.1.3. Flow Namespace Accessing Agent (FNAA)</name>
          <t>The Flow Namespace Accessing Agent is the core component of a Network Participant. This server application implements the Flow Namespace Accessing Protocol that allows client connections.</t>
          <t>In the diagram of Figure 5 we can see the different methods that the FNAA must support.</t>
          <figure>
            <name>Figure 5</name>
            <artwork alt="High-level overview of the interactions among FNAA servers." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure4.svg"/>
          </figure>
          <t>The clients connecting to a FNAA server can be remote FNAA servers as well as FNUA. The rationale is that users of a NP connect to the FNAA by means of a FNUA. On the other hand, when a user triggers a new subscription creation, the FNAA of his NP must connect as client to a remote FNAA server.</t>
        </section>
        <section anchor="flow-processor-fp">
          <name>4.1.4. Flow Processor (FP)</name>
          <t>Whenever a new subscription creation is triggered and all remote flow connection details are obtained, the FNAA needs to set up a Processor for it. The communications of the FNAA to and from the FP is by means of an IPC interface. This means that there can be different implementations of Processors, one of which will be the Subscription Processor.</t>
          <t>In the diagram of Figure 6, we can see the initial interface methods that should be implemented in a Flow Processor.</t>
          <figure>
            <name>Figure 6</name>
            <artwork alt="High-level overview of the IPC interface for the FNAA server and Flow Processors communications." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure6.svg"/>
          </figure>
          <t>Depending on the use of the processor, different data structures should be added to the different methods. In the case of a Subscription Processor, the minimum information will be the remote and local Flow connection details. Moreover, the interface also should include methods to update the Processor configuration and to destroy it, once a subscription is revoked. Finally, due to the nature of the stream communication, there could also be methods available to pause and to resume a Processor.</t>
          <t>There can be different types of Processors, which we can see in Figure 7.</t>
          <figure>
            <name>Figure 7</name>
            <artwork alt="High-level overview of the IPC interface for the FNAA server and Flow Processors communications." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure7.svg"/>
          </figure>
          <t>In Figure 7, we can see that there are different types of Flow Processors:
* Bridge Processor: Consumes events from a Flow located in an Event Broker (i.e., Apache Kafka) and transcribes them to a single Flow (local or remote).
* Collector Processor: Consumes events from N Flows located in an Event Broker and transcribes the aggregate to a single Flow (local or remote).
* Distributor Processor: Consumes events from a single Flow and transcribes or broadcast to N Flows (local or remote).
* Signal Processor: Consumes events from N Flows and produces new events to N Flows (local or remote)</t>
          <t>To implement the previously described Subscription Processor, we can utilize some form of the Bridge Processor. Although we are initially considering the basic use case of subscription, it must be possible for the network to extend the processor types supported. In any case, the different FNAA servers involved must be aware the supported processor types, with the goal of informing the users the capabilities available in the FNAA server. For instance, the fact that a FNAA supports the Bridge Processor should enable the subscription commands in the FNAA, for users to create subscriptions using the Bridge Processor.</t>
          <t>In summary, the IPC interface should support all the possible processors that the network may need although we are initially considering the subscription use case.</t>
        </section>
        <section anchor="flow-namespace-user-agent-fnua">
          <name>4.1.5. Flow Namespace User Agent (FNUA)</name>
          <t>The FNUA is an application analogous to email clients such as Microsoft Office or Gmail. These applications implement either different network protocols to access mailboxes by means of IMAP and/or POP3. In the case of FNUA, the protocol implemented is the FNAP (Flow Namespace Accessing Protocol).</t>
          <t>The FNUA is an application that acts as a client for the FNAA server. Only users that possess accounts in a Network Participant should be able to login to FNAA to manage Flow Namespaces. The FNUA could be any kind of user application: web application, desktop application, mobile application or even a cli tool.</t>
          <t>In the Diagram of Figure 8 we can see the actions that the user can request to the FNUA.</t>
          <figure>
            <name>Figure 8</name>
            <artwork alt="High-level overview of the interactions between a user and the Flow Namespace User Agent component." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure8.svg"/>
          </figure>
          <t>The main goal of the FNUA is to provide the user with access to Flow Namespaces and the flows hosted in them. A user may have many Flow Namespace and many Flows in each of them. By means of the FNUA, the user can manage the Flow Namespaces and the Flows in them. Also, the FNUA will provide the capabilities required to subscribe to external Flows, whether local to the FNAA, local to the NP or remote (in a different NP FNAA server).</t>
        </section>
      </section>
      <section anchor="communications-examples">
        <name>4.2. Communications Examples</name>
        <t>In this section, two usage examples of Network Participants communications are provided. The first one, we call unidirectional, since one NP subscribes to a remote Flow of a different NP. The second one, we call it bidirectional, since now these NP have mutual subscriptions.</t>
        <section anchor="unidirectional-subscription">
          <name>4.2.1. Unidirectional Subscription</name>
          <t>In the diagram of Figure 9, we can see an integration between two NP. In this case, there is a FlowA hosted in the Orange NP to which the FlowB in the Blue NP is subscribed. Both FlowA and FlowB count with a queue hosted in the Flow Events Broker, which could be an Apache Kafka instance for example. However, it must be possible to employ any Flow Events Broker of the NP's choice.</t>
          <figure>
            <name>Figure 9</name>
            <artwork alt="Example of a unidirectional subscription among two Network Participants." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure9.svg"/>
          </figure>
          <t>The steps followed to set up a subscription to a remote flow are:
1. A user of the Blue NP creates a new subscription to remote FlowA by means of the Flow Namespace User Agent (FNUA).
2. The FNUA connects to the Flow Namespace Accessing Agent (FNAA) of the Blue NP to inform the user request.
3. The FNAA in the Blue NP discovers the remote FNAA to which it must connect to obtain the flow connection parameters. First, it needs to authenticate and, if allowed, the connection parameters will be returned.
4. Once the FNAA in the Blue NP has all the necessary information, it will set up a new Processor that connects the flow in the Orange NP to a flow in the Blue NP.
5. Once the subscription is brought up, every time a Producer in the Orange NP writes an event to FlowA, the Flow Processor will receive it, since it is subscribed to it. Then, the Flow Processor will write that event to FlowB in the Blue NP.
6. From now on, every Consumer connected to FlowB will receive the events published on FlowA.</t>
          <t>In case the user owner of FlowA in the Orange NP wishes to revoke the access, it must be able to do so by means of security credentials revoking against the Identity &amp; Access Manager of the Orange NP.</t>
        </section>
        <section anchor="bidirectional-subscription">
          <name>4.2.2. Bidirectional Subscription</name>
          <t>In Figure 10 we can see an example of all the components needed to set up a flow integration between two different NP. In this case, there are two flows being connected:
* FlowA of the Orange NP with FlowB of the Blue NP
* FlowC of the Blue NP with FlowD of the Orange NP</t>
          <figure>
            <name>Figure 10</name>
            <artwork alt="Example of a bidirectional subscription among two Network Participants." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure10.svg"/>
          </figure>
          <t>Each Flow has its corresponding Queue hosted in the NP Flow Events Broker. Also, there is one Flow Processor for each connection, meaning that these components are in charge of reading new events on source flows to write them to the destination flows as soon as received.</t>
          <t>Also, we can see that in order to connect FlowB to FlowA, a connection from the Blue NP's FNAA has been initiated against the Orange NP's FNAA. This connection uses the FNAP to interchange the flow connection details. Analogously, the FNAA connection to set up the integration of FlowC with FlowD has been initiated by the Orange NP's FNAA.</t>
          <t>After the flow connection details are obtained, the different Flow Processors are set up to consume and produce events from and to the corresponding Queue in the different NPs.</t>
          <t>Once the two processors are initialized, all the events produced to FlowA in the Orange NP will be forwarded to FlowB in the Blue NP; and all the events produced to FlowC in the Blue NP will be forwarder to FlowD in the Orange NP.</t>
        </section>
      </section>
    </section>
    <section anchor="event-streaming-open-network-protocol">
      <name>5. Event Streaming Open Network Protocol</name>
      <t>The protocol to be used in an Event Streaming Open Network is a key component of the overall architecture and design. This chapter is dedicated to thoroughly describe this protocol.</t>
      <section anchor="protocol-definition-methodology">
        <name>5.1. Protocol definition methodology</name>
        <t>It is now necessary to specify the protocol needed for the Flow Namespace Accessing Agent or FNAA, which we have named the Flow Namespace Accessing Protocol or FNAP. In the diagram of Figure 11 we can see how an FNAA client connects with a FNAA server by means of the FNAP.</t>
        <figure>
          <name>Figure 11</name>
          <artwork alt="FNAA client and server communicate using FNAP." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure10.svg"/>
        </figure>
        <t>In order to define a finite state machine for the protocol and the different stimuli that cause a change of state, the model presented by M.Wild (Wild, 2013) in her paper "Guided Merging of Sequence Diagrams" will be employed. This model is beneficial since it provides an integrated method both for client and server maintaining the stimuli relationship that trigger a change of state in each component.</t>
        <figure>
          <name>Figure 12</name>
          <artwork alt="Merged Sequence Diagram for SMTP proposed by Wild, 2013." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure12.svg"/>
        </figure>
        <t>In Figure 12 we have the method proposed by Wild for SMTP, in which there are boxes representing states and arrows representing transitions. Each transition has a label composed of the originating stimulus that triggers the transition and a subsequent stimulus effect triggered by the transition itself. For instance, when a client connects to an SMTP Server, the client goes from "idle" state to "conPend" state. The label of this transition includes "uCon" as the stimulus triggering the transition, which triggers the effect "sCon". Then, on the diagram for the server we can see that the "sCon" triggers the transition from "waiting" state to "accepting" state in the server.</t>
        <t>This method will be used to define the states and transitions for the Flow Namespace Accessing Protocol both for client and server.</t>
      </section>
      <section anchor="flow-namespace-accessing-protocol-fnap">
        <name>5.2. Flow Namespace Accessing Protocol (FNAP)</name>
        <t>Using the model proposed by Wild described previously, we define the finite-state machine for the FNAA Server, which we can see in Figure 13.</t>
        <figure>
          <name>Figure 13</name>
          <artwork alt="Finite-state machine for the Flow Namespace Accessing Protocol." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure13.svg"/>
        </figure>
        <t>The model in right side of Figure 13 shows that the FNAA server starts in a "waiting" state, which basically means that the server has successfully set up the networking requirements to accept client connections. Then, when a client connects, a transition is made to "accepting" state, in which internally the authentication procedure is made. If the authentication is successful, a transition is made to "ready" state, meaning that the client can now execute commands on the FNAA server.</t>
        <t>For each command that the client executes, a transition is made to "cmdRecvd" state. Then, a response is returned to the client, transitioning again to "waiting" state. When the client executes the "Quit" command, a transition is made to the "waiting" state and the server must free all used networking resources for the now closed connection.</t>
        <t>On the left side of Figure 13, we also have the client state machine with its corresponding transitions. The client triggers a connection to the server and once established, an authentication is needed. Once the authentication is correctly done, the client can start requesting commands to the server. For each command executed by the client, a transition is made to "cmdPend" state, until a response is returned by the server.</t>
        <t>Eventually, a "Quit" command will be executed by the client and the connection will be closed.</t>
      </section>
      <section anchor="implementation">
        <name>6. Implementation</name>
        <t>In this section, we provide an approach for the overall implementation of the proposed Event Streaming Open Network. Considering the components defined previously for the architecture, we will define which existing tools can be leveraged and those that require development.</t>
        <section anchor="objectives">
          <name>6.1. Objectives</name>
          <t>The objective of this implementation is to provide specifications for an initial implementation of the overall architecture for the Event Streaming Open Network. Whenever it is possible, existing tools should be leveraged. For those components that need development, a thorough specification is to be provided.</t>
          <section anchor="implementation-overview">
            <name>6.2. Implementation overview</name>
            <t>In Figure 14, we have a diagram of the overall implementation proposal. The components that have the Kubernetes Deployment icon are the ones to be managed by the FNAA server instance. Then, we have a Kafka Cluster that provides a Topic instance for each flow. Finally, the DNS Infrastructure is leveraged.</t>
            <figure>
              <name>Figure 14</name>
              <artwork alt="Implementation overview using Kubernetes, Apache Kafka, DNS Bind9 and the Flow CLI tool." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure14.svg"/>
            </figure>
          </section>
        </section>
      </section>
      <section anchor="existing-components">
        <name>6.3. Existing components</name>
        <t>In this section, we describe the existing software components that can be leveraged for implementation.</t>
        <section anchor="flow-events-broker-feb-1">
          <name>6.3.1. Flow Events Broker (FEB)</name>
          <t>Since there are currently many implementations for this component, it is necessary to develop the needed integrations of other components of the architecture to the main market leaders. Thus, we will consider the following Flow Events Broker for the implementation: Apache Kafka, AWS SQS and Google Compute PubSub.</t>
          <t>In summary, this component does not need to be developed from scratch. However, the FNAA will need to be able to communicate with the different Flow Events Broker, meaning that it must implement their APIs as a client.</t>
        </section>
        <section anchor="flow-name-service-fn">
          <name>6.3.2. Flow Name Service (FN)</name>
          <t>This component can be completely implemented by leveraging on the ISC Bind9 software component, which is the de facto leader for DNS servers. A given NP will need to deploy a Bind9 Nameserver and enable both DNSSEC and DNS Dynamic Update.</t>
          <t>The impact of adopting Bind9 for the implementation means that the FNAA component needs to be able to use a remote DNS Server to manage the Flow URI registration, deregistration and execute recursive DNS resolution.</t>
        </section>
        <section anchor="components-to-be-developed">
          <name>6.4. Components to be developed</name>
          <t>In this section, we describe a set of tools that require development. These components, especially the FNAA, are the core components of every Network Participant. Moreover, these are the components that implement the network protocol FNAP.</t>
          <t>Since these are the core components of the network, they are the natural candidates for validation. In the next chapter, we will show the feasibility of the core network components in the form of a Proof of Concept.</t>
          <section anchor="flow-namespace-accessing-agent-fnaa-1">
            <name>6.4.1. Flow Namespace Accessing Agent (FNAA)</name>
            <t>The Flow Namespace Accessing Agent is a server component that triggers the creation of child processes that implement the different Flow Processors. This means that the instance running the FNAA will bring up new processes for each processor. One way of implementing this functionality can be a parent process that creates new child processes for each processor. However, this would imply the need of creating and managing different threads in a single FNAA instance.</t>
            <t>The problem with the approach of a parent process and child processes for the FNAA is on the infrastructure level. The more processor a FNAA needs to manage, the more compute resources the FNAA would need. In the current cloud infrastructure context, this is problem because it means that additional compute resources should be assigned to the FNAA, depending on the quantity of processors and the required resources for each of them. In summary, this approach would be vertically scalable but not horizontally scalable.</t>
            <t>Then, to avoid the scalability issue, the approach we propose is by implementing a Cloud Native application. By leveraging on Kubernetes, it is possible to trigger the creation of Deployments, which are composed of Pods. Each Pod can contain a given quantity of containers, which are processes running in a GNU/Linux Operating System. In this way, we can dedicate a Pod to run the FNAA server and different Pods to run the Processors. This approach provides a convenient process isolation and enables both horizontal and vertical scalability.</t>
            <t>Moreover, the way in which the FNAA would bring up and manage Processor instances would be though an integration with the underlaying Kubernetes instance, by means of the Kubernetes API. The result is a Cloud Native application that leverages the power and flexibility of Kubernetes to manage the Processor instances.</t>
            <t>On the other hand, the programming language for the FNAA must also be defined. For this, we consider that it must be possible to implement the FNAA and the Flow Processors in different programming languages. For the FNAP it is recommended to employ Golang, since Kubernetes CLI tool is implemented in this language and there are several libraries available for integration. As for the Flow Processors, it must be possible to use any programming language as long as the IPC interface is correctly implemented.</t>
            <t>Regarding the IPC interface for the communications between the FNAA and the Flow Processors, the recommendation is to employ gRPC together with Protobuf. The rationale for choosing this this technology is the fact that gRPC enables binary communications, which are the desired type of communication for systems integration. Then, both the FNAA and the Flow Processors must share this Protobuf interface definition and implement it accordingly through gRPC.</t>
            <t>Finally, the FNAA must implement the protocol we have named FNAP, which provides the main set of functionalities for the Event Streaming Open Network. The implementation of FNAP must be stateful, in the sense that it is connection-based. Additionally, the implementation must be text-based, with the goal that humans can interact with FNAA servers in the same way that it is possible for SMTP servers. The transport protocol must be TCP with no special definition for a port number, since the port should be able to be discovered by means of DNS SRV Resource Records.</t>
            <t>Regarding security for the FNAA servers, TLS must be supported. This means that any client can start a TLS handshake with the FNAA servers before issuing any command.</t>
            <t>In conclusion, the implementation of the FNAA over Kubernetes provides the needed flexibility and set of capabilities required for this component. It is recommended to implement the FNAA in Golang and enable the implementation of Flow Processors in any programming language as long as the Protobuf interface is correctly implemented. Finally, the FNAA must implement the protocol FNAP in a connection-based and text-based manner.</t>
          </section>
          <section anchor="flow-namespace-user-agent-fnua-1">
            <name>6.4.2. Flow Namespace User Agent (FNUA)</name>
            <t>The Flow Namespace User Agent (FNUA) can have different implementations as long as they comply with the protocol FNAP.</t>
            <t>We propose the initial availability of a CLI tool that acts as a Flow Namespace User Agent. This CLI tool must provide a client implementation of all the functionalities available in the FNAA server. Among the functionalities to be implemented as a must, we can mention:
* Discover the FNAA server for a given Flow URI.
* Connect to the FNAA server to manage Flow Namespaces and Flows, as exemplified in Figure 8.</t>
            <t>Additionally, the FNUA should be able to discover the Authoritative FNAA server for a given Flow Namespace. This discovery shall be performed by leveraging on the DNS-SD specification. Refer to Annex D to review the discovery process.</t>
            <t>Regarding the implementation of the CLI tool, it is recommended to employ Golang together with Cobra, a library specialized to create CLI tools. In Figure 15 we have a diagram that shows the different functionalities that the CLI tool should implement.</t>
            <figure>
              <name>Figure 15</name>
              <artwork alt="Flow CLI parameters diagram." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure15.svg"/>
            </figure>
          </section>
        </section>
      </section>
    </section>
    <section anchor="proof-of-concept">
      <name>7. Proof of Concept</name>
      <t>In this section, we will focus on providing a minimum implementation of the main Event Streaming Open Network component: the Flow Namespace Accessing Agent. This implementation should serve as a Proof of Concept of the overall Event Streaming Open Network proposal.</t>
      <t>As described in the previous section, the Flow Namespace Accessing Agent (FNAA) is the main and core required component for the Open Network. All Network Participants must deploy an FNAA server instance in order to be part of the network. The FNAA actually implements a server-like application for the Flow Namespace Accessing Protocol (FNAP). Then, the first objective of this Proof of Concept is to show an initial implementation of the FNAA server component.</t>
      <t>On the other hand, the FNAA is accessed by means of a Flow Namespace User Agent (FUA). This component acts as a client application that connects to a FNAA. Also, this component can take different forms: it could be a web-based application, a desktop application or even a command line tool. For the purposes of this Proof of Concept, we will implement a CLI tool that acts as a client application for the FNAA. Thus, the second objective of this PoC is to provide an initial implementation of the FNUA client component.</t>
      <t>In the following sections, we will first describe the minimum functionalities considered for validating the overall proposal for the Event Streaming Open Network. This minimum set of requirements for both the FNAA and the FNUA will compose the Proof of Concept.</t>
      <t>Afterwards, we will describe the technology chosen for the initial implementation of both the FNAA and the FNUA. Then, a description of how these tools work in isolation will be provided. Subsequently, we will review different use cases to prove how the network could be used by network participants and its users.</t>
      <t>Lastly, we will provide a conclusion for this Proof of Concept, where we mentioning if and how the minimum established requirements have been met or not.</t>
      <section anchor="minimum-functionalities">
        <name>7.1. Minimum functionalities</name>
        <t>Network Participants system administrators must be able to run a Server Application that acts as FNAA.</t>
        <t>Users using a Client Application actiong as a FNUA must be able to:
1. Access the flow account and operate its flows.
2. Create a new flow.
3. Describe an existing flow.
4. Subscribe to an external flow.</t>
      </section>
      <section anchor="fnaa-server-application">
        <name>7.2. FNAA - Server application</name>
        <t>The FNAA server application must implement FNAP as described in Section 6. Basically, the FNAA will open a TCP port on all the IP addresses of the host to listen for new FNUA client connections.</t>
        <t>The chosen language for the development of the FNAA is GoLang. The reason for choosing GoLang is because Kubernetes is written in this language and there is a robust set of libraries available for integration. Although there is no integration built with Kubernetes for this Proof of Concept, the usage of GoLang will enable a seamless evolution of the FNAA application. In future versions of the FNAA codebase, new functionalities leveraging Kubernetes will be easier to implement than if using a different programming language.</t>
        <t>When the FNAA server application is initialized, it provides debug log messages describing all client interactions. In order to start the server application, a Network Participant system administrator can download the binary and execute it in a terminal:</t>
        <t>ignatius ~ 0$./fnaad 
server.go:146: Listen on [::]:61000
server.go:148: Accept a connection request.</t>
        <t>Now that the 61000 TCP port is open, we can test the behaviour by means of a raw TCP using telnet command in a different terminal:</t>
        <t>ignatius ~ 1$telnet localhost 61000
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
220 fnaa.unix.ar FNAA</t>
        <t>We can now see that the server has provided the first message in the connection: a welcome message indicating its FQDN fnaa.unix.ar.</t>
        <t>On the other hand, the server application starts providing debug information for the new connection established:</t>
        <t>ignatius ~ 0$./fnaad 
server.go:146: Listen on [::]:61000
server.go:148: Accept a connection request.
server.go:154: Handle incoming messages.
server.go:148: Accept a connection request.</t>
      </section>
      <section anchor="fnua-client-application">
        <name>7.3. FNUA - Client application</name>
        <t>In order to test the FNAA server application, a CLI-based FNUA application has been developed. The chosen language for this CLI tool is also GoLang. The reason for choosing GoLang for the FNUA is because of its functionalities for building CLI tools, leveraging on the Cobra library.
Thus, the FNUA for the PoC is an executable file that complies with the diagram in Figure 14.</t>
        <t>One of the requirements for the flow CLI tool is a configuration file that defines the different FNAA servers together with the credentials to use. An example of this configuration file follows:</t>
      </section>
      <section anchor="agents">
        <name>agents:</name>
        <t>name: fnaa-unix
fqdn: fnaa.unix.ar
username: test
password: test
prefix: unix.ar-
-
name: fnaa-emiliano
fqdn: fnaa.emiliano.ar
username: test
password: test
prefix: emiliano.ar-</t>
      </section>
      <section anchor="namespaces">
        <name>namespaces:</name>
        <t>name: flows.unix.ar
agent: fnaa-unix
-
name: flows.emiliano.ar
agent: fnaa-emiliano</t>
        <t>In this file, we can see that there are two FNAA instances described with FQDN fnaa.unix.ar and fnaa.emiliano.ar. Then, there are two namespaces: one called flow.unix.ar hosted on fnaa-unix and second namespace flows.emiliano.ar hosted on fnaa-emiliano. This configuration enables the FNUA to interact with two different FNAA, each of which is hosting different Flow Namespaces.</t>
        <t>Once the configuration file has been saved, the flow CLI tool can now be used. In the following sections, we will show how to use the minimum functionalities required for the Open Network using this CLI tool.</t>
      </section>
      <section anchor="use-cases">
        <name>7.4. Use cases</name>
        <t>### 7.4.1. Use case 1: Authenticating a user
After the connection is established, the first command that the client must execute is the authentication command. As previously defined in Chapter 5, every FNAA client must first authenticate in order to execute commands. Thus, the authentication challenge must be supported both by the FNAA as well as the FNUA.</t>
        <t>It is worth mentioning that the chosen authentication mechanism for this PoC is SASL Plain. This command can be extended furtherly with other mechanisms in later versions. However, this simple authentication mechanism is sufficient to demonstrate the authentication step in the FNAP.</t>
        <t>The SASL Plain Authentication implies sending the username and the password encoded in Base64. The way to obtain the Base64 if we consider a user test with password test, is as follows:
ignatius ~ 0$echo -en "\0test\0test" | base64
AHRlc3QAdGVzdA==</t>
        <t>Now, we can use this Base64 string to authenticate with the FNAA. First, we need to launch the FNAA server instance:</t>
        <t>ignatius~/ $./fnaad --config ./fnaad_flow.unix.ar.yaml
main.go:41: Using config file: ./fnaad_flow.unix.ar.yaml
main.go:57:     Using config file: ./fnaad_flow.unix.ar.yaml
server.go:103: Listen on [::]:61000
server.go:105: Accept a connection request.</t>
        <t>Then, we can connect to the TCP port in which the FNAA is listening:</t>
        <t>ignatius ~ 1$telnet localhost 61000
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
220 fnaa.unix.ar FNAA
AUTHENTICATE PLAIN
220 OK
AHRlc3QAdGVzdA==
220 Authenticated</t>
        <t>Once the client is authenticated, it can start executing FNAP commands to manage the Flow Namespace of the authenticated user. For simplicity purposes, in this Proof of Concept, we will be using a single user.</t>
        <t>In the case of the CLI tool, there is no need to perform an authentication step, since every command the user executes will be preceded by an authentication in the server.</t>
        <section anchor="use-case-2-creating-a-flow">
          <name>7.4.2. Use case 2: Creating a flow</name>
          <t>Once the authentication is successful, the client can now create a new Flow.  The way to do this using the CLI tool would be:</t>
          <t>ignatius ~/ 0$./fnua create flow time.flow.unix.ar
Resolving SRV for fnaa.unix.ar. using server 172.17.0.2:53
Executing query fnaa.unix.ar. IN 33 using server 172.17.0.2:53
Executing successful: [fnaa.unix.ar.    604800  IN      SRV     0 0 61000 fnaa.unix.ar.]
Resolving A for fnaa.unix.ar. using server 172.17.0.2:53
Executing query fnaa.unix.ar. IN 1 using server 172.17.0.2:53
Executing successful: [fnaa.unix.ar.    604800  IN      A       127.0.0.1]
Resolved A to 127.0.0.1 for fnaa.unix.ar. using server 172.17.0.2:53
C: Connecting to 127.0.0.1:61000
C: Got a response: 220 fnaa.unix.ar FNAA
C: Sending command AUTHENTICATE PLAIN
C: Wrote (20 bytes written)
C: Got a response: 220 OK
C: Authentication string sent: AHRlc3QAdGVzdA==
C: Wrote (18 bytes written)
C: Got a response: 220 Authenticated
C: Sending command CREATE FLOW time.flow.unix.ar
C: Wrote (31 bytes written)
C: Server sent OK for command CREATE FLOW time.flow.unix.ar
C: Sending command QUIT
C: Wrote (6 bytes written)</t>
          <t>The client has discovered the FNAA server for Flow Namespace flow.unix.ar by means of SRV DNS records. Thus, it obtained both the FQDN of the FNAA together with the TCP port where it is listening, in this case 61000. Once the resolution process ends, the FNUA connects to the FNAA. First, the FNUA authenticates with the FNAA and then it executes the create flow command.</t>
          <t>If we were to simulate the same behavior using a raw TCP connection, the following steps would be executed:</t>
          <t>ignatius ~ 1$telnet localhost 61000
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
220 fnaa.unix.ar FNAA
AUTHENTICATE PLAIN
220 OK
AHRlc3QAdGVzdA==
220 Authenticated
CREATE FLOW time.flows.unix.ar
220 OK time.flows.unix.ar</t>
          <t>Now, the client has created a new flow called time.flows.unix.ar located in the flows.unix.ar namespace. The FNAA in background has created a Kafka Topic as well as the necessary DNS entries for name resolution.</t>
        </section>
        <section anchor="use-case-3-describing-a-flow">
          <name>7.4.3. Use case 3: Describing a flow</name>
          <t>Once a flow has been created, we can obtain information of if by executing the following command using the CLI tool:</t>
          <t>ignatius ~/ 1$./fnua describe flow time.flow.unix.ar
Resolving SRV for fnaa.unix.ar. using server 172.17.0.2:53
Executing query fnaa.unix.ar. IN 33 using server 172.17.0.2:53
Executing successful: [fnaa.unix.ar.    604800  IN      SRV     0 0 61000 fnaa.unix.ar.]
Nameserver to be used: 172.17.0.2
Resolving A for fnaa.unix.ar. using server 172.17.0.2:53
Executing query fnaa.unix.ar. IN 1 using server 172.17.0.2:53
Executing successful: [fnaa.unix.ar.    604800  IN      A       127.0.0.1]
Resolved A to 127.0.0.1 for fnaa.unix.ar. using server 172.17.0.2:53
C: Connecting to 127.0.0.1:61000
C: Got a response: 220 fnaa.unix.ar FNAA
C: Sending command AUTHENTICATE PLAIN
C: Wrote (20 bytes written)
C: Got a response: 220 OK
C: Authentication string sent: AHRlc3QAdGVzdA==
C: Wrote (18 bytes written)
C: Got a response: 220 Authenticated
C: Sending command DESCRIBE FLOW time.flow.unix.ar
C: Wrote (33 bytes written)
C: Server sent OK for command DESCRIBE FLOW time.flow.unix.ar
Flow time.flow.unix.ar description:
flow=time.flow.unix.ar
type=kafka
topic=time.flow.unix.ar
server=kf1.unix.ar:9092
Flow time.flow.unix.ar described successfully
Quitting
C: Sending command QUIT
C: Wrote (6 bytes written)</t>
          <t>In the output of the describe command we can see all the necessary information to connect to the Flow called time.flow.unix.ar: (i) the type of Event Broker is Kafka, (ii) the Kafka topic has the same name of the flow and (iii) the Kafka Bootstrap server with port is provided. If we were to obtain this information using a manual connection, the steps would be:</t>
          <t>ignatius ~ 1$telnet localhost 61000
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
220 fnaa.unix.ar FNAA
AUTHENTICATE PLAIN
220 OK
AHRlc3QAdGVzdA==
220 Authenticated
DESCRIBE FLOW time.flows.unix.ar
220 DATA 
flow=time.flows.unix.ar
type=kafka
topic=time.flows.unix.ar
server=kf1.unix.ar:9092
220 OK</t>
          <t>Now, we can use this information to connect to the Kafka topic and start producing or consuming events.</t>
        </section>
        <section anchor="use-case-4-subscribing-to-a-remote-flow">
          <name>7.4.4. Use case 4: Subscribing to a remote flow</name>
          <t>In this section, we will show how a subscription can be set up. When a user commands the FNAA to create a new subscription to a remote Flow, the local FNAA server first needs to discover the remote FNAA server. Once the server is discovered by means of DNS resolution, the local FNAA contacts the remote FNAA, authenticates the user and then executes a subscription command.</t>
          <t>Thus, the initial communication between the FNUA and the FNAA, in which the user indicates to subscribe to a remote flow, would be as follows:</t>
          <t>ignatius ~ 1$telnet localhost 61000
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
220 fnaa.unix.ar FNAA
AUTHENTICATE PLAIN
220 OK
AHRlc3QAdGVzdA==
220 Authenticated
SUBSCRIBE time.flows.unix.ar LOCAL emiliano.ar-time.flows.unix.ar
220 DATA
ksdj898.time.flows.unix.ar
220 OK</t>
          <t>Once the user is authenticated, a SUBSCRIBE command is executed. This command indicates first the remote flow to subscribe to. Then, it also specifies with LOCAL the flow where the remote events will be written. In this example, the remote flow to subscribe to is time.flows.unix.ar, and the local flow is emiliano.ar-time.flows.unix.ar. Basically, a new flow has been created, emiliano.ar-time.flows.unix.ar, where all the events of flow time.flows.unix.ar will be written.</t>
          <t>The server answers back with a new Flow URI, in this case ksdj898.time.flows.unix.ar. This Flow URI indicates a copy of the original flow time.flows.unix.ar created for this subscription. Thus, the remote FNAA has full control over this subscription, being able to revoke it by simply deleting this flow or applying Quality of Service rules.</t>
          <t>The remote FNAA has set up a Bridge Processor to transcribe messages in topic time.flows.unix.ar to the new topic ksdj898.time.flows.unix.ar. Another alternative to a Bridge Processor would be a Distributor Processor, which could be optimized for a Flow with high demand. Moreover, instead of creating a single Bridge Processor per subscription, a Distributor Processor could be used, in order to have a single consumer of the source flow and write the events to several subscription flows.</t>
          <t>The user could use the FNUA CLI tool to execute this command in the following manner:</t>
          <t>ignatius ~ 0$./fnua --config=./flow.yml subscribe time.flows.unix.ar --nameserver 172.17.0.2 -d --agent fnaa-emiliano
Initializing initConfig
    Using config file: ./flow.yml
Subscribe to flow
Agent selected: fnaa-emiliano
Resolving FNAA FQDN fnaa.emiliano.ar
Starting FQDN resolution with 172.17.0.2
Resolving SRV for fnaa.emiliano.ar. using server 172.17.0.2:53
Executing query fnaa.emiliano.ar. IN 33 using server 172.17.0.2:53
FNAA FQDN Resolved to fnaa.emiliano.ar. port 51000
Resolving A for fnaa.emiliano.ar. using server 172.17.0.2:53
Resolved A to 127.0.0.1 for fnaa.emiliano.ar. using server 172.17.0.2:53
C: Connecting to 127.0.0.1:51000
C: Got a response: 220 fnaa.unix.ar FNAA
Connected to FNAA
Authenticating with PLAIN mechanism
C: Sending command AUTHENTICATE PLAIN
C: Wrote (20 bytes written)
C: Got a response: 220 OK
C: Authentication string sent: AHRlc3QAdGVzdA==
C: Wrote (18 bytes written)
C: Got a response: 220 Authenticated
Authenticated
Executing command SUBSCRIBE time.flows.unix.ar LOCAL emiliano.ar-time.flows.unix.ar
C: Sending command SUBSCRIBE time.flows.unix.ar LOCAL emiliano.ar-time.flows.unix.ar
C: Wrote (67 bytes written)
C: Server sent OK for command SUBSCRIBE time.flows.unix.ar LOCAL emiliano.ar-time.flows.unix.ar
Flow emiliano.ar-time.flows.unix.ar subscription created successfully
Server responded: emiliano.ar-time.flows.unix.ar SUBSCRIBED TO ksdj898.time.flows.unix.ar
Quitting
C: Sending command QUIT
C: Wrote (6 bytes written)
Connection closed</t>
          <t>This interaction of the FNUA with the FNAA of the Flow Namespace emiliano.ar (fnaa-emiliano) has trigger an interaction with the FNAA of unix.ar Flow Namespace (fnaa-unix). This means that before fnaa-emiliano was able to respond to the FNUA, a new connection was opened to the remote FNAA and the SUBSCRIBE command was executed.</t>
          <t>The log of fnaa-emiliano when the SUBCRIBE command was issued looks as follows:</t>
          <t>server.go:111: Handle incoming messages.
server.go:105: Accept a connection request.
server.go:253: User authenticated
server.go:347: FULL COMMAND: SUBSCRIBE time.flows.unix.ar LOCAL emiliano.ar-time.flows.unix.ar
server.go:401: Flow is REMOTE
client.go:280: **#Resolving SRV for time.flows.unix.ar. using server 172.17.0.2:53
server.go:417: FNAA FQDN Resolved to fnaa.unix.ar. port 61000
client.go:42: C: Connecting to 127.0.0.1:61000
client.go:69: C: Got a response: 220 fnaa.unix.ar FNAA
server.go:435: Connected to FNAA
server.go:436: Authenticating with PLAIN mechanism
client.go:126: C: Sending command AUTHENTICATE PLAIN
client.go:133: C: Wrote (20 bytes written)
client.go:144: C: Got a response: 220 OK
client.go:154: C: Authentication string sent: AHRlc3QAdGVzdA==
client.go:159: C: Wrote (18 bytes written)
client.go:170: C: Got a response: 220 Authenticated
server.go:444: Authenticated
client.go:82: C: Sending command SUBSCRIBE time.flows.unix.ar
client.go:88: C: Wrote (30 bytes written)
client.go:112: C: Server sent OK for command SUBSCRIBE time.flows.unix.ar
server.go:456: Flow time.flows.unix.ar subscribed successfully
server.go:457: Server responded: ksdj898.time.flows.unix.ar
server.go:459: Quitting</t>
          <t>We can see how fnaa-emiliano had to trigger a client subroutine to contact the remote fnaa-unix. Once the server FQDN, IP and Port is discovered by means of DNS, a new connection is established and the SUBSCRIBE command is issued. Here we can see the log of fnaa-unix:</t>
          <t>server.go:111: Handle incoming messages.
server.go:105: Accept a connection request.
server.go:253: User authenticated
server.go:139: Received command: subscribe
server.go:348: [SUBSCRIBE time.flows.unix.ar]
server.go:367: Creating flow endpoint time.flows.unix.ar
server.go:368: Creating new topic ksdj898.time.flows.unix.ar in Apache Kafka instance kafka_local
server.go:369: Creating Flow Processor src=time.flows.unix.ar dst=ksdj898.time.flows.unix.ar
server.go:370: Adding DNS Records for ksdj898.time.flows.unix.ar
server.go:372: Flow enabled ksdj898.time.flows.unix.ar
server.go:139: Received command: quit</t>
          <t>Thus, we were able to set up a new subscription in fnaa-emiliano that trigger a background interaction with fnaa-unix.</t>
        </section>
        <section anchor="results-of-the-poc">
          <name>7.5. Results of the PoC</name>
          <t>We can confirm the feasibility of the overall Event Streaming Open Network architecture. The test of the proposed protocol FNAP and its implementation, both in the FNAA and FNUA (CLI application), show that the architecture can be employed for the purpose of distributed subscription management among Network Participants.</t>
          <t>The minimum functionalities defined both for the Network Participants and the Users were met. Network Participants can run this type of service by means of a server application, the FNAA server. Also, the CLI-tool resulted in a convenient low-level method to interact with a FNAA server.</t>
          <t>In further implementations, the server application should be optimized as well as secured, for instance with a TLS handshake. Also, the CLI-tool could be enhanced by a web-based application with a friendly user interface.</t>
          <t>Nevertheless, the challenge for a stable implementation of both components is the possibility of supporting different Event Brokers and their evolution. Not only Apache Kafka should be supported but also the main Public Cloud providers events solutions, such as AWS SQS or Google Cloud Pub/Sub. Since the Event Brokers are continuously evolving, the implementation of the FNAA component should keep up both with the API and new functionalities of these vendors.</t>
          <t>Regarding the protocol design, it would be needed to enhance the serialization of the exchanged data. In this sense, it could be convenient to define a packet header for the overall interaction between the FNAA both with remote FNAA as well as with FNUA.</t>
          <t>Regarding the subscription use case, it would be necessary to establish a convenient format for the server response. Currently, the server is returning a key/value structure with the details of the Flow. This structure may not be the most adequate, since it may differ depending on the Event Broker used.</t>
          <t>Also, the security aspect needs further analysis and design since its fragility could lead to great economical damage for organizations. Thus, it would be recommended to review the different security controls needed for this solution as part of an Information Security Management System.</t>
          <t>Finally, the implementation should leverage the Cloud Native functionalities provided by the Kubernetes API. For example, the FNAA should trigger the deployment of Flow Processors on demand, in order to provide isolated computing resources for each subscription. Also, a Kubernetes resource could be developed to use the kubectl CLI tool for management, instead of a custom CLI tool.</t>
        </section>
        <section anchor="summary-conclusions">
          <name>8. Summary &amp; Conclusions</name>
          <t>In this chapter we will provide a summary of everything that has been described in this document as well as some conclusions about it.</t>
          <t>We have identified a use case for which there is currently no adequate solution provided by existing tools. This use case is based on the cross-organization integration of real-time event streams. Nowadays, organizations intending to integrate these kind of data streams struggle with offline communication to achieve a common interface for integration. In this context, we proposed an Open Network for Event Streaming as a possible solution for this difficulty.</t>
          <t>For this Open Network, we have followed the main necessities from the technical perspective. While there already exist many components that can be leveraged, some components require analysis, design, and implementation. Then, we referred to the Commons Infrastructure literature in order to show how Event Streaming can be considered an Infrastructure Resource that can enable downstream productive activities. Finally, we established the main guidelines that an Open Network should follow, basing these definitions on Free, Open &amp; Neutral Networks.</t>
          <t>Using the previous definitions, we have designed an architecture for the Event Streaming Open Network, establishing the components that the different Network Participants should implement in order to participate in the network. After providing a thorough description of all the components, we showed some use cases of integration among different Network Participants.</t>
          <t>Once the architecture was defined, we proposed an implementation approach which describes the existing components that can be leveraged as well as those that need to be developed from scratch. The outcome was that a server-side application called FNAA had to be developed. This application implements the protocol FNAP and can be accessed by a client application, which we named FNUA.</t>
          <t>Finally, we proved the feasibility of the proposed architecture by providing an implementation of the minimum functionalities required, in the form of a Proof of Concept. The results of this PoC were encouraging since it was possible to implement the initial functionalities for the FNAA and FNUA components.</t>
          <t>As conclusion, we can mention that there is great potential for an Open Network for Event Streaming among organizations. In the same way the email infrastructure acts as an open network for electronic communications among people, this kind of network would enable developers to integrate real-time event streams while minimizing offline agreement of interfaces and technologies.</t>
          <t>However, there are many difficulties that could be furtherly worked on. First, a robust implementation for the Event Streaming Open Network main components must be provided, mainly for the FNAA and FNUA. In order to achieve an acceptable level of quality and stability, the development of a community around the project is needed.</t>
          <t>Secondly, we found that the proposed architecture is a convenient starting point. However, it can suffer modifications based on the learning process during the implementation. For example, while designing the architecture, we avoided the need of a database for the FNAA component, leveraging on the DNS infrastructure. While this can be sufficient for the minimum functionalities described, it will most probably be necessary for the FNAA to persist data in a database of its own. In this sense, we believe that leveraging the Kubernetes resources model could be a convenient alternative.</t>
          <t>Thirdly, during the PoC execution, we identified some difficulties implementing the security functionalities of authentication and authorization. Although we were able to implement an authentication mechanism, the reality indicates that integration with well-established protocols is needed (i.e., OAuth, GSSAPI, etc.).</t>
          <t>Finally, there is also the need to leverage on the Cloud Native architecture, basically Kubernetes, to provide hyper-scalability and enable Network Participants to agnostically choose the underlaying infrastructure. The selection of Golang for the PoC implementation showed to be convenient, given the vast number of available libraries for integration of third-party components and services.</t>
          <t>Notwithstanding the difficulties, we firmly believe that cross-organization real-time event integration can provide great benefits for society. It would enhance the efficiency of business processes throughout organizations. Also, it would provide broad visibility to the final users, enabling experimentation and entrepreneurship. New business models for existing productive activities could be developed, as well as enabling innovation, which in turn would conform the positive externalities of the Event Streaming Open Network.</t>
        </section>
      </section>
    </section>
    <section anchor="security-considerations">
      <name>Security Considerations</name>
      <t>TODO Security</t>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <t>This document has no IANA actions.</t>
    </section>
  </middle>
  <back>
    <references>
      <name>Normative References</name>
      <reference anchor="RFC2119">
        <front>
          <title>Key words for use in RFCs to Indicate Requirement Levels</title>
          <author fullname="S. Bradner" initials="S." surname="Bradner">
            <organization/>
          </author>
          <date month="March" year="1997"/>
          <abstract>
            <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
          </abstract>
        </front>
        <seriesInfo name="BCP" value="14"/>
        <seriesInfo name="RFC" value="2119"/>
        <seriesInfo name="DOI" value="10.17487/RFC2119"/>
      </reference>
      <reference anchor="RFC8174">
        <front>
          <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
          <author fullname="B. Leiba" initials="B." surname="Leiba">
            <organization/>
          </author>
          <date month="May" year="2017"/>
          <abstract>
            <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
          </abstract>
        </front>
        <seriesInfo name="BCP" value="14"/>
        <seriesInfo name="RFC" value="8174"/>
        <seriesInfo name="DOI" value="10.17487/RFC8174"/>
      </reference>
    </references>
    <section numbered="false" anchor="acknowledgments">
      <name>Acknowledgments</name>
      <t>URQUHART J. (2021) Flow Architectures 
FRISCHMANN B. (2007) [Online] Infrastructure Commons in Economic Perspective &lt; https://firstmonday.org/article/view/1901/1783&gt;
WIDL M. (2013), Guided Merging of Sequence Diagrams
NAVARRO L. (2018) [Online] Network Infrastructures: The commons model for local participation, governance and sustainability <eref target="https://www.apc.org/en/pubs/network-infrastructures-commons-model-local-participation-governance-and-sustainability">https://www.apc.org/en/pubs/network-infrastructures-commons-model-local-participation-governance-and-sustainability</eref>
BRINO A. (2019) Towards an Event Streaming Service for ATLAS data processing.
GUTTRIDGE, Gartner (2021) "Modern Data Strategies for the Real-time Enterprise" Big Data Quarterly 2021</t>
    </section>
  </back>
  <!-- ##markdown-source:
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

-->

</rfc>
