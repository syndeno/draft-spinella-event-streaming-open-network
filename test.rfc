<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.25 (Ruby 2.7.0) -->
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-spinella-event-streaming-open-network" category="info" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.0 -->
  <front>
    <title abbrev="ESON">Event Streaming Open Network</title>
    <seriesInfo name="Internet-Draft" value="draft-spinella-event-streaming-open-network"/>
    <author initials="E." surname="Spinella" fullname="Emiliano Spinella">
      <organization>Syndeno</organization>
      <address>
        <email>emiliano.spinella@syndeno.com</email>
      </address>
    </author>
    <date year="2022" month="January" day="26"/>
    <area>TBD</area>
    <workgroup>TBD</workgroup>
    <keyword>Internet-Draft</keyword>
    <abstract>
      <t>This document describes the vision, architecture and network protocol for an Event Streaming Open Network over the Internet.</t>
    </abstract>
    <note removeInRFC="true">
      <name>About This Document</name>
      <t>
        The latest revision of this draft can be found at <eref target="https://example.com/LATEST"/>.
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-spinella-event-streaming-open/"/>.
      </t>
      <t>
      </t>
      <t>Source for this draft and an issue tracker can be found at
        <eref target="https://github.com/syndeno/draft-spinella-event-streaming-open-network"/>.</t>
    </note>
  </front>
  <middle>
    <section anchor="introduction">
      <name>1. Introduction</name>
      <t>Society is rapidly digitalizing and automating the exchanges of value that constitute the economy. Also, considerable time and energy is spent to assure that key transactions can be executed with reduced human involvement with better, faster, and more accurate results. In this context, Event Streaming can play a key role in how the economic system evolves.</t>
      <t>However, most of the application layer integrations executed today across organizational boundaries are not in real time. Also, they currently require employing a variety of formats and protocols. Some industries have adopted data formats for exchanging information between organizations, such as Electronic Data Interchange (EDI). However, those integrations are limited to specific use cases and represent a small fraction of all demanded organizational integrations.</t>
      <t>Thus, there is no consistent and common consensus on a mechanism for the exchange of events across organizations. This results in a completely custom landscape for each real-time cross-organization integration. In this scenario, development teams must invest plenty of time into understanding and defining a common interface for events exchange.</t>
      <t>In this context, we can now introduce how this landscape could change with the introductiopn of an Event Streaming Open Network over the Internet. When needing to connect real-time event flows across organizations, developers would have a common basis for finding, publishing, and subscribing to event streams. Also, given a set of standard formats to encode and transmit events, developers could use the programming language of their choice. Overall, this set of standards would drastically reduce the cost of real-time integration, which would also enable experimentation by users.</t>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
    </section>
    <section anchor="an-open-network-for-event-streaming-over-the-internet">
      <name>2. An Open Network for Event Streaming over the Internet</name>
      <t>In this section, we will argue how Internet standards are developed and why this could be the case for an Event Streaming Open Network.</t>
      <t>An interesting example of this phenomenon is the case of ISDN (Integrated Services Digital Network), a set of communications standards for the transmission of voice, video, and data over the PSTN (Public Switched Telephone Network) developed by the ITU-T (Telecommunication Standardization Sector) in 1988. ISDN pretended to use the existing public telephone network to transmit digital data in a time when the Internet connectivity access was not as broadly available as it is today. The main competitor of this standard was the incipient Internet itself, which could be used to transmit the same data.</t>
      <t>The Internet alternative needed a protocol to support the same services offered by ISDN, which was initially developed by the conjoint effort of the academic and private sector. Consequently, in 1992 the Mbone (Multicast Bone) was created. This project was an experimental network backbone built over the Internet for carrying multicast IP traffic, which could be used for multimedia content. After some important milestones of this project, the SIP (Session Initiation Protocol) was defined in 1996 and was published as a standard protocol in IETF's RFC-3261. The reality today is that SIP has completely won the standards battle for multimedia transmission over the Internet, and ISDN usage has been on continuous decline.</t>
      <t>As for Event Streaming, we see a similar scenario set-up today. There are currently several open specifications and implementations for Event Streaming, like AMQP (Advanced Messaging Queueing Protocol), supported by RabbitMQ. However, while AMQP can be used for several purposes, Kafka Protocol specializes on Event Streaming Processing and its specialized features make it more convenient than RabbitMQ (i.e. ordering).</t>
      <t>In the case of an Event Streaming Open Network over the Internet, if we guide ourselves by the history of the most widely adopted protocols on the Internet, the governance should be similar to that of the WWW or Email. Both the WWW and Email have open specifications as well as open-source implementations. We can mention the Apache Web Server as an open-source implementation of the HTTP protocol; Postfix for SMTP; and Bind for DNS. Nevertheless, the governance for these protocols' specifications relies on the IETF.</t>
      <t>In order to define the characteristics of an Event Streaming Open Network, we will focus on the definition of shared and openly accessible infrastructure. First, we will review the principles of Free, Open &amp; Neutral Networks and why they should be followed for an Event Streaming Open Network. Then, we will show how DNS complies with the criteria to be considered an infrastructure resource. Finally, we will demonstrate how this is also true for Event Streaming.</t>
      <section anchor="free-open-neutral-networks-fonn">
        <name>2.1. Free, Open &amp; Neutral Networks (FONN)</name>
        <t>The main principles of a Free, Open &amp; Neutral Network are:</t>
        <ul spacing="normal">
          <li>It is open because it is universally open to the participation of everybody without any kind of exclusion nor discrimination, and because it is always described how it works and its components, enabling everyone to improve it.</li>
          <li>It is free because everybody can use it for whatever purpose and enjoy it independently of his network participation degree.</li>
          <li>it is neutral because the network is independent of the contents, it does not influence them and they can freely circulate; the users can access and produce contents independently to their financial capacity or their social condition. The new contents produced are orientated to stimulate new ones, or for the network administration itself, or simply in exercise of the freedom of adding new contents, but not to replace or to to block other ones.</li>
          <li>It is also neutral with regard to the technology, the network can be built with whatever technology chosen by the participants with the only limitations resulting of the technology itself.</li>
        </ul>
      </section>
      <section anchor="non-discriminatory-and-open-access">
        <name>2.1.1. Non-discriminatory and open access</name>
        <t>Services such as DNS, the World Wide Web and Email do not discriminate and are open-accessible. Basically, people and organizations can access these networks as long as they can register an Internet Domain and host the required server components. Nowadays, there are alternatives to avoid having to register a domain name to have a web page or an email, such as Cloud WordPress Hosting or Gmail. However, we will focus on the network participants that provide services to end-users.</t>
        <t>In the case of Guifi.net, we can highlight how this principle has been adopted in the fact that everybody can take part in the project without discrimination. Moreover, an emphasis is made in easing the participation of the disadvantaged collectives, with less resources or less opportunities to access information technologies, telecommunications, and the Internet.</t>
        <t>An Event Streaming Open Network should provide resources in a similar way than the most widely adopted Internet Services. Thus, individuals and organizations must be able to register Flow address spaces for which the existing DNS infrastructure could be leveraged. Moreover, the specification of the protocols that implement the Metadata and Payload formats must also be openly accessible.</t>
      </section>
      <section anchor="open-participation">
        <name>2.1.2. Open participation</name>
        <t>Internet Services like DNS, WWW and Email provide individuals and organizations with different ways of participation. First, anybody can obtain the protocols' specification and build a custom implementation, which would result in a new product compatible with the protocols. Secondly, anybody can register a domain name and set up servers using compatible products. Thirdly, anybody can join and participate in the IETF, the institution that governs the specifications for these protocols.</t>
        <t>As for Guifi.net, not only anybody can extend the network with new nodes but also can also participate in existing projects of network extension. Also, the participants can add services on top of the network such as VoIP, FTP servers, broadcast radios, etc.</t>
        <t>Regarding active participation on an Event Streaming Open Network, we can highlight the possibility for individuals and organizations to expand the services provided by the open network. This extensibility could be made possible by different uses of the event payloads and will vary significantly depending on the sector. Since we have already proved how Flow is an infrastructure resource, innovation would play its part and its results would be materialized in services expansion.</t>
        <t>We can conclude that the same kind of openness of DNS, WWW and Email is necessary for an Event Streaming Open Network. Anybody should be able to obtain the specifications to build an implementation of the service. Also, since it should leverage the DNS infrastructure, anybody would be able to register Flow address spaces. Lastly, the specification could be governed by an institution such as the IETF, due the dependency of Flow with other Internet Services governed by this institution.</t>
      </section>
      <section anchor="open-access-infrastructure-resources">
        <name>2.2. Open Access Infrastructure Resources</name>
        <t>The literature about Commons Infrastructure (Frischmann, 2007) defines a set of criteria to evaluate if a resource can be considered an infrastructure resource. This analysis is relevant since it can provide some arguments to prove the need of an infrastructure of commons for Event Streaming, which could then be materialized in an Open Network for Event Streaming. The demand-side criteria for evaluating if a given resource can be considered as an infrastructure resource are:</t>
        <ol spacing="normal" type="1"><li>The resource can be consumed nonrivalrously.</li>
          <li>Social demand for the resource is driven primarily by downstream productive activity that requires the resource as an input.</li>
          <li>The resource is used as an input into a wide range of goods and services, including private goods, public goods and/or non-market goods.</li>
        </ol>
        <t>First, a nonrival good describes the "shareable" nature of a given good. Infrastructures are shareable in the sense that the resources can be accessed and used by multiple users at the same time. However, infrastructure resources vary in their capacity to accommodate multiple users, and this variance in the capacity differentiates nonrival resources from partially rival resources. A nonrival resource represents those resources with infinite capacity, while a partially rival resource has finite but renewable capacity. As an example, Broadcast Television is a nonrival resource since additional users do not affect the capacity of the resource. On the other hand, natural oil resources are completely rival since its availability is limited and it is not renewable. In the middle, we have partially rival resources like a highway, which may be congested. This last characteristic is also true for the Internet since it supports additional users without degrading the service to existing users to a certain extent.</t>
        <t>Secondly, infrastructure resources consumption is primarily driven by downstream activities that require this resource as an input. This means that the broad audience consumes infrastructure resources indirectly. For instance, highway infrastructure is used to transport every kind of physical good which people and organizations purchase. This facilitates the generation of positive externalities for society through the downstream production of public goods and non-market goods. These positive externalities might be suppressed under a regime where resource availability is driven solely based on individuals' willingness to pay.</t>
        <t>Regarding willingness to pay, it is relevant to analyze this factor more exhaustively. Frischmann states that if infrastructure access is allocated based on individuals' willingness to pay the potential positive externalities of that infrastructure might be stifled. Thus, infrastructure resources behave differently than end-user products: if the former are made available solely based on the end-user demands and willingness to pay, those needed infrastructure resources might never be made available. As an example, we can mention that if airports were built based on individuals' willingness to pay for them, they might not even be built. However, individuals are willing to pay for the airport's downstream activities, such as purchasing a flight or consuming air-transported goods. Then, a whole set of positive externalities are generated by the existence of an airport in a city.</t>
        <t>In the third place, infrastructure resources are used as input for a wide range of outputs. This criterion emphasizes both the variance of the downstream outputs and their nature. Thus, the infrastructure resources possess a high level of genericness which enable productive activities that produce different goods with high variance. If we consider how an airport complies with this criterion, we can mention that not only airports serve individuals that need to travel by air but are also used to transport many kinds of physical goods. These goods then enable other activities throughout the downstream value chain. Then, the output variance of the activities that take airport infrastructure as input is significantly high.</t>
        <section anchor="open-access-dns-resource-example">
          <name>2.2.1. Open Access DNS Resource Example</name>
          <t>Now, we will provide as an example how DNS complies with these criteria and why it can be considered an infrastructure resource.
1. DNS infrastructure is a partially rival resource because individuals and organizations can register domains in the Domain Name addressing space. It is partially rival because not every actor can acquire the same domain name. However, the access to registering domain names is open and non-discriminatory. Moreover, DNS is also prone to congestion, which emphasizes its partially rival nature.
2. DNS infrastructure demand is driven principally by downstream products and services. An average Internet user is not paying directly for this infrastructure, but all the Internet services the user consumes pay for DNS infrastructure. This is true for all the Internet services due to the ubiquitous nature of DNS infrastructure.
3. All Internet services take as input DNS infrastructure and produce a broad variety of outputs, which then generate positive externalities to society as a whole by means of private goods, public goods and/or non-market goods.</t>
          <t>We can conclude that DNS complies with Frischmann criteria for being considered as an infrastructure resource. The resource is represented both by the domain name that can be and by the querying capacity of DNS servers.</t>
        </section>
        <section anchor="flow-event-streaming-internet-resource">
          <name>2.2.2. Flow: Event Streaming Internet Resource</name>
          <t>In this section, we will describe an Event Streaming Internet Resources. For this, we will consider the previously described guidelines for FONN as well as the characteristics of DNS as a resource. This Event Streaming Internet Resource shall be refered to as "flow" from now onwards.</t>
          <t>To begin with, we need to define what elements could be considered as infrastructure resources in an Event Streaming Open Network. First, the resource must be capable of delivering streams of events to consumers. Secondly, it must also permit producers to write events to the stream. Thirdly, each stream must be identifiable (i.e., URI) and able to be located (i.e., URL). From now on, we will use "Flow" to refer to the infrastructure resource of an Event Streaming Open Network.
The first Frischmann criterion requires the resource to be consumed nonrivalrously. Complete nonrivalrously for any Internet Service cannot be achieved due to the possibility of congestion and potential unavailability of different elements of the network. The same would be true for a Flow resource. Moreover, the public naming addressing space for Flows would be limited to the same level as that of domain names.</t>
          <t>We will continue now with the third criterion. To illustrate the potential of Flow being used as inputs for downstream activities, we will refer to Urquhart's vision for Event Streaming. He lists two areas in which significant changes can happen:</t>
          <ol spacing="normal" type="1"><li>The use of time-critical data for customer experience and efficiency. This is driven because today's consumers are increasingly expecting great experiences, and organizations are almost always motivated to improve the efficiency of their operations.</li>
            <li>The emergence of new businesses and business models. Businesses and institutions will quickly discover use cases where data processed in a timely manner will change the economics of a process or transaction. They may even experiment with new processes, made possible by this timely data flow. Thus, flow resources will also enable innovation. These innovations are responsible for generating positive externalities.</li>
          </ol>
          <t>Then, we have demonstrated why Flow resources can be considered as infrastructure resources using Frischmann's Demand-side Theory of Infrastructure. These resources can be managed in an open manner to maximize positive externalities, which basically means maintaining its open access, not discriminating, and eliminating the need to obtain licenses to use the resources. Consequently, managing infrastructure resources in this manner eliminates the need to rely on either market actors or governments.</t>
          <t>Lastly, the adoption of an Event Streaming Open Network implies taking Flow resources as inputs for productive activities. These inputs would then be used downstream to generate private goods, public goods and/or non-market goods. Additionally, we can assure that most of the consumers of Flow would not directly consume Flow resources. They would consume the outputs of downstream activities that use Flow as input. Again, the consumers may not be willing to pay for Flow resources directly.</t>
          <t>We can conclude this section mentioning that an Event Streaming Open Network would enable one infrastructure resource called Flow. The access to this resource can be managed in an openly manner: maintaining open access, not discriminating users or different uses of the resource, and eliminating the need to obtain approval or a license to use the resource.</t>
        </section>
      </section>
    </section>
    <section anchor="necessities-for-an-event-streaming-open-network-over-the-internet">
      <name>3. Necessities for an Event Streaming Open Network over the Internet</name>
      <t>In this section, we will describe the main needs for the broad adoption of Event Streaming. The focus will be made on detecting and describing the missing capabilities that could not only enable but also accelerate the event data integration among different organizations. The different necessities detailed in this section will serve as input for an architecture design.</t>
      <section anchor="necessity-1-event-streaming-internet-resource-public-registry">
        <name>3.1. Necessity 1: Event Streaming Internet Resource Public Registry</name>
        <t>A public registry of an organization's available event streams does not exist. We will argue in this section why this is the core component that an Event Streaming Open Network can provide.</t>
        <t>Nowadays, when an organization needs to publish an event stream or event flow, they usually follow some form of the following steps:</t>
        <ol spacing="normal" type="1"><li>Develop and deploy a producer application that writes events to a queue.</li>
          <li>Create all necessary networking permissions for external public access to the queue.</li>
          <li>Inform the remote user the access information (i.e., Hostname/IP, protocol, and port) together with the required client details and technology for accessing the stream (i.e., Apache Kafka Protocol, RabbitMQ API, etc.).</li>
          <li>Create credentials for consumer authentication and authorization access to the queue.
5.Develop and deploy a consumer application that reads the queue.</li>
        </ol>
        <t>Now, we can compare this process to a simple email interaction:
1. Sender opens a graphical Mail User Agent application and sends an email to an email address formatted as user@domain.
2. The message is sent to an SMTP server that routes it to the destination SMTP servers for the given domain. Once received, the message is put into the user mailbox.
3. When the recipient checks its mailbox by IMAP or POP3, the new email is transferred to the Mail User Agent.</t>
        <t>In these two scenarios, we can see that the information needed to be exchanged offline by the actors is completely different in size and content.</t>
        <t>First, in the case of email, there is a shared naming space given by the Domain Name Service (DNS). The email format has been standardized by the IETF in RFC 5321, section 2.3.11. Thus, there is a common naming space that is used for referencing mailboxes in the format user@domain. Thus, the offline details communicated by the peers is only the recipient email address. There is no analogous standard nor an open alternative for Event Streaming.</t>
        <t>Therefore, in the case of Event Streaming, users need to perform plenty of offline communication to agree not only on the technology to use but also on the queue to use. For instance, two organizations may be currently using Apache Kafka and need to share an event stream among themselves. The organization having the source of the stream should provide the following details to the consumer organization:
* Bootstrap servers: Fully Qualified Domain Name list of the Apache Kafka brokers to start the connection to the Apache Kafka Brokers. Example: tcp://kf1.cluster.emiliano.ar:9092, tcp://kf2.cluster.emiliano.ar:9092, tcp://kf3.cluster.emiliano.ar:9092
* Topic or Queue name: name of the topic resource in the Apache Kafka Cluster
* Authentication information: User and password, TLS Certificate, etc.</t>
        <t>In the case these organizations were not both using Apache Kafka, the use case cannot be simply solved without incurring in development or complex configurations as well as adopting proprietary components.</t>
        <t>We can conclude that an Event Streaming Open Network should provide a global accessible URI for streams in a similar fashion than email, to reduce offline developers' interactions. This means being able to name event streams in a common naming space like DNS, as well as providing a mechanism for users to discover the location and connections requirements.</t>
      </section>
      <section anchor="necessity-2-establishment-of-a-user-space-for-events">
        <name>3.2. Necessity 2: Establishment of a User Space for Events</name>
        <t>Another need for broad adoption is due to the inexistence of a common and agreed user convention. In the general literature, we cannot find reference to the types of users that would consume or produce events to and from an event stream.</t>
        <t>In this sense, it is also appropriate to consider the email use case. Basically, an email user only needs to know the email address, the password, the URL of a web mail client or the details of IMAP/POP3 server connection. Once the user has this information, it's possible to access an email space or mailbox where the user can navigate the emails in it. Also, IMAP provides the possibility for the user to create folders and optionally share them with other users.</t>
        <t>There is no analogous service currently available for Event Streaming analogous to the email case. This means that the user concept in Event Streaming is limited to authentication and authorization. Thus, the user does not have access to a "streambox". The result is the impossibility for a person or an application to possess a home directory containing all the streams owned by the user.</t>
        <t>As a conclusion for this section, we can mention that it is necessary to embrace a user space resource for Event Streaming. This resource should not only solve the users' motivations and requirements but also reduce the offline verbal communications and custom development dependencies. In the next sections, we will refer to this component as the Event User Space Service.</t>
      </section>
      <section anchor="necessity-3-an-agnostic-subscription-protocol">
        <name>3.3. Necessity 3: An Agnostic Subscription Protocol</name>
        <t>A third need for wide adoption is an agnostic protocol to manage subscriptions to event streams. For this need to be solved, it would be necessary first to count with an Event User Space Service. Then, in case a user has created a stream and wants to enable public subscriptions by other users, there is no general protocol to inform other parties of this subscription intention nor its confirmation.</t>
        <t>The result is the inability for the users to seamlessly subscribe to an event stream. They either must employ protocols like MQTT or, in the need of employing other application protocols like Apache Kafka, hardcode the subscription details in the different software implementations. This means that there is no general subscription protocol for Event Streaming that is agnostic of the application protocol employed. This protocol implements both the Metadata Payload Format and Payload Format.</t>
        <t>A good example to illustrate the difference between a control protocol that implements a Metadata Payload Format from a payload protocol that implements a Payload Format is how SIP (Session Initiation Protocol) works with RTP (Real Time Protocol) to provide VoIP capabilities. The former is a control protocol that initiates and maintains a session or call while the latter is the one responsible for carrying the payloads, which in the case of VoIP it would be coded audio.</t>
        <t>Consequently, a similar definition of protocols could potentially mitigate this limitation for Event Streaming. If a protocol can be used to establish and maintain the subscriptions relationships while another different protocol is used for the events payload, all the current application protocols implementations could be supported.</t>
        <t>Additionally, by counting also with an Event Streaming Public Registry, it would be possible to provide URI for streams in a similar way as email works with the "mailto" URI. For instance, in web pages one can find that email addresses are linked to mailto URIs which, when clicked, open the default email user application (i.e., Microsoft Outlook) to send an email to the referenced email address.</t>
        <t>If a user counts with a user space or streambox, then a user application like an email client could provide access to it. Then, if the user clicks on a link of a stream URI (i.e. "stream:myeventflow"), the streambox application would open and subscribe to the given stream.</t>
        <t>Currently, the Metadata Payload Format as well as the Payload Format are both provided by the queue or log application protocol. In the case of Apache Kafka, both formats are implemented within the Apache Kafka Protocol. This introduces a barrier for interoperability among different technologies, meaning that flows of event data cannot be seamlessly connected, without relying on custom development or proprietary software licensing.</t>
        <t>We can conclude that there is an actual need for an open specification of an Event Subscription Service for event streams, which implements what Urquhart calls Metadata Payload Format. This specification could be materialized in a network protocol that introduces an abstraction for the event queue or log technologies implemented by different organizations.</t>
      </section>
      <section anchor="necessity-4-an-open-cross-sector-payload-format">
        <name>3.4. Necessity 4: An Open Cross-sector Payload Format</name>
        <t>Currently, the different implementations of Event Streaming combine both the Payload Format with the Metadata Format. This means that the same protocol utilized for payload transport is used for subscription management.</t>
        <t>When a producer intends to publish events to a queue or, using Apache Kafka terminology, when a producer intends to write records to a topic, first it needs to initiate a connection to at least one of the Apache Kafka Brokers. In that initial exchange of TCP packages, the producer is authenticated, authorized, and informed with topic details. This set of transactions would belong to a protocol that implements a Metadata Payload Format. Afterwards, when the Producer starts writing the events to the topic, it encapsulates the event payload in a Kafka Protocol message. This latter behavior makes use of a Payload Format. Thus, we can observe how both theoretical formats are coupled in a single protocol. Similar behavior of a coupled Metadata and Payload Format in one single protocol happens also in AMQP, MQTT and RabbitMQ.</t>
        <t>As for the consumer, the behavior is the same with the difference that the initial intention is to subscribe to a queue or, in Apache Kafka terminology, to consume records of a topic. Then, a set of TCP packages encapsulating the Apache Kafka protocol authenticates, authorizes, and informs the Consumer with topic details for consumption. Afterwards, the consumer can start polling for new records in the different partitions of the topic. It is worth mentioning that the consumer needs to implement more queue management logic than the Producer, especially when multiple replicas of a consumer type are deployed.</t>
        <t>If we focus on the Payload Format, there is the need for an implementation-agnostic payload format suitable for Event Streaming. In this sense, CloudEvents project of the CNCF proposes a specification and a set of libraries for this purpose. The goal is to use CloudEvents specification as a Payload Format regardless of the Payload Protocol being used. For instance, we could transmit events in the CloudEvents format using the Kafka or AMQP Protocol.</t>
        <t>The general structure of the CloudEvents Payload Format includes a standardized methodology to include event data in an event message. For instance, instead of defining a customized JSON structure for sending the events of temperature changes measured by a device, a CloudEvent object could be used. Temperature could be included as an attribute in the CloudEvent object.</t>
        <t>We can then conclude that while there is no current protocol candidate that implements the Metadata Format, CloudEvents is a good candidate for the Payload Format needed in an Event Streaming Open Network. In this way, the different CloudEvents libraries made available in several programming could be leveraged.</t>
      </section>
    </section>
    <section anchor="event-streaming-open-network-architecture">
      <name>4. Event Streaming Open Network Architecture</name>
      <t>In this section, we will describe the overall architectural proposal for an Event Streaming Open Network. This description will include the different actors in play, the software components required, as well as the network protocols that should be specificized.</t>
      <section anchor="architecture-overview">
        <name>4.1. Architecture overview</name>
        <t>In Figure 1 we illustrate a high-level overview of an architecture proposal for the Open Network.</t>
        <figure/>
        <name>Figure 1</name>
        <artwork alt="High-level overview of the Event Streaming Open Network" type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure1.svg"/>
        <t>&lt;/figure&gt;</t>
        <t>We can identify different Network Participant (NP) in Figure 1 represented by different colors. The different NPs act as equals when consuming or producing events as part of the Flows they own. All of NPs implement the Event Streaming Open Network Protocol, which Is described in the next chapter.</t>
        <t>In the diagram, an initial flow starts on the orange NP to which a user in the blue NP is subscribed. After processing the events received in the first flow, the results are published to a new flow in NP blue, to which the orange NP is subscribed as well. Now, the green participant is subscribed to the same flow, enabling downstream activities across the rest of the network participants.</t>
        <t>It is possible to observe how the high-level architecture allows sharing the streaming of events across different network participants and their users. Also, there is also the need for security, in order to allow or deny the access to write to and read from flows.</t>
        <t>Regarding security, the architecture considers the integration with an Identity &amp; Access Management service, which could implement popular protocols such as OAuth, SAML or SASL. However, the network should also enable anonymous access in the same way FTP does. This means that a given NP could publicly publish flow and allow any party to subscribe to it.</t>
        <t>For example, nowadays the Network Time Protocol (NTP) is used to synchronize the day and time on servers. There are many NTP servers available that allow anonymous access, meaning that the service is openly available. The same must be considered for the Event Streaming Open Network.</t>
        <t>Additionally, the NP must be able to expand the capacity to support any number of flows, as well as extending the network with new services. Not only NP must be able to include any given set of data within events but also, they must be able to build applications and services on top of the network by employing the architecture primitives.</t>
        <figure/>
        <name>Figure 2</name>
        <artset>
          <artwork alt="Event Streaming Open Network Architecture components" type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure2.svg"/>
        </artset>
        <t>&lt;/figure&gt;</t>
        <t>Now, we provide a brief description of all the components that appear in the diagram of Figure 2. In the next sections further details of the components are provided.</t>
        <ul spacing="normal">
          <li>Flow Events Broker (FEB): a high-available and fault-tolerant service that provide queues to be consumed by network services, by users, and their applications. An example of an Event Queue Broker can be Apache Kafka, AWS SQS or Google Cloud PubSub. The payload format implemented by these tools are what in 3.1.4 we called Event Streaming Payload Format.</li>
          <li>Flow Name Service (FNS): a DNS-based registry that acts as an authoritative server for a set of domain names, which are used to represent flow addresses in a flow namespace. These domains contain all the necessary information to resolve flow names into flow network locations. This component refers to what in 3.1.1 we named Event Streaming Registry.</li>
          <li>Flow Namespace User Agent (FNUA): an application similar to User Mail Agents like Microsoft Outlook or Gmail. This application provides access to flow namespaces to users of the network. 
The definition of this component implies the specification of a dedicated protocol. We will refer to this protocol as FNAP (Flow Namespace Accessing Protocol).</li>
          <li>Flow Namespace Accessing Agent (FNAA): the server-side of the Flow Namespace User Agent. This component is the one that must provide convenient integration methods for GUI. This component refers to what in 3.1.2 we named Event User Space Service.
This component must implement the same protocol selected for the Flow Namespace User Agent: FNAP (Flow Namespace Accessing Protocol).</li>
          <li>Flow Processor (FP): a flow processing instance used to set up subscriptions that connect local or remote flows on demand. This component implements the processing part of what in 3.1.3 we called Event Subscription Service. This component will be created and managed by a FNAA instance, and the communication is held through an Inter-process Communications (IPC) interface. Also, this service must implement an Event Payload Format, for which we will mainly consider CNCF's CloudEvents and Protobuf.</li>
          <li>Flow Namespace Accessing Protocol (FNAP): the protocol implemented in the Flow Namespace Accessing Agent as well as in the Flow Namespace User Agent. The former will act both as a server and a client while the latter only as a client. This protocol is described in the next chapter.</li>
        </ul>
        <section anchor="flow-events-broker-feb">
          <name>4.1.1. Flow Events Broker (FEB)</name>
          <t>The FEB implementation that we will mostly consider is Apache Kafka. This open-source project is quickly becoming a commodity platform, and major cloud providers are building utilities for it. However, as a design decision, it should be possible to use the same protocols to support other applications, such as RabbitMQ, Apache Pulsar or the cloud-based options like AWS SQS or Azure Events Hub.</t>
          <t>Apache Kafka is the ecosystem leader in the Event Streaming space, considering mainly adoption. There is a growing set of tools and vendors supporting its installation, operation, and consumption. This fact makes Apache Kafka much more appealing to enterprise developers. However, the broker should provide a common set of functionalities which can be seen in the diagram of Figure 3.</t>
          <figure/>
          <name>Figure 3</name>
          <artset>
            <artwork type="svg" alt="Event Streaming Open Network Architecture components" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure3.svg"/>
          </artset>
          <t>&lt;/figure&gt;</t>
          <t>The selection of the Events Broker will impact on the implementation of the Flow Namespace Accessing Agent. This last component will be responsible for knowing how to set up and manage flows on top of different Events Brokers.</t>
        </section>
        <section anchor="flow-name-service-fns">
          <name>4.1.2. Flow Name Service (FNS)</name>
          <t>FNS is a core component for the overall proposed architecture. This component provides all needed functionalities for obtaining Flow connection details based on a Flow URI (Uniform Resource Identifier). Thus, it is required to define a URI format for Flow resources and to specify mechanisms for resource location resolution.</t>
          <t>In this section, we will focus on describing both the URI for Flow as well as the DNS mechanism for obtaining Flow network location details.</t>
          <section anchor="leveraging-dns-infrastructure">
            <name>4.1.2.1. Leveraging DNS infrastructure</name>
            <t>As mentioned previously, this component must maximize its leverage on the existing Internet DNS infrastructure. The reason for this requirement is to avoid defining new protocols and services that prevent broad adoption. Currently, DNS is the de facto name resolution protocol for the Internet, and there exist libraries for its usage on every programming language.</t>
            <t>Whereas DNS is mainly used to resolve FQDN (Fully Qualified Domain Names) into IP addresses, there are many other functionalities provided by the global DNS infrastructure. Theoretically, DNS is an open network of a distributed database. Individuals and organizations that want to participate in the network need to register a domain name and set up Authoritative DNS servers for domains.</t>
            <t>It is not in the scope of this work to detail the different available usages of DNS functionalities, but we can mention that it provides special Resource Records (i.e., types of information for a FQDN) that are solely used by special protocols. For instance, the MX Resource Records are used by SMTP servers to exchange email messages.</t>
            <t>For the Flow Open Network, it will be required to define a URI format for flows as well as the mechanism to resolve an URI into all the needed information to connect to a flow. In the case of email, a URI is the email address while the connection details will be the SMTP server responsible for receiving emails for that account. For instance, an email URI could be user@domain.com while its connection details could be smtp://mail.domain.com. The way in which the connection details are obtained is by resolving the MX DNS Resource Records of domain.com, which in this example is mail.domain.com.</t>
          </section>
          <section anchor="flow-uri">
            <name>4.1.2.2. Flow URI</name>
            <t>As we mentioned previously, the first needed element is a URI definition for flow resources. These resources identification must capture the following details:
* Domain, a registered domain in which create flow resources references. For example, airport.com.
* Flow Namespace, a subdomain which is solely used by users to host flow names. This subdomain must be delegated to the Flow Name Server component and desirable should not be used for any other purpose other than flow.
* Flow Name, a name for each flow that must be unique within its domain. The combination of flow name and flow domain results in an FQDN. For instance, we could have a flow named arrivals of the domain flow.airport.com. Thus, the FQDN of the flow would be arrivals.flow.airport.com. Also, the name can contain dots so that the following FQDN could be also used: airline.arrivals.flow.airport.com.</t>
            <t>Thus, the general syntax of a flow URI would be:</t>
            <t>flow://<flow_name>.<flow_namespace>.<domain/>
                </flow_namespace>
              </flow_name>
            </t>
            <t>This URI has the advantage that is similar to "mailto" URI and could be implemented in HTML to refer to flow resources. Some examples:</t>
            <ul spacing="normal">
              <li>flow://entrances.building.company.com</li>
              <li>flow://exits.building.company.com</li>
              <li>flow://temperature.house.mydomain.com</li>
              <li>flow://pressure.room1.office.mydomain.com</li>
            </ul>
            <t>The flow URI must unequivocally identify a flow resource and provide, by means of DNS resolution mechanisms, all the information required to use the flow. Among these parameters, at least the following should be resolvable:</t>
            <ul spacing="normal">
              <li>Event Queue Broker protocol utilized by the flow. For instance, if Apache Kafka is used, the protocol would be "kafka"; In case RabbitMQ is used by the flow, "amqp". Also, it must be informed if the protocol is protected by TLS.</li>
              <li>Event Queue Broker FQDN or list of FQDNs that resolve to the IP address of one or a set of the Event Queue Brokers. For instance, kafka-1.mycompany.com, kafka-2.mycompany.com.</li>
              <li>Event Queue Broker Port used by the Event Queue Brokers. For instance, in the case of Kafka: 9092, 9093.</li>
              <li>Event Queue Broker Transport Security Layer can be implemented. Thus, it is needed to know if the connection uses TLS before establishing it.</li>
              <li>Queue Name hosted in the Event Queue Broker, which must be equal to that of the corresponding flow name.</li>
            </ul>
            <t>The general syntax of the Flow URI would be as follows:</t>
            <t>flow://flowName.flowCategory.myNameSpace.domain.tld</t>
            <ul spacing="normal">
              <li>Flow Namespace FQDN: myNameSpace.domain.tld</li>
              <li>Flow Name: flowName.flowCategory</li>
              <li>Flow FQDN: flowName.flowCategory.myNameSpace.domain.tld</li>
            </ul>
            <t>The following are examples of this URI Syntax:</t>
            <t>flow://notifications.calendar.people.syndeno.com</t>
            <ul spacing="normal">
              <li>Flow Namespace FQDN: people.syndeno.com</li>
              <li>Flow Name: notifications.calendar</li>
              <li>Flow FQDN: notifications.calendar.people.syndeno.com</li>
            </ul>
            <t>flow://created.invoice.finance.syndeno.com:</t>
            <ul spacing="normal">
              <li>Flow Namespace FQDN: finance.syndeno.com</li>
              <li>Flow Name: created.invoice</li>
              <li>Flow FQDN: created.invoice.finance.syndeno.com</li>
            </ul>
          </section>
          <section anchor="flow-name-resolution">
            <name>4.1.2.2. Flow name resolution</name>
            <t>In Figure 4, we can see how a Flow FQDN can be resolved by means of the Flow Name Service.</t>
            <figure/>
            <name>Figure 4</name>
            <artset>
              <artwork alt="High-level overview of the interactions with the Flow Name Service component." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure3.svg"/>
            </artset>
            <t>&lt;/figure&gt;</t>
            <t>In order to illustrate the Flow Name resolution procedure by the FNAA (Flow Namespace Accessing Agent), we can consider the following flow URI:</t>
            <t>flow://notifications.calendar.people.syndeno.com</t>
            <t>First, the FNAA will perform a query to the DNS resolvers. These will perform a recursive DNS query to obtain the authoritative name servers for the Flow Namespace: people.syndeno.com. Thus, the authoritative name servers for syndeno.com will reply with one or more NS Resource Record containing the FQDN for the authoritative name servers of people.syndeno.com.</t>
            <t>Secondly, once these name servers are obtained, the FNUA will perform a PTR query on the Flow FQDN adding a service discovery prefix. The response of the PTR query will return another FQDN compliant with SRV DNS Resource Records (RFC-2782) and DNS Service Discovery (RFC-6763).</t>
            <t>In this case, the query for PTR records would be as follows:</t>
            <t>;; QUESTION SECTION:
;notifications.calendar.people.syndeno.com.             IN      PTR</t>
            <t>The response would be in the following form:</t>
            <t>;; ANSWER SECTION:
notifications.calendar.people.syndeno.com. 21600 IN     PTR _flow._tcp.notifications.calendar.people.syndeno.com.</t>
            <t>Using the FQDN returned by this query, an additional query asking for SRV records is made:</t>
            <t>;; QUESTION SECTION:
;_flow._tcp.notifications.calendar.people.syndeno.com.          IN      SRV</t>
            <t>;; ANSWER SECTION:
_flow._tcp.notifications.calendar.people.syndeno.com. 875 IN    SRV     30 30 65432 fnaa.syndeno.com.
_flow._tcp.notifications.calendar.people.syndeno.com. 875 IN TXT "tls"</t>
            <t>_queue._flow._tcp.notifications.calendar.people.syndeno.com. 875 IN     SRV     30 30 9092 kafka.syndeno.com.
_queue._flow._tcp.notifications.calendar.people.syndeno.com. 875 IN TXT "broker-type=kafka tls"</t>
            <t>First, the response informs the network location of the FNAA server, in this case a connection should be opened to TCP port 65432 of the IP resulting of resolving fnaa.syndeno.com:</t>
            <t>;; QUESTION SECTION:
;fnaa.syndeno.com.              IN      A</t>
            <t>;; ANSWER SECTION:
fnaa.syndeno.com.       21600   IN      A       208.68.163.200</t>
            <t>Secondly, this response offers other relevant information, like the TCP port where the queue service is located (9092). It also includes a TXT Resource Record that establishes the protocol of the Event Queue Broker, defined in the variable "broker-type=kafka".</t>
            <t>Now, using the returned FQDN for the queue, kafka.syndeno.com, the resolver can perform an additional query:</t>
            <t>;; QUESTION SECTION:
;kafka.syndeno.com.             IN      A</t>
            <t>;; ANSWER SECTION:
kafka.syndeno.com.      21600   IN      A       208.68.163.218</t>
          </section>
        </section>
        <section anchor="flow-namespace-accessing-agent-fnaa">
          <name>4.1.3. Flow Namespace Accessing Agent (FNAA)</name>
          <t>The Flow Namespace Accessing Agent is the core component of a Network Participant. This server application implements the Flow Namespace Accessing Protocol that allows client connections.</t>
          <t>In the diagram of Figure 5 we can see the different methods that the FNAA must support.</t>
          <figure/>
          <name>Figure 5</name>
          <artset>
            <artwork alt="High-level overview of the interactions among FNAA servers." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure4.svg"/>
          </artset>
          <t>&lt;/figure&gt;</t>
          <t>The clients connecting to a FNAA server can be remote FNAA servers as well as FNUA. The rationale is that users of a NP connect to the FNAA by means of a FNUA. On the other hand, when a user triggers a new subscription creation, the FNAA of his NP must connect as client to a remote FNAA server.</t>
        </section>
        <section anchor="flow-processor-fp">
          <name>4.1.4. Flow Processor (FP)</name>
          <t>Whenever a new subscription creation is triggered and all remote flow connection details are obtained, the FNAA needs to set up a Processor for it. The communications of the FNAA to and from the FP is by means of an IPC interface. This means that there can be different implementations of Processors, one of which will be the Subscription Processor.</t>
          <t>In the diagram of Figure 6, we can see the initial interface methods that should be implemented in a Flow Processor.</t>
          <figure/>
          <name>Figure 6</name>
          <artset>
            <artwork alt="High-level overview of the IPC interface for the FNAA server and Flow Processors communications." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure6.svg"/>
          </artset>
          <t>&lt;/figure&gt;</t>
          <t>Depending on the use of the processor, different data structures should be added to the different methods. In the case of a Subscription Processor, the minimum information will be the remote and local Flow connection details. Moreover, the interface also should include methods to update the Processor configuration and to destroy it, once a subscription is revoked. Finally, due to the nature of the stream communication, there could also be methods available to pause and to resume a Processor.</t>
          <t>There can be different types of Processors, which we can see in Figure 7.</t>
          <figure/>
          <name>Figure 7</name>
          <artset>
            <artwork alt="High-level overview of the IPC interface for the FNAA server and Flow Processors communications." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure7.svg"/>
          </artset>
          <t>&lt;/figure&gt;</t>
          <t>In Figure 7, we can see that there are different types of Flow Processors:
* Bridge Processor: Consumes events from a Flow located in an Event Broker (i.e., Apache Kafka) and transcribes them to a single Flow (local or remote).
* Collector Processor: Consumes events from N Flows located in an Event Broker and transcribes the aggregate to a single Flow (local or remote).
* Distributor Processor: Consumes events from a single Flow and transcribes or broadcast to N Flows (local or remote).
* Signal Processor: Consumes events from N Flows and produces new events to N Flows (local or remote)</t>
          <t>To implement the previously described Subscription Processor, we can utilize some form of the Bridge Processor. Although we are initially considering the basic use case of subscription, it must be possible for the network to extend the processor types supported. In any case, the different FNAA servers involved must be aware the supported processor types, with the goal of informing the users the capabilities available in the FNAA server. For instance, the fact that a FNAA supports the Bridge Processor should enable the subscription commands in the FNAA, for users to create subscriptions using the Bridge Processor.</t>
          <t>In summary, the IPC interface should support all the possible processors that the network may need although we are initially considering the subscription use case.</t>
        </section>
        <section anchor="flow-namespace-user-agent-fnua">
          <name>4.1.5. Flow Namespace User Agent (FNUA)</name>
          <t>The FNUA is an application analogous to email clients such as Microsoft Office or Gmail. These applications implement either different network protocols to access mailboxes by means of IMAP and/or POP3. In the case of FNUA, the protocol implemented is the FNAP (Flow Namespace Accessing Protocol).</t>
          <t>The FNUA is an application that acts as a client for the FNAA server. Only users that possess accounts in a Network Participant should be able to login to FNAA to manage Flow Namespaces. The FNUA could be any kind of user application: web application, desktop application, mobile application or even a cli tool.</t>
          <t>In the Diagram of Figure 8 we can see the actions that the user can request to the FNUA.</t>
          <figure/>
          <name>Figure 8</name>
          <artset>
            <artwork alt="High-level overview of the interactions between a user and the Flow Namespace User Agent component." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure8.svg"/>
          </artset>
          <t>&lt;/figure&gt;</t>
          <t>The main goal of the FNUA is to provide the user with access to Flow Namespaces and the flows hosted in them. A user may have many Flow Namespace and many Flows in each of them. By means of the FNUA, the user can manage the Flow Namespaces and the Flows in them. Also, the FNUA will provide the capabilities required to subscribe to external Flows, whether local to the FNAA, local to the NP or remote (in a different NP FNAA server).</t>
        </section>
      </section>
      <section anchor="communications-examples">
        <name>4.2. Communications Examples</name>
        <t>In this section, two usage examples of Network Participants communications are provided. The first one, we call unidirectional, since one NP subscribes to a remote Flow of a different NP. The second one, we call it bidirectional, since now these NP have mutual subscriptions.</t>
        <section anchor="unidirectional-subscription">
          <name>4.2.1. Unidirectional Subscription</name>
          <t>In the diagram of Figure 9, we can see an integration between two NP. In this case, there is a FlowA hosted in the Orange NP to which the FlowB in the Blue NP is subscribed. Both FlowA and FlowB count with a queue hosted in the Flow Events Broker, which could be an Apache Kafka instance for example. However, it must be possible to employ any Flow Events Broker of the NP's choice.</t>
          <figure/>
          <name>Figure 9</name>
          <artset>
            <artwork alt="Example of a unidirectional subscription among two Network Participants." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure9.svg"/>
          </artset>
          <t>&lt;/figure&gt;</t>
          <t>The steps followed to set up a subscription to a remote flow are:
1. A user of the Blue NP creates a new subscription to remote FlowA by means of the Flow Namespace User Agent (FNUA).
2. The FNUA connects to the Flow Namespace Accessing Agent (FNAA) of the Blue NP to inform the user request.
3. The FNAA in the Blue NP discovers the remote FNAA to which it must connect to obtain the flow connection parameters. First, it needs to authenticate and, if allowed, the connection parameters will be returned.
4. Once the FNAA in the Blue NP has all the necessary information, it will set up a new Processor that connects the flow in the Orange NP to a flow in the Blue NP.
5. Once the subscription is brought up, every time a Producer in the Orange NP writes an event to FlowA, the Flow Processor will receive it, since it is subscribed to it. Then, the Flow Processor will write that event to FlowB in the Blue NP.
6. From now on, every Consumer connected to FlowB will receive the events published on FlowA.</t>
          <t>In case the user owner of FlowA in the Orange NP wishes to revoke the access, it must be able to do so by means of security credentials revoking against the Identity &amp; Access Manager of the Orange NP.</t>
        </section>
        <section anchor="bidirectional-subscription">
          <name>4.2.2. Bidirectional Subscription</name>
          <t>In Figure 10 we can see an example of all the components needed to set up a flow integration between two different NP. In this case, there are two flows being connected:
* FlowA of the Orange NP with FlowB of the Blue NP
* FlowC of the Blue NP with FlowD of the Orange NP</t>
          <figure/>
          <name>Figure 10</name>
          <artset>
            <artwork alt="Example of a bidirectional subscription among two Network Participants." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure10.svg"/>
          </artset>
          <t>&lt;/figure&gt;</t>
          <t>Each Flow has its corresponding Queue hosted in the NP Flow Events Broker. Also, there is one Flow Processor for each connection, meaning that these components are in charge of reading new events on source flows to write them to the destination flows as soon as received.</t>
          <t>Also, we can see that in order to connect FlowB to FlowA, a connection from the Blue NP's FNAA has been initiated against the Orange NP's FNAA. This connection uses the FNAP to interchange the flow connection details. Analogously, the FNAA connection to set up the integration of FlowC with FlowD has been initiated by the Orange NP's FNAA.</t>
          <t>After the flow connection details are obtained, the different Flow Processors are set up to consume and produce events from and to the corresponding Queue in the different NPs.</t>
          <t>Once the two processors are initialized, all the events produced to FlowA in the Orange NP will be forwarded to FlowB in the Blue NP; and all the events produced to FlowC in the Blue NP will be forwarder to FlowD in the Orange NP.</t>
        </section>
      </section>
    </section>
    <section anchor="event-streaming-open-network-protocol">
      <name>5. Event Streaming Open Network Protocol</name>
      <t>The protocol to be used in an Event Streaming Open Network is a key component of the overall architecture and design. This chapter is dedicated to thoroughly describe this protocol.</t>
      <section anchor="protocol-definition-methodology">
        <name>5.1. Protocol definition methodology</name>
        <t>It is now necessary to specify the protocol needed for the Flow Namespace Accessing Agent or FNAA, which we have named the Flow Namespace Accessing Protocol or FNAP. In the diagram of Figure 11 we can see how an FNAA client connects with a FNAA server by means of the FNAP.</t>
        <figure/>
        <name>Figure 11</name>
        <artset>
          <artwork alt="FNAA client and server communicate using FNAP." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure10.svg"/>
        </artset>
        <t>&lt;/figure&gt;</t>
        <t>In order to define a finite state machine for the protocol and the different stimuli that cause a change of state, the model presented by M.Wild (Wild, 2013) in her paper "Guided Merging of Sequence Diagrams" will be employed. This model is beneficial since it provides an integrated method both for client and server maintaining the stimuli relationship that trigger a change of state in each component.</t>
        <figure/>
        <name>Figure 12</name>
        <artset>
          <artwork alt="Merged Sequence Diagram for SMTP proposed by Wild, 2013." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure12.svg"/>
        </artset>
        <t>&lt;/figure&gt;</t>
        <t>In Figure 12 we have the method proposed by Wild for SMTP, in which there are boxes representing states and arrows representing transitions. Each transition has a label composed of the originating stimulus that triggers the transition and a subsequent stimulus effect triggered by the transition itself. For instance, when a client connects to an SMTP Server, the client goes from "idle" state to "conPend" state. The label of this transition includes "uCon" as the stimulus triggering the transition, which triggers the effect "sCon". Then, on the diagram for the server we can see that the "sCon" triggers the transition from "waiting" state to "accepting" state in the server.</t>
        <t>This method will be used to define the states and transitions for the Flow Namespace Accessing Protocol both for client and server.</t>
      </section>
      <section anchor="flow-namespace-accessing-protocol-fnap">
        <name>5.2. Flow Namespace Accessing Protocol (FNAP)</name>
        <t>Using the model proposed by Wild described previously, we define the finite-state machine for the FNAA Server, which we can see in Figure 13.</t>
        <figure/>
        <name>Figure 13</name>
        <artset>
          <artwork alt="Finite-state machine for the Flow Namespace Accessing Protocol." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure13.svg"/>
        </artset>
        <t>&lt;/figure&gt;</t>
        <t>The model in right side of Figure 13 shows that the FNAA server starts in a "waiting" state, which basically means that the server has successfully set up the networking requirements to accept client connections. Then, when a client connects, a transition is made to "accepting" state, in which internally the authentication procedure is made. If the authentication is successful, a transition is made to "ready" state, meaning that the client can now execute commands on the FNAA server.</t>
        <t>For each command that the client executes, a transition is made to "cmdRecvd" state. Then, a response is returned to the client, transitioning again to "waiting" state. When the client executes the "Quit" command, a transition is made to the "waiting" state and the server must free all used networking resources for the now closed connection.</t>
        <t>On the left side of Figure 13, we also have the client state machine with its corresponding transitions. The client triggers a connection to the server and once established, an authentication is needed. Once the authentication is correctly done, the client can start requesting commands to the server. For each command executed by the client, a transition is made to "cmdPend" state, until a response is returned by the server.</t>
        <t>Eventually, a "Quit" command will be executed by the client and the connection will be closed.</t>
      </section>
      <section anchor="implementation">
        <name>6. Implementation</name>
        <t>In this section, we provide an approach for the overall implementation of the proposed Event Streaming Open Network. Considering the components defined previously for the architecture, we will define which existing tools can be leveraged and those that require development.</t>
        <section anchor="objectives">
          <name>6.1. Objectives</name>
          <t>The objective of this implementation is to provide specifications for an initial implementation of the overall architecture for the Event Streaming Open Network. Whenever it is possible, existing tools should be leveraged. For those components that need development, a thorough specification is to be provided.</t>
          <section anchor="implementation-overview">
            <name>6.2. Implementation overview</name>
            <t>In Figure 14, we have a diagram of the overall implementation proposal. The components that have the Kubernetes Deployment icon are the ones to be managed by the FNAA server instance. Then, we have a Kafka Cluster that provides a Topic instance for each flow. Finally, the DNS Infrastructure is leveraged.</t>
            <figure/>
            <name>Figure 14</name>
            <artset>
              <artwork alt="Implementation overview using Kubernetes, Apache Kafka, DNS Bind9 and the Flow CLI tool." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure14.svg"/>
            </artset>
            <t>&lt;/figure&gt;</t>
          </section>
        </section>
      </section>
      <section anchor="existing-components">
        <name>6.3. Existing components</name>
        <t>In this section, we describe the existing software components that can be leveraged for implementation.</t>
        <section anchor="flow-events-broker-feb-1">
          <name>6.3.1. Flow Events Broker (FEB)</name>
          <t>Since there are currently many implementations for this component, it is necessary to develop the needed integrations of other components of the architecture to the main market leaders. Thus, we will consider the following Flow Events Broker for the implementation: Apache Kafka, AWS SQS and Google Compute PubSub.</t>
          <t>In summary, this component does not need to be developed from scratch. However, the FNAA will need to be able to communicate with the different Flow Events Broker, meaning that it must implement their APIs as a client.</t>
        </section>
        <section anchor="flow-name-service-fn">
          <name>6.3.2. Flow Name Service (FN)</name>
          <t>This component can be completely implemented by leveraging on the ISC Bind9 software component, which is the de facto leader for DNS servers. A given NP will need to deploy a Bind9 Nameserver and enable both DNSSEC and DNS Dynamic Update.</t>
          <t>The impact of adopting Bind9 for the implementation means that the FNAA component needs to be able to use a remote DNS Server to manage the Flow URI registration, deregistration and execute recursive DNS resolution.</t>
        </section>
        <section anchor="components-to-be-developed">
          <name>6.4. Components to be developed</name>
          <t>In this section, we describe a set of tools that require development. These components, especially the FNAA, are the core components of every Network Participant. Moreover, these are the components that implement the network protocol FNAP.</t>
          <t>Since these are the core components of the network, they are the natural candidates for validation. In the next chapter, we will show the feasibility of the core network components in the form of a Proof of Concept.</t>
          <section anchor="flow-namespace-accessing-agent-fnaa-1">
            <name>6.4.1. Flow Namespace Accessing Agent (FNAA)</name>
            <t>The Flow Namespace Accessing Agent is a server component that triggers the creation of child processes that implement the different Flow Processors. This means that the instance running the FNAA will bring up new processes for each processor. One way of implementing this functionality can be a parent process that creates new child processes for each processor. However, this would imply the need of creating and managing different threads in a single FNAA instance.</t>
            <t>The problem with the approach of a parent process and child processes for the FNAA is on the infrastructure level. The more processor a FNAA needs to manage, the more compute resources the FNAA would need. In the current cloud infrastructure context, this is problem because it means that additional compute resources should be assigned to the FNAA, depending on the quantity of processors and the required resources for each of them. In summary, this approach would be vertically scalable but not horizontally scalable.</t>
            <t>Then, to avoid the scalability issue, the approach we propose is by implementing a Cloud Native application. By leveraging on Kubernetes, it is possible to trigger the creation of Deployments, which are composed of Pods. Each Pod can contain a given quantity of containers, which are processes running in a GNU/Linux Operating System. In this way, we can dedicate a Pod to run the FNAA server and different Pods to run the Processors. This approach provides a convenient process isolation and enables both horizontal and vertical scalability.</t>
            <t>Moreover, the way in which the FNAA would bring up and manage Processor instances would be though an integration with the underlaying Kubernetes instance, by means of the Kubernetes API. The result is a Cloud Native application that leverages the power and flexibility of Kubernetes to manage the Processor instances.</t>
            <t>On the other hand, the programming language for the FNAA must also be defined. For this, we consider that it must be possible to implement the FNAA and the Flow Processors in different programming languages. For the FNAP it is recommended to employ Golang, since Kubernetes CLI tool is implemented in this language and there are several libraries available for integration. As for the Flow Processors, it must be possible to use any programming language as long as the IPC interface is correctly implemented.</t>
            <t>Regarding the IPC interface for the communications between the FNAA and the Flow Processors, the recommendation is to employ gRPC together with Protobuf. The rationale for choosing this this technology is the fact that gRPC enables binary communications, which are the desired type of communication for systems integration. Then, both the FNAA and the Flow Processors must share this Protobuf interface definition and implement it accordingly through gRPC.</t>
            <t>Finally, the FNAA must implement the protocol we have named FNAP, which provides the main set of functionalities for the Event Streaming Open Network. The implementation of FNAP must be stateful, in the sense that it is connection-based. Additionally, the implementation must be text-based, with the goal that humans can interact with FNAA servers in the same way that it is possible for SMTP servers. The transport protocol must be TCP with no special definition for a port number, since the port should be able to be discovered by means of DNS SRV Resource Records.</t>
            <t>Regarding security for the FNAA servers, TLS must be supported. This means that any client can start a TLS handshake with the FNAA servers before issuing any command.</t>
            <t>In conclusion, the implementation of the FNAA over Kubernetes provides the needed flexibility and set of capabilities required for this component. It is recommended to implement the FNAA in Golang and enable the implementation of Flow Processors in any programming language as long as the Protobuf interface is correctly implemented. Finally, the FNAA must implement the protocol FNAP in a connection-based and text-based manner.</t>
          </section>
          <section anchor="flow-namespace-user-agent-fnua-1">
            <name>6.4.2. Flow Namespace User Agent (FNUA)</name>
            <t>The Flow Namespace User Agent (FNUA) can have different implementations as long as they comply with the protocol FNAP.</t>
            <t>We propose the initial availability of a CLI tool that acts as a Flow Namespace User Agent. This CLI tool must provide a client implementation of all the functionalities available in the FNAA server. Among the functionalities to be implemented as a must, we can mention:
* Discover the FNAA server for a given Flow URI.
* Connect to the FNAA server to manage Flow Namespaces and Flows, as exemplified in Figure 8.</t>
            <t>Additionally, the FNUA should be able to discover the Authoritative FNAA server for a given Flow Namespace. This discovery shall be performed by leveraging on the DNS-SD specification. Refer to Annex D to review the discovery process.</t>
            <t>Regarding the implementation of the CLI tool, it is recommended to employ Golang together with Cobra, a library specialized to create CLI tools. In Figure 15 we have a diagram that shows the different functionalities that the CLI tool should implement.</t>
            <figure/>
            <name>Figure 15</name>
            <artset>
              <artwork alt="Flow CLI parameters diagram." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure15.svg"/>
            </artset>
            <t>&lt;/figure&gt;</t>
          </section>
        </section>
      </section>
    </section>
    <section anchor="proof-of-concept">
      <name>7. Proof of Concept</name>
      <t>In this section, we will focus on providing a minimum implementation of the main Event Streaming Open Network component: the Flow Namespace Accessing Agent. This implementation should serve as a Proof of Concept of the overall Event Streaming Open Network proposal.</t>
      <t>As described in the previous section, the Flow Namespace Accessing Agent (FNAA) is the main and core required component for the Open Network. All Network Participants must deploy an FNAA server instance in order to be part of the network. The FNAA actually implements a server-like application for the Flow Namespace Accessing Protocol (FNAP). Then, the first objective of this Proof of Concept is to show an initial implementation of the FNAA server component.</t>
      <t>On the other hand, the FNAA is accessed by means of a Flow Namespace User Agent (FUA). This component acts as a client application that connects to a FNAA. Also, this component can take different forms: it could be a web-based application, a desktop application or even a command line tool. For the purposes of this Proof of Concept, we will implement a CLI tool that acts as a client application for the FNAA. Thus, the second objective of this PoC is to provide an initial implementation of the FNUA client component.</t>
      <t>In the following sections, we will first describe the minimum functionalities considered for validating the overall proposal for the Event Streaming Open Network. This minimum set of requirements for both the FNAA and the FNUA will compose the Proof of Concept.</t>
      <t>Afterwards, we will describe the technology chosen for the initial implementation of both the FNAA and the FNUA. Then, a description of how these tools work in isolation will be provided. Subsequently, we will review different use cases to prove how the network could be used by network participants and its users.</t>
      <t>Lastly, we will provide a conclusion for this Proof of Concept, where we mentioning if and how the minimum established requirements have been met or not.</t>
      <section anchor="minimum-functionalities">
        <name>7.1. Minimum functionalities</name>
        <t>Network Participants system administrators must be able to run a Server Application that acts as FNAA.</t>
        <t>Users using a Client Application actiong as a FNUA must be able to:
1. Access the flow account and operate its flows.
2. Create a new flow.
3. Describe an existing flow.
4. Subscribe to an external flow.</t>
      </section>
      <section anchor="fnaa-server-application">
        <name>7.2. FNAA - Server application</name>
        <t>The FNAA server application must implement FNAP as described in Section 6. Basically, the FNAA will open a TCP port on all the IP addresses of the host to listen for new FNUA client connections.</t>
        <t>The chosen language for the development of the FNAA is GoLang. The reason for choosing GoLang is because Kubernetes is written in this language and there is a robust set of libraries available for integration. Although there is no integration built with Kubernetes for this Proof of Concept, the usage of GoLang will enable a seamless evolution of the FNAA application. In future versions of the FNAA codebase, new functionalities leveraging Kubernetes will be easier to implement than if using a different programming language.</t>
        <t>When the FNAA server application is initialized, it provides debug log messages describing all client interactions. In order to start the server application, a Network Participant system administrator can download the binary and execute it in a terminal:</t>
        <t>ignatius ~ 0$./fnaad 
server.go:146: Listen on [::]:61000
server.go:148: Accept a connection request.</t>
        <t>Now that the 61000 TCP port is open, we can test the behaviour by means of a raw TCP using telnet command in a different terminal:</t>
        <t>ignatius ~ 1$telnet localhost 61000
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
220 fnaa.unix.ar FNAA</t>
        <t>We can now see that the server has provided the first message in the connection: a welcome message indicating its FQDN fnaa.unix.ar.</t>
        <t>On the other hand, the server application starts providing debug information for the new connection established:</t>
        <t>ignatius ~ 0$./fnaad 
server.go:146: Listen on [::]:61000
server.go:148: Accept a connection request.
server.go:154: Handle incoming messages.
server.go:148: Accept a connection request.</t>
      </section>
      <section anchor="fnua-client-application">
        <name>7.3. FNUA - Client application</name>
        <t>In order to test the FNAA server application, a CLI-based FNUA application has been developed. The chosen language for this CLI tool is also GoLang. The reason for choosing GoLang for the FNUA is because of its functionalities for building CLI tools, leveraging on the Cobra library.
Thus, the FNUA for the PoC is an executable file that complies with the diagram in Figure 14.</t>
        <t>One of the requirements for the flow CLI tool is a configuration file that defines the different FNAA servers together with the credentials to use. An example of this configuration file follows:</t>
      </section>
      <section anchor="agents">
        <name>agents:</name>
        <t>name: fnaa-unix
fqdn: fnaa.unix.ar
username: test
password: test
prefix: unix.ar-
-
name: fnaa-emiliano
fqdn: fnaa.emiliano.ar
username: test
password: test
prefix: emiliano.ar-</t>
      </section>
      <section anchor="namespaces">
        <name>namespaces:</name>
        <t>name: flows.unix.ar
agent: fnaa-unix
-
name: flows.emiliano.ar
agent: fnaa-emiliano</t>
        <t>In this file, we can see that there are two FNAA instances described with FQDN fnaa.unix.ar and fnaa.emiliano.ar. Then, there are two namespaces: one called flow.unix.ar hosted on fnaa-unix and second namespace flows.emiliano.ar hosted on fnaa-emiliano. This configuration enables the FNUA to interact with two different FNAA, each of which is hosting different Flow Namespaces.</t>
        <t>Once the configuration file has been saved, the flow CLI tool can now be used. In the following sections, we will show how to use the minimum functionalities required for the Open Network using this CLI tool.</t>
      </section>
      <section anchor="use-cases">
        <name>7.4. Use cases</name>
        <t>### 7.4.1. Use case 1: Authenticating a user
After the connection is established, the first command that the client must execute is the authentication command. As previously defined in Chapter 5, every FNAA client must first authenticate in order to execute commands. Thus, the authentication challenge must be supported both by the FNAA as well as the FNUA.</t>
        <t>It is worth mentioning that the chosen authentication mechanism for this PoC is SASL Plain. This command can be extended furtherly with other mechanisms in later versions. However, this simple authentication mechanism is sufficient to demonstrate the authentication step in the FNAP.</t>
        <t>The SASL Plain Authentication implies sending the username and the password encoded in Base64. The way to obtain the Base64 if we consider a user test with password test, is as follows:
ignatius ~ 0$echo -en "\0test\0test" | base64
AHRlc3QAdGVzdA==</t>
        <t>Now, we can use this Base64 string to authenticate with the FNAA. First, we need to launch the FNAA server instance:</t>
        <t>ignatius~/ $./fnaad --config ./fnaad_flow.unix.ar.yaml
main.go:41: Using config file: ./fnaad_flow.unix.ar.yaml
main.go:57:     Using config file: ./fnaad_flow.unix.ar.yaml
server.go:103: Listen on [::]:61000
server.go:105: Accept a connection request.</t>
        <t>Then, we can connect to the TCP port in which the FNAA is listening:</t>
        <t>ignatius ~ 1$telnet localhost 61000
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
220 fnaa.unix.ar FNAA
AUTHENTICATE PLAIN
220 OK
AHRlc3QAdGVzdA==
220 Authenticated</t>
        <t>Once the client is authenticated, it can start executing FNAP commands to manage the Flow Namespace of the authenticated user. For simplicity purposes, in this Proof of Concept, we will be using a single user.</t>
        <t>In the case of the CLI tool, there is no need to perform an authentication step, since every command the user executes will be preceded by an authentication in the server.</t>
        <section anchor="use-case-2-creating-a-flow">
          <name>7.4.2. Use case 2: Creating a flow</name>
          <t>Once the authentication is successful, the client can now create a new Flow.  The way to do this using the CLI tool would be:</t>
          <t>ignatius ~/ 0$./fnua create flow time.flow.unix.ar
Resolving SRV for fnaa.unix.ar. using server 172.17.0.2:53
Executing query fnaa.unix.ar. IN 33 using server 172.17.0.2:53
Executing successful: [fnaa.unix.ar.    604800  IN      SRV     0 0 61000 fnaa.unix.ar.]
Resolving A for fnaa.unix.ar. using server 172.17.0.2:53
Executing query fnaa.unix.ar. IN 1 using server 172.17.0.2:53
Executing successful: [fnaa.unix.ar.    604800  IN      A       127.0.0.1]
Resolved A to 127.0.0.1 for fnaa.unix.ar. using server 172.17.0.2:53
C: Connecting to 127.0.0.1:61000
C: Got a response: 220 fnaa.unix.ar FNAA
C: Sending command AUTHENTICATE PLAIN
C: Wrote (20 bytes written)
C: Got a response: 220 OK
C: Authentication string sent: AHRlc3QAdGVzdA==
C: Wrote (18 bytes written)
C: Got a response: 220 Authenticated
C: Sending command CREATE FLOW time.flow.unix.ar
C: Wrote (31 bytes written)
C: Server sent OK for command CREATE FLOW time.flow.unix.ar
C: Sending command QUIT
C: Wrote (6 bytes written)</t>
          <t>The client has discovered the FNAA server for Flow Namespace flow.unix.ar by means of SRV DNS records. Thus, it obtained both the FQDN of the FNAA together with the TCP port where it is listening, in this case 61000. Once the resolution process ends, the FNUA connects to the FNAA. First, the FNUA authenticates with the FNAA and then it executes the create flow command.</t>
          <t>If we were to simulate the same behavior using a raw TCP connection, the following steps would be executed:</t>
          <t>ignatius ~ 1$telnet localhost 61000
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
220 fnaa.unix.ar FNAA
AUTHENTICATE PLAIN
220 OK
AHRlc3QAdGVzdA==
220 Authenticated
CREATE FLOW time.flows.unix.ar
220 OK time.flows.unix.ar</t>
          <t>Now, the client has created a new flow called time.flows.unix.ar located in the flows.unix.ar namespace. The FNAA in background has created a Kafka Topic as well as the necessary DNS entries for name resolution.</t>
        </section>
        <section anchor="use-case-3-describing-a-flow">
          <name>7.4.3. Use case 3: Describing a flow</name>
          <t>Once a flow has been created, we can obtain information of if by executing the following command using the CLI tool:</t>
          <t>ignatius ~/ 1$./fnua describe flow time.flow.unix.ar
Resolving SRV for fnaa.unix.ar. using server 172.17.0.2:53
Executing query fnaa.unix.ar. IN 33 using server 172.17.0.2:53
Executing successful: [fnaa.unix.ar.    604800  IN      SRV     0 0 61000 fnaa.unix.ar.]
Nameserver to be used: 172.17.0.2
Resolving A for fnaa.unix.ar. using server 172.17.0.2:53
Executing query fnaa.unix.ar. IN 1 using server 172.17.0.2:53
Executing successful: [fnaa.unix.ar.    604800  IN      A       127.0.0.1]
Resolved A to 127.0.0.1 for fnaa.unix.ar. using server 172.17.0.2:53
C: Connecting to 127.0.0.1:61000
C: Got a response: 220 fnaa.unix.ar FNAA
C: Sending command AUTHENTICATE PLAIN
C: Wrote (20 bytes written)
C: Got a response: 220 OK
C: Authentication string sent: AHRlc3QAdGVzdA==
C: Wrote (18 bytes written)
C: Got a response: 220 Authenticated
C: Sending command DESCRIBE FLOW time.flow.unix.ar
C: Wrote (33 bytes written)
C: Server sent OK for command DESCRIBE FLOW time.flow.unix.ar
Flow time.flow.unix.ar description:
flow=time.flow.unix.ar
type=kafka
topic=time.flow.unix.ar
server=kf1.unix.ar:9092
Flow time.flow.unix.ar described successfully
Quitting
C: Sending command QUIT
C: Wrote (6 bytes written)</t>
          <t>In the output of the describe command we can see all the necessary information to connect to the Flow called time.flow.unix.ar: (i) the type of Event Broker is Kafka, (ii) the Kafka topic has the same name of the flow and (iii) the Kafka Bootstrap server with port is provided. If we were to obtain this information using a manual connection, the steps would be:</t>
          <t>ignatius ~ 1$telnet localhost 61000
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
220 fnaa.unix.ar FNAA
AUTHENTICATE PLAIN
220 OK
AHRlc3QAdGVzdA==
220 Authenticated
DESCRIBE FLOW time.flows.unix.ar
220 DATA 
flow=time.flows.unix.ar
type=kafka
topic=time.flows.unix.ar
server=kf1.unix.ar:9092
220 OK</t>
          <t>Now, we can use this information to connect to the Kafka topic and start producing or consuming events.</t>
        </section>
        <section anchor="use-case-4-subscribing-to-a-remote-flow">
          <name>7.4.4. Use case 4: Subscribing to a remote flow</name>
          <t>In this section, we will show how a subscription can be set up. When a user commands the FNAA to create a new subscription to a remote Flow, the local FNAA server first needs to discover the remote FNAA server. Once the server is discovered by means of DNS resolution, the local FNAA contacts the remote FNAA, authenticates the user and then executes a subscription command.</t>
          <t>Thus, the initial communication between the FNUA and the FNAA, in which the user indicates to subscribe to a remote flow, would be as follows:</t>
          <t>ignatius ~ 1$telnet localhost 61000
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
220 fnaa.unix.ar FNAA
AUTHENTICATE PLAIN
220 OK
AHRlc3QAdGVzdA==
220 Authenticated
SUBSCRIBE time.flows.unix.ar LOCAL emiliano.ar-time.flows.unix.ar
220 DATA
ksdj898.time.flows.unix.ar
220 OK</t>
          <t>Once the user is authenticated, a SUBSCRIBE command is executed. This command indicates first the remote flow to subscribe to. Then, it also specifies with LOCAL the flow where the remote events will be written. In this example, the remote flow to subscribe to is time.flows.unix.ar, and the local flow is emiliano.ar-time.flows.unix.ar. Basically, a new flow has been created, emiliano.ar-time.flows.unix.ar, where all the events of flow time.flows.unix.ar will be written.</t>
          <t>The server answers back with a new Flow URI, in this case ksdj898.time.flows.unix.ar. This Flow URI indicates a copy of the original flow time.flows.unix.ar created for this subscription. Thus, the remote FNAA has full control over this subscription, being able to revoke it by simply deleting this flow or applying Quality of Service rules.</t>
          <t>The remote FNAA has set up a Bridge Processor to transcribe messages in topic time.flows.unix.ar to the new topic ksdj898.time.flows.unix.ar. Another alternative to a Bridge Processor would be a Distributor Processor, which could be optimized for a Flow with high demand. Moreover, instead of creating a single Bridge Processor per subscription, a Distributor Processor could be used, in order to have a single consumer of the source flow and write the events to several subscription flows.</t>
          <t>The user could use the FNUA CLI tool to execute this command in the following manner:</t>
          <t>ignatius ~ 0$./fnua --config=./flow.yml subscribe time.flows.unix.ar --nameserver 172.17.0.2 -d --agent fnaa-emiliano
Initializing initConfig
    Using config file: ./flow.yml
Subscribe to flow
Agent selected: fnaa-emiliano
Resolving FNAA FQDN fnaa.emiliano.ar
Starting FQDN resolution with 172.17.0.2
Resolving SRV for fnaa.emiliano.ar. using server 172.17.0.2:53
Executing query fnaa.emiliano.ar. IN 33 using server 172.17.0.2:53
FNAA FQDN Resolved to fnaa.emiliano.ar. port 51000
Resolving A for fnaa.emiliano.ar. using server 172.17.0.2:53
Resolved A to 127.0.0.1 for fnaa.emiliano.ar. using server 172.17.0.2:53
C: Connecting to 127.0.0.1:51000
C: Got a response: 220 fnaa.unix.ar FNAA
Connected to FNAA
Authenticating with PLAIN mechanism
C: Sending command AUTHENTICATE PLAIN
C: Wrote (20 bytes written)
C: Got a response: 220 OK
C: Authentication string sent: AHRlc3QAdGVzdA==
C: Wrote (18 bytes written)
C: Got a response: 220 Authenticated
Authenticated
Executing command SUBSCRIBE time.flows.unix.ar LOCAL emiliano.ar-time.flows.unix.ar
C: Sending command SUBSCRIBE time.flows.unix.ar LOCAL emiliano.ar-time.flows.unix.ar
C: Wrote (67 bytes written)
C: Server sent OK for command SUBSCRIBE time.flows.unix.ar LOCAL emiliano.ar-time.flows.unix.ar
Flow emiliano.ar-time.flows.unix.ar subscription created successfully
Server responded: emiliano.ar-time.flows.unix.ar SUBSCRIBED TO ksdj898.time.flows.unix.ar
Quitting
C: Sending command QUIT
C: Wrote (6 bytes written)
Connection closed</t>
          <t>This interaction of the FNUA with the FNAA of the Flow Namespace emiliano.ar (fnaa-emiliano) has trigger an interaction with the FNAA of unix.ar Flow Namespace (fnaa-unix). This means that before fnaa-emiliano was able to respond to the FNUA, a new connection was opened to the remote FNAA and the SUBSCRIBE command was executed.</t>
          <t>The log of fnaa-emiliano when the SUBCRIBE command was issued looks as follows:</t>
          <t>server.go:111: Handle incoming messages.
server.go:105: Accept a connection request.
server.go:253: User authenticated
server.go:347: FULL COMMAND: SUBSCRIBE time.flows.unix.ar LOCAL emiliano.ar-time.flows.unix.ar
server.go:401: Flow is REMOTE
client.go:280: **#Resolving SRV for time.flows.unix.ar. using server 172.17.0.2:53
server.go:417: FNAA FQDN Resolved to fnaa.unix.ar. port 61000
client.go:42: C: Connecting to 127.0.0.1:61000
client.go:69: C: Got a response: 220 fnaa.unix.ar FNAA
server.go:435: Connected to FNAA
server.go:436: Authenticating with PLAIN mechanism
client.go:126: C: Sending command AUTHENTICATE PLAIN
client.go:133: C: Wrote (20 bytes written)
client.go:144: C: Got a response: 220 OK
client.go:154: C: Authentication string sent: AHRlc3QAdGVzdA==
client.go:159: C: Wrote (18 bytes written)
client.go:170: C: Got a response: 220 Authenticated
server.go:444: Authenticated
client.go:82: C: Sending command SUBSCRIBE time.flows.unix.ar
client.go:88: C: Wrote (30 bytes written)
client.go:112: C: Server sent OK for command SUBSCRIBE time.flows.unix.ar
server.go:456: Flow time.flows.unix.ar subscribed successfully
server.go:457: Server responded: ksdj898.time.flows.unix.ar
server.go:459: Quitting</t>
          <t>We can see how fnaa-emiliano had to trigger a client subroutine to contact the remote fnaa-unix. Once the server FQDN, IP and Port is discovered by means of DNS, a new connection is established and the SUBSCRIBE command is issued. Here we can see the log of fnaa-unix:</t>
          <t>server.go:111: Handle incoming messages.
server.go:105: Accept a connection request.
server.go:253: User authenticated
server.go:139: Received command: subscribe
server.go:348: [SUBSCRIBE time.flows.unix.ar]
server.go:367: Creating flow endpoint time.flows.unix.ar
server.go:368: Creating new topic ksdj898.time.flows.unix.ar in Apache Kafka instance kafka_local
server.go:369: Creating Flow Processor src=time.flows.unix.ar dst=ksdj898.time.flows.unix.ar
server.go:370: Adding DNS Records for ksdj898.time.flows.unix.ar
server.go:372: Flow enabled ksdj898.time.flows.unix.ar
server.go:139: Received command: quit</t>
          <t>Thus, we were able to set up a new subscription in fnaa-emiliano that trigger a background interaction with fnaa-unix.</t>
        </section>
        <section anchor="results-of-the-poc">
          <name>7.5. Results of the PoC</name>
          <t>We can confirm the feasibility of the overall Event Streaming Open Network architecture. The test of the proposed protocol FNAP and its implementation, both in the FNAA and FNUA (CLI application), show that the architecture can be employed for the purpose of distributed subscription management among Network Participants.</t>
          <t>The minimum functionalities defined both for the Network Participants and the Users were met. Network Participants can run this type of service by means of a server application, the FNAA server. Also, the CLI-tool resulted in a convenient low-level method to interact with a FNAA server.</t>
          <t>In further implementations, the server application should be optimized as well as secured, for instance with a TLS handshake. Also, the CLI-tool could be enhanced by a web-based application with a friendly user interface.</t>
          <t>Nevertheless, the challenge for a stable implementation of both components is the possibility of supporting different Event Brokers and their evolution. Not only Apache Kafka should be supported but also the main Public Cloud providers events solutions, such as AWS SQS or Google Cloud Pub/Sub. Since the Event Brokers are continuously evolving, the implementation of the FNAA component should keep up both with the API and new functionalities of these vendors.</t>
          <t>Regarding the protocol design, it would be needed to enhance the serialization of the exchanged data. In this sense, it could be convenient to define a packet header for the overall interaction between the FNAA both with remote FNAA as well as with FNUA.</t>
          <t>Regarding the subscription use case, it would be necessary to establish a convenient format for the server response. Currently, the server is returning a key/value structure with the details of the Flow. This structure may not be the most adequate, since it may differ depending on the Event Broker used.</t>
          <t>Also, the security aspect needs further analysis and design since its fragility could lead to great economical damage for organizations. Thus, it would be recommended to review the different security controls needed for this solution as part of an Information Security Management System.</t>
          <t>Finally, the implementation should leverage the Cloud Native functionalities provided by the Kubernetes API. For example, the FNAA should trigger the deployment of Flow Processors on demand, in order to provide isolated computing resources for each subscription. Also, a Kubernetes resource could be developed to use the kubectl CLI tool for management, instead of a custom CLI tool.</t>
        </section>
        <section anchor="summary-conclusions">
          <name>8. Summary &amp; Conclusions</name>
          <t>In this chapter we will provide a summary of everything that has been described in this document as well as some conclusions about it.</t>
          <t>We have identified a use case for which there is currently no adequate solution provided by existing tools. This use case is based on the cross-organization integration of real-time event streams. Nowadays, organizations intending to integrate these kind of data streams struggle with offline communication to achieve a common interface for integration. In this context, we proposed an Open Network for Event Streaming as a possible solution for this difficulty.</t>
          <t>For this Open Network, we have followed the main necessities from the technical perspective. While there already exist many components that can be leveraged, some components require analysis, design, and implementation. Then, we referred to the Commons Infrastructure literature in order to show how Event Streaming can be considered an Infrastructure Resource that can enable downstream productive activities. Finally, we established the main guidelines that an Open Network should follow, basing these definitions on Free, Open &amp; Neutral Networks.</t>
          <t>Using the previous definitions, we have designed an architecture for the Event Streaming Open Network, establishing the components that the different Network Participants should implement in order to participate in the network. After providing a thorough description of all the components, we showed some use cases of integration among different Network Participants.</t>
          <t>Once the architecture was defined, we proposed an implementation approach which describes the existing components that can be leveraged as well as those that need to be developed from scratch. The outcome was that a server-side application called FNAA had to be developed. This application implements the protocol FNAP and can be accessed by a client application, which we named FNUA.</t>
          <t>Finally, we proved the feasibility of the proposed architecture by providing an implementation of the minimum functionalities required, in the form of a Proof of Concept. The results of this PoC were encouraging since it was possible to implement the initial functionalities for the FNAA and FNUA components.</t>
          <t>As conclusion, we can mention that there is great potential for an Open Network for Event Streaming among organizations. In the same way the email infrastructure acts as an open network for electronic communications among people, this kind of network would enable developers to integrate real-time event streams while minimizing offline agreement of interfaces and technologies.</t>
          <t>However, there are many difficulties that could be furtherly worked on. First, a robust implementation for the Event Streaming Open Network main components must be provided, mainly for the FNAA and FNUA. In order to achieve an acceptable level of quality and stability, the development of a community around the project is needed.</t>
          <t>Secondly, we found that the proposed architecture is a convenient starting point. However, it can suffer modifications based on the learning process during the implementation. For example, while designing the architecture, we avoided the need of a database for the FNAA component, leveraging on the DNS infrastructure. While this can be sufficient for the minimum functionalities described, it will most probably be necessary for the FNAA to persist data in a database of its own. In this sense, we believe that leveraging the Kubernetes resources model could be a convenient alternative.</t>
          <t>Thirdly, during the PoC execution, we identified some difficulties implementing the security functionalities of authentication and authorization. Although we were able to implement an authentication mechanism, the reality indicates that integration with well-established protocols is needed (i.e., OAuth, GSSAPI, etc.).</t>
          <t>Finally, there is also the need to leverage on the Cloud Native architecture, basically Kubernetes, to provide hyper-scalability and enable Network Participants to agnostically choose the underlaying infrastructure. The selection of Golang for the PoC implementation showed to be convenient, given the vast number of available libraries for integration of third-party components and services.</t>
          <t>Notwithstanding the difficulties, we firmly believe that cross-organization real-time event integration can provide great benefits for society. It would enhance the efficiency of business processes throughout organizations. Also, it would provide broad visibility to the final users, enabling experimentation and entrepreneurship. New business models for existing productive activities could be developed, as well as enabling innovation, which in turn would conform the positive externalities of the Event Streaming Open Network.</t>
        </section>
      </section>
    </section>
    <section anchor="security-considerations">
      <name>Security Considerations</name>
      <t>TODO Security</t>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <t>This document has no IANA actions.</t>
    </section>
  </middle>
  <back>
    <references>
      <name>Normative References</name>
      <reference anchor="RFC2119">
        <front>
          <title>Key words for use in RFCs to Indicate Requirement Levels</title>
          <author fullname="S. Bradner" initials="S." surname="Bradner">
            <organization/>
          </author>
          <date month="March" year="1997"/>
          <abstract>
            <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
          </abstract>
        </front>
        <seriesInfo name="BCP" value="14"/>
        <seriesInfo name="RFC" value="2119"/>
        <seriesInfo name="DOI" value="10.17487/RFC2119"/>
      </reference>
      <reference anchor="RFC8174">
        <front>
          <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
          <author fullname="B. Leiba" initials="B." surname="Leiba">
            <organization/>
          </author>
          <date month="May" year="2017"/>
          <abstract>
            <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
          </abstract>
        </front>
        <seriesInfo name="BCP" value="14"/>
        <seriesInfo name="RFC" value="8174"/>
        <seriesInfo name="DOI" value="10.17487/RFC8174"/>
      </reference>
    </references>
    <section numbered="false" anchor="acknowledgments">
      <name>Acknowledgments</name>
      <t>URQUHART J. (2021) Flow Architectures 
FRISCHMANN B. (2007) [Online] Infrastructure Commons in Economic Perspective &lt; https://firstmonday.org/article/view/1901/1783&gt;
WIDL M. (2013), Guided Merging of Sequence Diagrams
NAVARRO L. (2018) [Online] Network Infrastructures: The commons model for local participation, governance and sustainability <eref target="https://www.apc.org/en/pubs/network-infrastructures-commons-model-local-participation-governance-and-sustainability">https://www.apc.org/en/pubs/network-infrastructures-commons-model-local-participation-governance-and-sustainability</eref>
BRINO A. (2019) Towards an Event Streaming Service for ATLAS data processing.
GUTTRIDGE, Gartner (2021) "Modern Data Strategies for the Real-time Enterprise" Big Data Quarterly 2021</t>
    </section>
  </back>
  <!-- ##markdown-source:
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
/+Tl6PnL0f7zw9HBkydeBGjvFuXDlEnH/NYayEe4n5QFgntgOxNQPbl62iX2
W1tBJJtHVJ8t1fdW+YqHngo8xjBSU6ywRDQ2qrdauUMJNJiFRt2S0UHZR1Vk
yksmd6jyNU4VSVla2LBL96Ef5PyzmKMmH7usbSstdO/TV9DCtpfvQwv7LwfB
xlBF/3B0VyoZZ4OyZLrj0f5GJuRP7KniM4QNzi9z+bdJVuLdWXOhGKUNGFAG
f9ypmXNpNM/iRgU+HqiZqOZ4Jc5C5r6kG42yu3Nwnv1VTRcGRXIsrv2bGypP
72eoyD/IVU8nEmJYiprilhGsRUpb9Qv0IUPUTEWbzPmyCVyCtDkQHAYqubLI
oB2dt0BzGeu9VEkSE7wB7dFwbxhluCmvr2kSXOPj013JoiY2aV+AgZGkte5H
J5EbVdK6u4scdS/m01FfmjDD/RR0YbbPiJt30Mwl3TYnDdtSgu+KArolGXiG
Ziy5GWlW41WarNtGwtjja9MvLyTKGE6jAil74pN1+1E7hUp2AjjZ9NqhIgtJ
6q6P5SbAtvyGGQZ9nOL5MGUVHu6Fph2zjKBhJGGLPDlZ/Ow29vH8L2Uf0b4G
a9ddPTybeEJtcpp/cx7z/B48JuvwmlNCTRYwN1zlOlibS13b0FEP1dxZWkzr
TgykeQiNdkRCJ8sg30JQ0rgHCGWxXkRhFk+McjHxHDh/f0vyXNoIOBwr6Vky
e60wNFqs4dpO1UcULm/UqUGz5LBLUVNv4FaLwyBPkIhRf/wMyhXCrZRSbunQ
/kO7e0q+4QrriJg0mWkSam3HYbKuvhQzh/AAZWaogmN0112bSMr0cQdLsvE8
wfL49SoHHIEXO1yQL/63vIgvvuYiOtfwi94GUJLD1nNAybKp10xTTq8dwR4p
BJU1ihNQYnpXjQ8Pv6KlA90GauwnImAgqkkgPXPB0lmQxGjUh0k9zSOMEZ3U
87nADN4xt3MBidgxuZ55ZPn1dVNcS1OJe0zoVFP07jGleLj069rMY5Izmrou
oPezl+U1Wjv33QQJUDNWJPUZMzy7rZ8Bq6NOSrRCSpCrKNnGfYUGJarcbV6Y
0hiGexEW9JoYBPfkLgVV2dcq4LvUjzg0z4ERPaeMQsZWyaG3Xn0XlHqHVeWx
jJJ74VCMzypKsAneynCHIl0ZozsUbbFi8VvpghFGS78zDAERQuuypERdqbZS
KeIeohEeUcLL+pISqcpCoBH4UZ5R23sUKs4EiIFX4HVdYIx5FQDjcMRh3BtH
0rDicrlg/XcOnxgYEPAibyTfLObZMiPDC5DsCTvdZWDbZjPqSVP/X0x3ze9N
YNFyrZFMyP5/1jHdO3WybLSjO1+QaKOGiK53iYdPDtAZrmiWclWimlkMJETg
A+GeSsuAHuASX7kkxbWhbZ23CKgTjDSHxs41HZULV5WkfERqdqtUcd+yzB1b
FZdwqy3XI8LRnpxbNh5lsGuTlIkAXZP+34dp5JRP0X8QjpDSXNWKkkqReDkC
bkRTD7lgwCw+IUK4dELyyzkiNHH3C3SltZ+w7CT65aIeE4q72whBIOY9oDKs
4Fs57VhML1ODSb0YSTucnLOOitaZ62Cb3+1beflX9a2ERglr7cDW431yd+z/
v2Dxy6/2wVDaorL3lSN1B2BvJ8KAPFb7ntCb7QxndEd5MpjKqA1JN5xPSRUL
ySZK2dNG5D5CnmAOKE8NxniV5grYZTeKkbvQPaE2OrnWTcxyLF2A0y09Em4+
DS7C4rH2wjQ6eYuI2bHq4txNw/hX5xeuLPshcQGPR+a5yCMFoMPux7FbRXof
tt3CJGw9yaUqPpOmh9GkNkWMIsLFwJRmDaQ91IJvTMblBk/kdRuiFjnhyn6Y
u21QGzu48FykiCSsVPB+KCgRfwM0pnHfV6QlWkvfYppaE6J6JNlNMlJx1Mdo
vpGCuN3F801kteRVBEyg7AE3GlfRiSBrsSou+zhJH3vfRWFTCn2lz7zqB2J7
hVVlPKYaiK+iNkcSiYk/2C2hjpGzSEYkeZQKNzALyemuqrVPnyXNgZtA6yWP
Sy3l/p5fUG385IZSj+5m7N/cD2HIQckkBBorT9I+FQ+u5z78zbn3N/dCHaJb
gi3VJewfQUAkbhl/68i/C3eaWmULM1ZzRyiMFeNepzZ5Wuz2Hm/P2tqicVqf
bNFHyIdloOX3CjWlsw2tskwAiLpA3a6vVAVLrpFmoSieX/C52xVUknbBApc0
lDrKQ84z+r64w7TDufdY2hkFEsoZx6TUn947lquh4mAktW+3pox9K8NE+p34
PaE2y8gFDzrYVh4zpA2L7WNWefQnmQJ2gg9zTD2EYwLowA8PpWiSIObygG7f
+RABDLYB51i0DhH6SSBE8oUIg5I8lSwmyh78x9DxZds4Am1IQWj/6ZQtjwbP
4djRoYHiCPeYl2a46NZbJIwQTRTH0jZHhokJG0brZDVaG/nKpb2t+OryTezu
mYTLa3HJiorNCHyOW6s5Ma2xjMRfaEVrRIZAdQVY6UKDUULXNRZVsqK+DZrR
WItNy4lh4ASvtkthEwIOTfdJIn89WFgXXS0kfBuZC632S+1YC+mT3+Qrua1F
s2VscTvXI0moPe6smQUxn3nMvOSVk5Sn2QunncHulo77T75ePI7/bqTj/pN7
icfXaDDQhUZ2yCWSPtf+hx6lCNXsjo7SAUxFpTbhFFalFlh4F+Sy7WDzYXvJ
m7zhRiUIm6o174q3Xmmvdia4gLQq3mhSUwusvpcC4bnU0LY1Q+YrEi/CsdAq
Uq+7R3hVMceEGlhslBdlUVohVVLcSArhPo8Zk4Q7ukwjFmEEbG8YjERcgWF+
GRLsIAOl9rhP5lrk61i9VVoKSlOKG8oIF1DDXlmAcNATf+l61iLp0T3LgL0l
MOQdE+yJnjsPbRLToapumWvo8eH847HHvrJAZB+Fd/plnF+gKWTCGe/1Mv62
uBylDY7wVRVNPAMTYr1yhxUWuBTY4sMLvFhk/sJSD3Z84CTVbtLhG33ytDMV
grd/dge8vSUJkUbtG7Bq+erdkP1s2H0qXMN65ds9UPiFVcxeK8KQwFwxDpbi
+9Gp1qQsuWhGFmH7sSvgGZq0thBX5+y6Rxj2wW3cFVmBTyJXqWK49APbpXo5
QpmQR8Nip2SFc4nszvdtzjzEhblxu8b3/n6nmqSSWx5ldFmvQB867Zgp+K17
SNL9e0lSPwsFKeEKafGjFBJWoM/++xKYkZ5losBAGoiS0NDERSxAxOGvlSwC
wKR41Fy/XVDp1+gDJkuCA/VZ6MpF40n2Qz0t0NHm4PnfjX5E6OKH+H+H2cGT
/UNC8+c+yEv4v3/6479+tyYsk3dFcy15t5fUFXVinmZMEzZukbTa5Y+iLVJU
BbZ1QKVHrYSAZhQ8PNaJxboc9hy49j8NoO28Cb75qagDnH3V3RPzdQbn8Y5m
D/dDWsY9wiBosj+cVY+gFQbyBHsf9vxvT6g74ZZ7DYIDYzZESnxC6XJsocMI
6kL0eY4tGWYulSavrAFw3jSoUkV/pog4t5wC2YKHFX7Dxnc2z8fFnM+w5WbX
JAvg1ElVo28gbazbiB5Y+XGjSS8lUMe55W94rYCbNlm5ND7RT9zLoPQW81kH
zeBGAzQR06QkPCaHS0mOJ5WCH7uuC1E34OqV03mBd4sJlovyYZyLoprar9nv
wtugFZt+aprzDa+uwUTG96T8P2wML00vU3hb5Uy0abIf2IWVx1PDvo4FivIu
ubI9WShujK3noltxm1P/vXQ30Mpexn9QvCGJAwrugVCscimFgxL2y9thtOjo
7m7JHDpgbeVXIzGVSIE42JHonaCPuoIeZd7JhQuZFx6h5bbwC2PJstcvWUii
Kh3uyMgCLrWDPd6Jb8jSe+dE7tqTvz2XvAfAoYi3KgPyvQGmIejMti8YTL5N
M9flRkh7GIpA9VC4Hgelt3A78aSFKQ+DfLBd03bNCM7MWV+yQtxGBwFnQf/l
qi9JX65zP/tCI9WzF2mJte02OkFAFiYlKrJ/LHhp4+pYGZL6ofc8WPrV7pwN
2vkbN5NOLwxdGhA7KuvFl2KC7c8soUULLH1agbT/EMVhkWvvbzeejLN7qyaL
6Ydi8jnh44JnpEVWbSiMUcOTPjF045qDUAZOyWiU/ag9TZP5KQv+YV2u8HFZ
z/Zpy/MdVqxKqSpn6O6cNQW112FOG9GhwjBZDhYa8nNia4EMyXKmP8+LWc/F
IiZHSaumlMjyYvZCJkrXKRVpFlfhZVdmELs03PoIZg/Vu1ArNR1qQ4GYUtm6
cx767iM0rwkCJU8pBpsQJvfolDALe0GFOqNJCZCVJ0s5ZtNXlHR2E2WkWwyz
Ncx1vo0mZWCtnBiQ4b7mVOS8h7KCjdA7NQc3bjtviOVEH9J7+jnwhqjcoBcd
1KB+KYWoqQnbKgFd7UebNSm7u2/eSZIm5nyOWhHnciStdNy5J3xTPxLXzCkN
55PhlSWb2noJyj7VrWhSwtl9u3QFdnuO7or31LwRW8mQyKr1R1MXk12Ic1Gi
xgit9UHVioveDex1xdyrgVBmVTVl1NRrmG5KSNIKPRYzxkisY/8v7RFl/LkN
omsgLp+k90OpPVZCQxdfE4SbepASYG9HQkblECgz52bZQYDajNAqeaJFGKf7
p/WYUFOBiZ5SX1uG35ugHSNJpvCersMh/KcqiBorJvNtvpyJcIKwFoWEKYO1
nl1R1+E4T0Gx41w9An4OMQDOItRTKlF1jTG3apX3AxvZchLiCApbNUw62eDE
XpXV9Js4wezk7Rnn0/3N1c2d9XzC+A7BDtaL4MhDrfUOE4yahdoV6uvYKf6j
hNVQYVm0wcyDeS67OgRcliLzxPqfKFIw55ul9WIGVWxTCmhSzocqV1iUW0Ei
tQgDY3PhN/3K5MpFzEiEJyMx5s2nYiU4+a1rq06ceQvuSs+6lcHFSzva0kAJ
iU47KMFcUfGUHkpp9nOEEo0t7gjyUSF7xwH7Xir74MTz1eQmwcEPAC/uTY1I
ewdqp7H6qjeHKdKmy74mLmWTHV+cRam6SXkl0tA26PRHIWky2gAhUUIkgWs9
36T9peYBjVsU+LPLE7npXcIfBiRPjvEJcrV0TcAzdSDHmMdjzQSjzeT+4rBQ
/hAZskFdlNx58hDAcJevTwwf5XQDPA6Y6UcqDZP0Z8XEnwnUNqyFx+2nsdQy
lJCcbpllxrgTZz+xJOMoTgu7pNOETsT/kiZalqXsf86ctplAAHkI9+Tkn1JK
pXGfmJB387IAu1dbA+E+JUhy4wMriPrH60YNTWbG5fKtNAAFxtNbMx+VALaF
GyXmqXHVTJqALwGSwC6jkTrzcUNIM0J9mAr+ctdjm3nq53yOPxHj9s3tJA4W
+FyrvVJnRQ4qF6bfbhx4Xpi5m5Ch4XAhD+UVIQeeoW6MroCghz41YXEnwMHV
3XGw0vXDCXTedfBaHTZMCbj/3Epuit7D2Rop7i2DDvpPs64CTpTx2TFZBuul
guvLd01ZWoZip/cVA0RjxY/OiAfEpigO9nyj/C/HzLWCO0JwejjJb8knxC+m
6+37rpMQpUIs4QQ2JmBp52gX0c+gTTIIizkUD96gq0U8WVrV5jtJCVeDDwP3
WQQJY3YZEU+yIMKb7VmDbXJpHpoYVZ8kgKjQBO4VyqzypJSeWZ2Gx+S2MRtT
L0U4U0ZbLqQKjMhLGtxz76FkFogfBjdN9pYjybT8ccFhOhSarkttgC3pTsKV
pLQYzHZo0cTBpmnB9U/rnNPEEI7MJR2IpmtJ9bE3Js7972ghdlwGhwW0I70L
QOvIuQYNQflRQUGAtD8ghpr/K1NCNQwtKMiDQH9lllO27VpOJHzPbHLBK4gu
SS4tKM8Zjc2VyVD9QqwPeHsgNjFpRyVamPKOYGVFfSB92OmCytEpSAX/jICj
tQGxPxT5W9FEAwZKV5ZCr393/vHx27Jaf0FjueG7eEndnUL2HLAPSzrSzAbk
yDUXba87vkzOjbBLfCEl6vpkh/nZaTg70LUO1GtbgsR3agEpPi1rPoEipGUU
E48/fqCPuLS+A5vv7qIxWNe8J6SKKfNx0HFS8JfUExg7WoMt18zzTWw3uohe
mtzgHgJN19D11nORUNvokm+8WlkCtASsuBHMdDDUggB2H4mVs56lBq+px1ER
n1anW0rMTkmBVxgAcWCpS6VsBZzdbCGn9Cd1CLFIpaEjA9vlXyGouhFg3wxb
nYAkqmnvIbRXgOExG5TCh+9qfEtzkN2uqUWfeVeX5iJS3yjZjtCChhPDyEfj
GtGEOlsyiwMJgVmQBAo9zsGWfWJIhf4+NmgzzTEZVEK1cflr5DX2KMy+AXz3
NZ1gUnVkibl3nJaibsnee2eZnMD1B/jeqr7mOiy6VtZ0McEKojDpTV23puXw
/ykmNxUlUalBFmqVaXTjJ2WFHoF4KZ6TsjHXcuXYhjvPxG0sGR4UmWgbnyUL
KOshtZOCGYTqhr8IU9b1um13SWI4SrgeJfckoeMijYu9kbhOijN5L1q4oWkR
vqKsR6lgeFl0N4xdm8NjS8+7+zlor7rWJxUBH4cW6xQ7oOicxeIrdVbzDQ4e
fu52CBeo0zc+NXFlcNSp+KW0XJ59pOsFMuiJ8HisKZV007g6n+eFPgeUMG5q
EUSAb8/DS18ZKLptvc4Mofm4CX1tzYGSTig5Y/dxc3tlVcz9m77C43HAcE2A
m8lk//DrDgRrxAOsrKCnQhpuCyKw25kFiIPU1CG8gzQildPbKF+A+j85r1G0
z4Lvjjod2w8bjQWNBKYEKGEyX7eG3rWl/x9heqHS4vh6RNiaR+lkp3atwpvf
W1Ha9TkSVmJXwvSINKAgFjjev9O/gB6pd1++38NOtjL/7OsYBsvTKgp0SutR
YnZ2zVDlqLQxLJvy3RSWLYAHdzxE9ERsazuQWLwjnPerCM6dBVH/t2AssG3I
kSoR3qZW5UEvSFAFts5aroa9F3XRtkyJLgFo4nXKcHfjdliXj857zBi8KkPz
xumYCSCtm44YlYY4SMcAYI7Etol6+hhXpwvZ16buwb5ab6nEzrHnFOoE3FQv
JBG9xAz+DqOnAsUu75v6acdt53YuwuYkxxVAsIFTcTRZ0EK3+YuBt+5dnsZh
wREwWOltcwy78yU7lXovDDWx7yhgbdNV72hj/axNqWl4D+U2Ua5OatBMMZLJ
Kqq1pKO+LQF2Rb/AaGkaXHvWE5xUtLzbNnGHdShQXWB2FxTzTNe4K653PyRO
i8a5Ek2Z6N8+NvfsfgmzP8tejDpO0Hv0LmUmws4MA6nrJRdS4HZWSJgwOwoa
612tc5NvKb4O3jDmLema0jj2zhlZVHuAfeU67cc1ScJBKNztAZYK5dKptdyg
qnHerW633ViXPYaZ9wIzEGfXkE7VGzKPCrrG1IhplXjoXUk0SJc1t40KiLrq
wd4jcGfvHrh/zinnifrSWoGM6CR5dE6QTbdW6jt2J3REALEuX36Ls0Hds1wD
m2iuOwQsLAcr19Omxx3An44rJUqulpI3LSbsRA9XqK863oZA5kfIfQMgAwLz
qDLkkXjyPoAeD8YjiU5zyr3FLALzX0gzvnbrgQS2EDS27UpKz054Jd+3yFCE
jy5J1CdJss89COGjKwMKhHCW9kWQu+wC6UyYUUKCsrpUvKifSXR0jWGJHI07
ZufzexuuaNbIF8UuiJJicZgtVr/B1IjHV5XzNNhF5YlYLNf61C63YufgmGCi
Uji17fu+fU4hZ5Q/stRXbgyohUOkXDpXOeesJtYFvJlLq32QFHIpmicNJ1wX
xT8zuin0ay5CGLqo0t23oKfnseQMobbO3Ev9bd5GX3aKtdmIwWTruT3kuQtd
S8l7PqPP6AT19F3iZkwCpA9ROeqioGq7quYYJsj1/VH2bgu9DnqFCDuXsnyK
n6VguXmMnJqL/vZco+/H27DOpPz1I+GZcWYTupfpHvqXGELrWgwZJNvkewxG
IohSNwpSwphonNlKEQbudUtVzgQkcsKqJMNXUJYXIn6cWkS+CslF/NenIwUZ
YLQmekIAm/gJ3lU0JZGs93QLHEcbXCWix3O7xLYlczZPtItLySJ9PspeaRZ9
mg1Djbbz0FcBN1HsNd/6WxkgtXXF/BBsOcv0iFsS80UPeI9rkKve8bu7ZIVI
0gJ9f1e/hac73dzNZ8p/58I6Dif6iEVL5esrKqve6uSmEEVTj8mFyfzwfr5u
BU60Yao6hnpYl3PxurlJ7bi6FHzh7u4zXRkdjvhVUFPKF3Ok2eKz9tPyGxbF
/EAWzdYUgkUflKaF2bOTelqMCWqCaDm5ys4adHO3xGWgIun45bwqKDVndit3
RzRGDBzf0aqirgttXBnuKyVh7utrBCS03uBK8vT1+dzcEA5Rj/bElFV24LFm
kH4bZUkvJmIPL+NQY31bzeucZZJ45X0+ULliJxNMZoH+qaPBANFqVyXo+/8t
e/IfRo+xq8o0G4jb47o+2n/6/Ch7y/cLduM3R0e/PXq+/+TJk+iZl0fExpar
OFXfAImwxUiwU+n9cMkxdWApCa+kEhaCnTAuQASAMdIkKmuT39LbAlpazIEu
TNtLMOT6l7r/H+QtAqMjNsKLumoo4Lh/8GL0BP7f/mg0Gpx4CBt7YTR43U7y
ZUFYFnC0XMb+j//1t/8IPPrgCXfBWVfll1HOdeLkDNPylqjyztUOqQbgrAch
LWscatt7RKrxfILwveEhCjaTuAWZwR1c3Ey2mwk9pC81UcEeZnr3gO0BujfC
f3Ay/W9GY+7ZZ0+Psu9hZeTMg/3BuesNHX0d4ZJcxHYwKFP2VMp7uehvs5Hu
Fm4yZCNCrBka02+44W9Y7p3knveKrDKOplK0+J6SKlgnDHepYgtTnlZtbzBK
mz0HD9awx1tHXjB1gY1cN236kn5WbB1SQ5AzsWgr54UakOiuLFqf/co+MVcC
+ZRI2UD1O8aD6VPRHiX4/uGbHGNPXW1R/CT299FddABRHERGSBaPzyQWb+eb
oWlejrY2/GNvUHFTWbgde3hbB7OfptVRdHsHqJ7zY0hpg2XetiAdpvoj9RU8
yuTpvXjMYlFi18Daj6u/u//Y7o29wcBam/sFkJ6qM6bl+VXFj/kJ+Edtsuav
w23bBZ+PiC5RnptXPznomDJDTvBI9sG5b9zIbqGEhITaK0W4QHnW0QRVCY9Y
VythLzL5bYju0tNX7U8GFeToR6PudqsUMMiiqzGqFyelaTaZJVjjJ+PMwRRA
2cHl9FCw8aoWzDSRIfF9U1kntqcl6u3yS5AHjCzE0Gd9m2MiCR3G/kRDNHdc
ElbE/BzsoY9mOVMK9AvOidXfZvtHFOUopDqQdEm8IA7zyIkL+EZUfhiE97ay
VDKYTC2TBgdxOaLFZo/bGN7f+rudCHzOM0Xd84gsXPhJk4gwGL2nNC2yTXu5
+tlguKZAzI5OkJp9Ir6gyfWmCt6RgUDxwOnA484vEPaGxVzy5UWBYCFlu3BG
C8uPy+PLt9nFHNtnm5eSdlvScrmJABLIusHrbL1miYvbuBQEnue4k2qjpMm4
LVkY22dGddAIBq/trKbFAoYJTYiTNxHB1MUZL8Q0DQuKqK/m3m9I861klrKR
xgzbvFDKsoFFoF1FNAKmdvH8KSsElFwRgXnyX9Fg8gll2uULlRnaMBsYfzUk
Qer6vkbqHWxJne3BKT74v5/g0/x/H2T/D5bOw7cGx99/mE8OfziefvfrP0yP
v/1W2g9qT4pWcndkZtjCQxqjeSKOEhwMd/S2sAqQeQ7MopMDYbLBKaX/7XFm
OuneHjO6TH7xO8/fRxuwegfUrB1Ux6fAIRgQQl5Bpnh0jxefvTii8NRXvexU
1ieHd+vKT57dpdZe3TiDK+kKFwyzTqon+i7o2zD3fwcW1fHHq+9fn1+dnRxf
vc4u3h6fndOD7/+pS2X4e3eniqmXbmKktxGRsa0fkmyYWSqeVVT6vRV13crd
/Lh0uzgWQXwFuMZqYyGJ0J11e0xiXJiDQzL8aUjz/Gs3iDik7T1Eek98q84u
i9KkKJYuQZYJFKthFwT/dTGhzJ/xpq8EP8KCGZjcPXBy9+CIvZu8OLwIgx3l
+h57wh2kKh4T7yd9Q9Wwng9Oa97n0PvEVBdNUo5o/LFYr+tcRyZ9B1F8R/7K
Dj5YK1xMCkOpFZng8kFhSfsvDkb7eDcOjp4dDl4bkUnj7ejFs/Ps8PB+r4et
Ocp+E48C//P8ydOX2BnVtXym/z6B/8femeiV37olHf+VF7T/P2M92ujVuI6u
AGiTFGb7w9et5uRI83FEKtk4woThge/qlcNoOMr6WRc8eCmyXO9VDzeDp35s
qDUCDDLe0F1jX/KjbZ8C5ndylKoPIkZbMrA6vDF8Zf/lPb8Ss9KexZx8eI3L
ePP2/Y89NyR88XC/54sSfcDpwnrYg3HfcdOJ/PDx7Mp973n6OdeLlWwal+KZ
ag84j4S/Rwag91LijeKiS84EFc26XBkeqgslomHqveJdT0PSaZqzk0wUJx29
iRQdzkko/LTCENgk75jpINJ7tcqe8lKsTZJMRTAg/FqMaeNZpZo0IKhI47wt
uPq7RewzVZUpD1hcv43JOfX5eqjhxJikrgBWXqKwJn/vakovwQf/Cg/U9xfW
q1cxdfNpTF3sUF0Z3RF8gz617sMfK5/ZF/Jwx/nk03VTrzHQG32PMSwYqyKx
DwOoAN4YmGqjTkcyb3zdsikNh05pAI341IVdnNog0Ofmq5DpmOYrppD3aKML
dIZXOeh7MZ0pY+mqDYm2sK/agiUd/O+jL7iS+wApfOS+/n80iv+jUXydRnH6
+vLkw9mr++gUh1+nU9w18pvea+vTfI4G+Jdvu69SZuwnZH2DFbK+nkeYLL79
NNvXXx198+Sbg91fRae2xxkcILoXktCfpQKJ2VivV8u1JT8Y1zLAMNeEYlef
FQ+q7zvcpILGlps9LB9xQpbUhkW9YEG4ClrLw1KeY1lCG0q83dQGkhcyf06m
gXnDa9F7r+p6ha65paGhko9LQtEhByvWUcxrRgkBYbGqoMAWralcPNZPYq3k
710Z2XJTYnXk9PjqOEsuRHuPG9HeeSVE2dniMtxNgp5mKCpDTh3G3acAZiM9
B/AHRuV36oaLGGRPjyybSn2TvsvU9gxzC24kfarEXc1QoQIRKT7Y4GUKtkHs
19ja8QrvHNOgtE/3lgzFBQx5Iaru8D2hQv9ObWokftR2VylcUNg636dKe+2u
5L40TIwL8zGZXWFGRbp5ZlOE2IWmb8Y1pnFt7UefvYkTiLyd9G1JpuDsyqjd
YXTgw2B0eLf43/dNv/z4Sq56j2Hw9v3J8dsoFLyDFQw+tdPfv/zm5Wir9eJc
sbzvHUdsnoX5WKJPazZeEv4J58Z07miNNfD4NDXiW0rFvZQaqYnLizWJwga4
G1I6eKgPVKRqwIKQbIDhXdOgMGBni4ZGpXyLuJVTe8fmRymWztbrGkK7x9FE
3qRbCdYrR9pJII3ONkjLPkW5aG+pFBWsRG1Yoc5ZLHhLHBnbKUdO3CCxwpFj
wGNpYEmCPT/fOl81UC226JmLj4d6tojbiGoXsbOm5g663deH0ivLsou5IRk2
9Nyw6x/DufPCoQvhLGtOGSLG8MM61xpJhWNr1vNCc1nTSVnHr07fcMJT0Zb2
IV2RkIpRJPZsjQhOPB9+ZtdxHFccVc3nlFdMpQ3EKDszCcwSiyHBjBivMX/R
96ePO3Ii5tqCyui4vJAOnYjnpry+wVArhckDVAlG+Yo8QUvSSElnPthZIz61
LROLU+mHUSRdavfkGxPtfidU6NpZ0XW2dlZ6oahNEyNcRMJNcr7prEUfwClo
ZgRJsVCUEgL6q5gdJh4MriHuS8xb5xYD/RZ+RiV9s5h7NtUlk729Khj7wbjN
9jCeSjk9SUrPmabTMqROuTqhDw62R0VlHoMoiZ10La5UauESUS+65EvBx0A3
JCQA+bSjS1QE6Rn8s/OVEon1eiwiN02UO/S1fovo5TvdNWEV5nvAjegMRLbM
M1Iwet0s953ynR6O+w60w8vx7Cu9HFE/SVJz4jwdRjpBbSfkZ/yv5RuJfwpk
pSv7y1W3nu36qwyqDogXX+ef+cu/TSJj9zOJVSFqQeRjkSkKcj2ymzuGtImf
Zlfvd4jPv8h7cxLyOxiYXZqsuJqDqGAwjtv0NzD2uYkPI576iB0u2sipij7T
Gdqubjz8Q0uQfNRFOBGYkuir2S3WUJkaRfsfYlUfj1XJ9WD1OZcVBHQ+ryyp
Ut01K25zZ1ew5MUCD1R54xlp4QgM0R2BgPOm8Gb9KU6W8mk6+/v3TFO/M58n
PHvw7PCIi3gjE8o9cfj0xVH25uPbt9nJ+3fvjs9Pj/4KFywM//QJrOqNWCkf
Xr97f/V6IHjDOL2XT46yn//8Z11Z2qdU7pAo7oP7uJ7tktFGI6nIZneY0FPM
OLnLBx8ef/4NPX4/WeXmePjMvuFEl3/geSfjtFeShansHzynudxDsLmXDg/p
pa1yzj369OnWtYLYcw8+4we/Sgr617/xU+oKRffoiydbp3S8hdyf4jLiP4YB
Xx70buGu++DffuknfrhrL/f1Q3+WkPPLefZcrtd2EdYJDvjXX9gsnBzbIZr8
u3BQJqm0mknbUsbc8SafeghPK5GHGTY1qiuCdE7ewMgzopKh63TE6z2kOlDY
rgtx1293Q/bIhDhPe4cQKJWDj7LvpZA5lB3EAgHn+u+Bre8fwul8kMbHupCj
QBKRBADC/c0ugvutf/r5C5eURzYsXJdlXWKm8y56OXz+0r14HzcCmqoeoD/g
e1DA4HfkAou+8I37QgztRUg0PZ+Ytqtv70Xuh8hsECAJhkavtmC60aW95wAH
clW5ZGN6v9e2HORPcPHUx61hKdWIzO3TCQiUSUVJlvThdOkaHUUuXEWNgzxD
4CVEVLUi3ov6RBkBGe0Nd8nugS2/FziNbwshEH+YhJ62Aopx0xS7IAZrENBI
D+ZFqFioAj9En4krvHs0VMR1qUSI2lNoNYH0Ug19YDljF2c3VX8RcV63/5wZ
zPAhBCHW20xe2tdtqXPRig9raYgf7wU5UIbGyAREIotiNep/GJfF+MLoeJbI
aytOxrjgtq+QMUmOc/3iqcKRPFIMvyu9pD0+MZD+HgGDayvITg1T1MiYM5ul
iiMFpdtevnrT9SC6zCPCY0Q/3syB9urHIzzF3rWZM7CobvBNTnrux6rRUWcN
rH4632h4SWAEsT4avX8wPpbVS9KWFdyw17PlKsktiCS+D4BCGLf+Ckq1Tlzx
5ePsRj1lE+r6gXRqRGGAKUd8OWytqwJaS/wEv04YUBdrkLQTAV6WuHrTqs9T
/WywXlBWbvBItB0LLFi7sdC7MNBjbMaSWWOGdOoC8V5Wa66SwhV8psxIigdu
x1EKaESypk9FsURmSttqBu3xxRntTx9KAQ/XIsJBNSWI7hRsbhl6lCNgPIWa
zA0uYJnovWVKUnomH2k04+IL902eZtN8lYcQE0G6DiPUJHfZfGNrOERsr3MT
Gqp43uxFQAeJOGxIZEiHCyXIrh+PO2B7EUtUzJp0F1xjIVPSYq7B4f20l62a
AaPsRLsaRSzBmuRxGOBTsXn8OZ+vMTVDuwOEOuNilZfz1ntFxEERHl7kG4LU
V9gkDObCbv60ph591k4bH+Ob1m0IEOW3UG3kYBBYjAHF5hiJ1DC9cj8QKPNN
W/J1ZXqyj2Kz4vya7zxTAnbOwR29RiUpw0JU0EcxjjjNF1pJXjfXYFsypflE
ZTubBAUxwlm0zuc6aQmJtQYCa4E19asjzIHgs4EIOnNZG5c6yLsgNgVaP4Fg
7sfIUxB35tQe7z29s4azIGWLKXg8NXD0gVuWRvwZ35hgGlq+9aDL1pWEp+Jo
kaIpMQKUYOOxE7enB0QckWQ6yf2M9Z1w+0MTKldH+wnemKzmIWCEXwgKShQ3
g3u3blf1wtXORi2DXiKiELWjyP6B6pMYEqq15BdpadMDICVtLKyhDzyuRaAO
/yCCJUQ7r56sWY1yEhyRLwIeFXoIwbYE0h2RdUoxuZIK9An6NDfWQyv3HdFx
wtYSDbRkvc+ZT5w3gom7HwqDsLERToEUALnskwYk8Z6/ZBE+DwGf5XNyqrFo
zBgOs0Xhe5tP8w1cx+iO0vtSBxrAfrRh0aeyoiNEEaFDEfu6RoHKBbCzGYHi
xfkx1If4piw+FwKeJzMNgPUR8pCdtLZWuXUaOlzsSLHHt1PNn2CxDOHbdtoY
BjKXcgIKJDai0NYH0bChRyL7V6Vmg5QPFiiCX4Gd2CjBEBHfiP8tQW1YMgQf
ZlwxDgSnOlCrYj5kbo93V2O+oVKiPaYNsJRZD03yR6jzEcb9LTJa4KZN8Fif
0CG0actG4GEIC0bdGz2UkKaXpRttXdoMyI/5rh/ToMtthQL3hJhCTEWSLMf9
M/A/tLkO6vo26sIbjuJ6DZ+dC7wGYZjHxCFslc9wSD22WXFoPWA/cdM3TQEM
md7+B3h/vcKQuYzTEiZb0LkEyNSNEOiFj4N34qsbow7DMvVrKYnEwrEfkS4B
6Y0lhD65MuAfwzFlCAKPUmvNUxPkQU3b8U3XYAeQUNBQRaINCIL1LOJLbK7u
XoOHiIh28TY3s7XDFxLRHfoKET9Wzt+Kwtttr9nfGzMqKbFuvPfoy3jFic+E
onSbK4UqGiy1uvaWnCQxS8ZNZ/DQnicAiAWQ2cgWMN+FNhFz+Kx9kKKaF3Mb
+kqQqu2vH0FATre5YMIp+LMabzwtdc5HoY7vAOEYhjSTrf3nXEseh7xan7Cn
AkEL1oImZFo0nsj2fjaa57mteUbs9Qk0xNjHvttBDNSeOWwZmCIrz0uweSr+
HLddvlvA0RVK1OuzTrcLdC2B1ZG2LDN42YphESv3Jcp3aWoQZWkDGf7msqhF
c4Xpq0KgA7Ber+xdKJfwjZwusUUnQRqcCzVwAo/qEjnsUqF6sKkN4lVQoNWS
Mtd8K1TB2CE5awLfUM1NoXUIHrAEUq6sPtFwExPKvQ8rZwHluIs1BxJ9b0hP
zDf9NBVj+Zn2VNFlXrLHhv1csCk/SS6fZJ/z3RyKFRFhT+Z6qvg0e2fl/iJq
sOtlPxhcEriQXP+ZPJqvdtx3hcFSq7rV/Cdy6TvkE0U/WJMRu6inrvN4pOGC
kcnWtVaXTtfWhz3VdSLDiomJZbG+0GnJTp3phKlpE8SctNuxqvJdb04fNhk6
8eM7FjS/0jq7OxwXHXq7Y1asFDaX0cwhbwD2FoSj38R+jWiiDL3QoopJejqj
FuqaBIYNNK+Oj+cWa2PnRGa+b5nuXo9V2OLRFc5hGZ2+y9ckN3TZEDG5E0QG
LbWQwimdTUU6RHRvk5aZzp3R4zdLIB3wZuTcXOIPKb5pGvNwuNzbIYM0dZcv
nsvnpxZDads5VCD2vAarsroNVy57WI6KEaigGFIeZt9dXh5fnIFCuJqMHiVO
Crlr6hI1aBp1UihkXtSXLqL+sSZxR50SnQPhZrNEJcV1bHQNcHq1TmRT1xVi
f/HAhAwoufeu4156T67oIOeFpRNJD4wI0a/jk7k17StQ3FDag+Bbn/NW+y8R
NRjMbYC+TcxOURua6R5qyJFpxlBrFL5oCXF0hYeKbn3zQ3pCZYZZNgu6p+5G
9djrqTD0E0K2ocfBisK4qED1FRjCtgZeAhYs9jJSwRu8vIXwmgnpaGPMd0H+
6fvikmKPbo1Ej2A/kLnpdArjBvFfP5em+4kpOaMseIL3HjKBUJ3TF6Cf0inj
RD0gKcF6qop1AwbOEsNHt2FuxEzEO6Xaea9h2OONGno13SZRVlX9OVJxUZVc
N5UsDQOLtQQWQZ6V9B3Fr/Yu+N2Y88GB9b/GP34W3KUnYtkzbQAbf3/63v6K
oHfZ2fH5cfexyLGGzreq5icVqhje3dvboygxjnI8+VTVt2D/XJM9M/jnI768
xfTbBzNgdMWDfwET/MMPH78//nCV/acRJhgd7D9it+ixY21tNnjz4ezy5Pt3
x+fn2St68MmLR9lv3leoTP429U6oIwTbrYgPO7sIHpzsl5m2nKGKH3h2mm9G
cGMeE++bF4/RZf14/5sn+4/3X7w8/NXgx7PTt9k7+vD+4SNg5GtSMt4VDasM
WG+B+PtwUU8ZfLQdnB//+vjDh/fZW37tpZuv8tp43u0Rw7fK7FkO483hWp5g
5BPtX2MYpiLeQLwMNFFQPZWx/1JXeHt7O8qXE1pdUT1ersftY1Ht92K23e7J
l/foy3v01b3oq3vho3vw0b34o78avPpwdv4+O+YFf/Mou6qpoQLK3PSyaX0K
ru/46u3xJWs2wsvgidHgu49XVx/OTr97DfsNs6iA7QuF/OmP//oO5gh3/hRf
uiTkvGtvy30wHvwajYtlU7bFn/74b9mr8prf+WENQ5KJgEMOBv8fXwrBXWZv
AQA=

-->

</rfc>
