<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.25 (Ruby 2.7.0) -->
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-spinella-event-streaming-open-network-latest" category="info" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.0 -->
  <front>
    <title abbrev="ESON">Event Streaming Open Network</title>
    <seriesInfo name="Internet-Draft" value="draft-spinella-event-streaming-open-network-latest"/>
    <author initials="E." surname="Spinella" fullname="Emiliano Spinella">
      <organization>Syndeno</organization>
      <address>
        <email>emiliano.spinella@syndeno.com</email>
      </address>
    </author>
    <date year="2022" month="January" day="27"/>
    <area>TBD</area>
    <workgroup>TBD</workgroup>
    <keyword>Internet-Draft</keyword>
    <abstract>
      <t>This document describes the vision, architecture and network protocol for an Event Streaming Open Network over the Internet.</t>
    </abstract>
    <note removeInRFC="true">
      <name>About This Document</name>
      <t>
        The latest revision of this draft can be found at <eref target="https://example.com/LATEST"/>.
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-spinella-event-streaming-open-network/"/>.
      </t>
      <t>
      </t>
      <t>Source for this draft and an issue tracker can be found at
        <eref target="https://github.com/syndeno/draft-spinella-event-streaming-open-network"/>.</t>
    </note>
  </front>
  <middle>
    <section anchor="introduction">
      <name>1. Introduction</name>
      <t>Society is rapidly digitalizing and automating the exchanges of value that constitute the economy. Also, considerable time and energy is spent to assure that key transactions can be executed with reduced human involvement with better, faster, and more accurate results. In this context, Event Streaming can play a key role in how the economic system evolves.</t>
      <t>However, most of the application layer integrations executed today across organizational boundaries are not in real time. Also, they currently require employing a variety of formats and protocols. Some industries have adopted data formats for exchanging information between organizations, such as Electronic Data Interchange (EDI). However, those integrations are limited to specific use cases and represent a small fraction of all demanded organizational integrations.</t>
      <t>Thus, there is no consistent and common consensus on a mechanism for the exchange of events across organizations. This results in a completely custom landscape for each real-time cross-organization integration. In this scenario, development teams must invest plenty of time into understanding and defining a common interface for events exchange.</t>
      <t>In this context, we can now introduce how this landscape could change with the introductiopn of an Event Streaming Open Network over the Internet. When needing to connect real-time event flows across organizations, developers would have a common basis for finding, publishing, and subscribing to event streams. Also, given a set of standard formats to encode and transmit events, developers could use the programming language of their choice. Overall, this set of standards would drastically reduce the cost of real-time integration, which would also enable experimentation by users.</t>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
    </section>
    <section anchor="an-open-network-for-event-streaming-over-the-internet">
      <name>2. An Open Network for Event Streaming over the Internet</name>
      <t>In this section, we will argue how Internet standards are developed and why this could be the case for an Event Streaming Open Network.</t>
      <t>An interesting example of this phenomenon is the case of ISDN (Integrated Services Digital Network), a set of communications standards for the transmission of voice, video, and data over the PSTN (Public Switched Telephone Network) developed by the ITU-T (Telecommunication Standardization Sector) in 1988. ISDN pretended to use the existing public telephone network to transmit digital data in a time when the Internet connectivity access was not as broadly available as it is today. The main competitor of this standard was the incipient Internet itself, which could be used to transmit the same data.</t>
      <t>The Internet alternative needed a protocol to support the same services offered by ISDN, which was initially developed by the conjoint effort of the academic and private sector. Consequently, in 1992 the Mbone (Multicast Bone) was created. This project was an experimental network backbone built over the Internet for carrying multicast IP traffic, which could be used for multimedia content. After some important milestones of this project, the SIP (Session Initiation Protocol) was defined in 1996 and was published as a standard protocol in IETF's RFC-3261. The reality today is that SIP has completely won the standards battle for multimedia transmission over the Internet, and ISDN usage has been on continuous decline.</t>
      <t>As for Event Streaming, we see a similar scenario set-up today. There are currently several open specifications and implementations for Event Streaming, like AMQP (Advanced Messaging Queueing Protocol), supported by RabbitMQ. However, while AMQP can be used for several purposes, Kafka Protocol specializes on Event Streaming Processing and its specialized features make it more convenient than RabbitMQ (i.e. ordering).</t>
      <t>In the case of an Event Streaming Open Network over the Internet, if we guide ourselves by the history of the most widely adopted protocols on the Internet, the governance should be similar to that of the WWW or Email. Both the WWW and Email have open specifications as well as open-source implementations. We can mention the Apache Web Server as an open-source implementation of the HTTP protocol; Postfix for SMTP; and Bind for DNS. Nevertheless, the governance for these protocols' specifications relies on the IETF.</t>
      <t>In order to define the characteristics of an Event Streaming Open Network, we will focus on the definition of shared and openly accessible infrastructure. First, we will review the principles of Free, Open &amp; Neutral Networks and why they should be followed for an Event Streaming Open Network. Then, we will show how DNS complies with the criteria to be considered an infrastructure resource. Finally, we will demonstrate how this is also true for Event Streaming.</t>
      <section anchor="free-open-neutral-networks-fonn">
        <name>2.1. Free, Open &amp; Neutral Networks (FONN)</name>
        <t>The main principles of a Free, Open &amp; Neutral Network are:</t>
        <ul spacing="normal">
          <li>It is open because it is universally open to the participation of everybody without any kind of exclusion nor discrimination, and because it is always described how it works and its components, enabling everyone to improve it.</li>
          <li>It is free because everybody can use it for whatever purpose and enjoy it independently of his network participation degree.</li>
          <li>it is neutral because the network is independent of the contents, it does not influence them and they can freely circulate; the users can access and produce contents independently to their financial capacity or their social condition. The new contents produced are orientated to stimulate new ones, or for the network administration itself, or simply in exercise of the freedom of adding new contents, but not to replace or to to block other ones.</li>
          <li>It is also neutral with regard to the technology, the network can be built with whatever technology chosen by the participants with the only limitations resulting of the technology itself.</li>
        </ul>
      </section>
      <section anchor="non-discriminatory-and-open-access">
        <name>2.1.1. Non-discriminatory and open access</name>
        <t>Services such as DNS, the World Wide Web and Email do not discriminate and are open-accessible. Basically, people and organizations can access these networks as long as they can register an Internet Domain and host the required server components. Nowadays, there are alternatives to avoid having to register a domain name to have a web page or an email, such as Cloud WordPress Hosting or Gmail. However, we will focus on the network participants that provide services to end-users.</t>
        <t>In the case of Guifi.net, we can highlight how this principle has been adopted in the fact that everybody can take part in the project without discrimination. Moreover, an emphasis is made in easing the participation of the disadvantaged collectives, with less resources or less opportunities to access information technologies, telecommunications, and the Internet.</t>
        <t>An Event Streaming Open Network should provide resources in a similar way than the most widely adopted Internet Services. Thus, individuals and organizations must be able to register Flow address spaces for which the existing DNS infrastructure could be leveraged. Moreover, the specification of the protocols that implement the Metadata and Payload formats must also be openly accessible.</t>
      </section>
      <section anchor="open-participation">
        <name>2.1.2. Open participation</name>
        <t>Internet Services like DNS, WWW and Email provide individuals and organizations with different ways of participation. First, anybody can obtain the protocols' specification and build a custom implementation, which would result in a new product compatible with the protocols. Secondly, anybody can register a domain name and set up servers using compatible products. Thirdly, anybody can join and participate in the IETF, the institution that governs the specifications for these protocols.</t>
        <t>As for Guifi.net, not only anybody can extend the network with new nodes but also can also participate in existing projects of network extension. Also, the participants can add services on top of the network such as VoIP, FTP servers, broadcast radios, etc.</t>
        <t>Regarding active participation on an Event Streaming Open Network, we can highlight the possibility for individuals and organizations to expand the services provided by the open network. This extensibility could be made possible by different uses of the event payloads and will vary significantly depending on the sector. Since we have already proved how Flow is an infrastructure resource, innovation would play its part and its results would be materialized in services expansion.</t>
        <t>We can conclude that the same kind of openness of DNS, WWW and Email is necessary for an Event Streaming Open Network. Anybody should be able to obtain the specifications to build an implementation of the service. Also, since it should leverage the DNS infrastructure, anybody would be able to register Flow address spaces. Lastly, the specification could be governed by an institution such as the IETF, due the dependency of Flow with other Internet Services governed by this institution.</t>
      </section>
      <section anchor="open-access-infrastructure-resources">
        <name>2.2. Open Access Infrastructure Resources</name>
        <t>The literature about Commons Infrastructure (Frischmann, 2007) defines a set of criteria to evaluate if a resource can be considered an infrastructure resource. This analysis is relevant since it can provide some arguments to prove the need of an infrastructure of commons for Event Streaming, which could then be materialized in an Open Network for Event Streaming. The demand-side criteria for evaluating if a given resource can be considered as an infrastructure resource are:</t>
        <ol spacing="normal" type="1"><li>The resource can be consumed nonrivalrously.</li>
          <li>Social demand for the resource is driven primarily by downstream productive activity that requires the resource as an input.</li>
          <li>The resource is used as an input into a wide range of goods and services, including private goods, public goods and/or non-market goods.</li>
        </ol>
        <t>First, a nonrival good describes the "shareable" nature of a given good. Infrastructures are shareable in the sense that the resources can be accessed and used by multiple users at the same time. However, infrastructure resources vary in their capacity to accommodate multiple users, and this variance in the capacity differentiates nonrival resources from partially rival resources. A nonrival resource represents those resources with infinite capacity, while a partially rival resource has finite but renewable capacity. As an example, Broadcast Television is a nonrival resource since additional users do not affect the capacity of the resource. On the other hand, natural oil resources are completely rival since its availability is limited and it is not renewable. In the middle, we have partially rival resources like a highway, which may be congested. This last characteristic is also true for the Internet since it supports additional users without degrading the service to existing users to a certain extent.</t>
        <t>Secondly, infrastructure resources consumption is primarily driven by downstream activities that require this resource as an input. This means that the broad audience consumes infrastructure resources indirectly. For instance, highway infrastructure is used to transport every kind of physical good which people and organizations purchase. This facilitates the generation of positive externalities for society through the downstream production of public goods and non-market goods. These positive externalities might be suppressed under a regime where resource availability is driven solely based on individuals' willingness to pay.</t>
        <t>Regarding willingness to pay, it is relevant to analyze this factor more exhaustively. Frischmann states that if infrastructure access is allocated based on individuals' willingness to pay the potential positive externalities of that infrastructure might be stifled. Thus, infrastructure resources behave differently than end-user products: if the former are made available solely based on the end-user demands and willingness to pay, those needed infrastructure resources might never be made available. As an example, we can mention that if airports were built based on individuals' willingness to pay for them, they might not even be built. However, individuals are willing to pay for the airport's downstream activities, such as purchasing a flight or consuming air-transported goods. Then, a whole set of positive externalities are generated by the existence of an airport in a city.</t>
        <t>In the third place, infrastructure resources are used as input for a wide range of outputs. This criterion emphasizes both the variance of the downstream outputs and their nature. Thus, the infrastructure resources possess a high level of genericness which enable productive activities that produce different goods with high variance. If we consider how an airport complies with this criterion, we can mention that not only airports serve individuals that need to travel by air but are also used to transport many kinds of physical goods. These goods then enable other activities throughout the downstream value chain. Then, the output variance of the activities that take airport infrastructure as input is significantly high.</t>
        <section anchor="open-access-dns-resource-example">
          <name>2.2.1. Open Access DNS Resource Example</name>
          <t>Now, we will provide as an example how DNS complies with these criteria and why it can be considered an infrastructure resource.
1. DNS infrastructure is a partially rival resource because individuals and organizations can register domains in the Domain Name addressing space. It is partially rival because not every actor can acquire the same domain name. However, the access to registering domain names is open and non-discriminatory. Moreover, DNS is also prone to congestion, which emphasizes its partially rival nature.
2. DNS infrastructure demand is driven principally by downstream products and services. An average Internet user is not paying directly for this infrastructure, but all the Internet services the user consumes pay for DNS infrastructure. This is true for all the Internet services due to the ubiquitous nature of DNS infrastructure.
3. All Internet services take as input DNS infrastructure and produce a broad variety of outputs, which then generate positive externalities to society as a whole by means of private goods, public goods and/or non-market goods.</t>
          <t>We can conclude that DNS complies with Frischmann criteria for being considered as an infrastructure resource. The resource is represented both by the domain name that can be and by the querying capacity of DNS servers.</t>
        </section>
        <section anchor="flow-event-streaming-internet-resource">
          <name>2.2.2. Flow: Event Streaming Internet Resource</name>
          <t>In this section, we will describe an Event Streaming Internet Resources. For this, we will consider the previously described guidelines for FONN as well as the characteristics of DNS as a resource. This Event Streaming Internet Resource shall be refered to as "flow" from now onwards.</t>
          <t>To begin with, we need to define what elements could be considered as infrastructure resources in an Event Streaming Open Network. First, the resource must be capable of delivering streams of events to consumers. Secondly, it must also permit producers to write events to the stream. Thirdly, each stream must be identifiable (i.e., URI) and able to be located (i.e., URL). From now on, we will use "Flow" to refer to the infrastructure resource of an Event Streaming Open Network.
The first Frischmann criterion requires the resource to be consumed nonrivalrously. Complete nonrivalrously for any Internet Service cannot be achieved due to the possibility of congestion and potential unavailability of different elements of the network. The same would be true for a Flow resource. Moreover, the public naming addressing space for Flows would be limited to the same level as that of domain names.</t>
          <t>We will continue now with the third criterion. To illustrate the potential of Flow being used as inputs for downstream activities, we will refer to Urquhart's vision for Event Streaming. He lists two areas in which significant changes can happen:</t>
          <ol spacing="normal" type="1"><li>The use of time-critical data for customer experience and efficiency. This is driven because today's consumers are increasingly expecting great experiences, and organizations are almost always motivated to improve the efficiency of their operations.</li>
            <li>The emergence of new businesses and business models. Businesses and institutions will quickly discover use cases where data processed in a timely manner will change the economics of a process or transaction. They may even experiment with new processes, made possible by this timely data flow. Thus, flow resources will also enable innovation. These innovations are responsible for generating positive externalities.</li>
          </ol>
          <t>Then, we have demonstrated why Flow resources can be considered as infrastructure resources using Frischmann's Demand-side Theory of Infrastructure. These resources can be managed in an open manner to maximize positive externalities, which basically means maintaining its open access, not discriminating, and eliminating the need to obtain licenses to use the resources. Consequently, managing infrastructure resources in this manner eliminates the need to rely on either market actors or governments.</t>
          <t>Lastly, the adoption of an Event Streaming Open Network implies taking Flow resources as inputs for productive activities. These inputs would then be used downstream to generate private goods, public goods and/or non-market goods. Additionally, we can assure that most of the consumers of Flow would not directly consume Flow resources. They would consume the outputs of downstream activities that use Flow as input. Again, the consumers may not be willing to pay for Flow resources directly.</t>
          <t>We can conclude this section mentioning that an Event Streaming Open Network would enable one infrastructure resource called Flow. The access to this resource can be managed in an openly manner: maintaining open access, not discriminating users or different uses of the resource, and eliminating the need to obtain approval or a license to use the resource.</t>
        </section>
      </section>
    </section>
    <section anchor="necessities-for-an-event-streaming-open-network-over-the-internet">
      <name>3. Necessities for an Event Streaming Open Network over the Internet</name>
      <t>In this section, we will describe the main needs for the broad adoption of Event Streaming. The focus will be made on detecting and describing the missing capabilities that could not only enable but also accelerate the event data integration among different organizations. The different necessities detailed in this section will serve as input for an architecture design.</t>
      <section anchor="necessity-1-event-streaming-internet-resource-public-registry">
        <name>3.1. Necessity 1: Event Streaming Internet Resource Public Registry</name>
        <t>A public registry of an organization's available event streams does not exist. We will argue in this section why this is the core component that an Event Streaming Open Network can provide.</t>
        <t>Nowadays, when an organization needs to publish an event stream or event flow, they usually follow some form of the following steps:</t>
        <ol spacing="normal" type="1"><li>Develop and deploy a producer application that writes events to a queue.</li>
          <li>Create all necessary networking permissions for external public access to the queue.</li>
          <li>Inform the remote user the access information (i.e., Hostname/IP, protocol, and port) together with the required client details and technology for accessing the stream (i.e., Apache Kafka Protocol, RabbitMQ API, etc.).</li>
          <li>Create credentials for consumer authentication and authorization access to the queue.
5.Develop and deploy a consumer application that reads the queue.</li>
        </ol>
        <t>Now, we can compare this process to a simple email interaction:
1. Sender opens a graphical Mail User Agent application and sends an email to an email address formatted as user@domain.
2. The message is sent to an SMTP server that routes it to the destination SMTP servers for the given domain. Once received, the message is put into the user mailbox.
3. When the recipient checks its mailbox by IMAP or POP3, the new email is transferred to the Mail User Agent.</t>
        <t>In these two scenarios, we can see that the information needed to be exchanged offline by the actors is completely different in size and content.</t>
        <t>First, in the case of email, there is a shared naming space given by the Domain Name Service (DNS). The email format has been standardized by the IETF in RFC 5321, section 2.3.11. Thus, there is a common naming space that is used for referencing mailboxes in the format user@domain. Thus, the offline details communicated by the peers is only the recipient email address. There is no analogous standard nor an open alternative for Event Streaming.</t>
        <t>Therefore, in the case of Event Streaming, users need to perform plenty of offline communication to agree not only on the technology to use but also on the queue to use. For instance, two organizations may be currently using Apache Kafka and need to share an event stream among themselves. The organization having the source of the stream should provide the following details to the consumer organization:
* Bootstrap servers: Fully Qualified Domain Name list of the Apache Kafka brokers to start the connection to the Apache Kafka Brokers. Example: tcp://kf1.cluster.emiliano.ar:9092, tcp://kf2.cluster.emiliano.ar:9092, tcp://kf3.cluster.emiliano.ar:9092
* Topic or Queue name: name of the topic resource in the Apache Kafka Cluster
* Authentication information: User and password, TLS Certificate, etc.</t>
        <t>In the case these organizations were not both using Apache Kafka, the use case cannot be simply solved without incurring in development or complex configurations as well as adopting proprietary components.</t>
        <t>We can conclude that an Event Streaming Open Network should provide a global accessible URI for streams in a similar fashion than email, to reduce offline developers' interactions. This means being able to name event streams in a common naming space like DNS, as well as providing a mechanism for users to discover the location and connections requirements.</t>
      </section>
      <section anchor="necessity-2-establishment-of-a-user-space-for-events">
        <name>3.2. Necessity 2: Establishment of a User Space for Events</name>
        <t>Another need for broad adoption is due to the inexistence of a common and agreed user convention. In the general literature, we cannot find reference to the types of users that would consume or produce events to and from an event stream.</t>
        <t>In this sense, it is also appropriate to consider the email use case. Basically, an email user only needs to know the email address, the password, the URL of a web mail client or the details of IMAP/POP3 server connection. Once the user has this information, it's possible to access an email space or mailbox where the user can navigate the emails in it. Also, IMAP provides the possibility for the user to create folders and optionally share them with other users.</t>
        <t>There is no analogous service currently available for Event Streaming analogous to the email case. This means that the user concept in Event Streaming is limited to authentication and authorization. Thus, the user does not have access to a "streambox". The result is the impossibility for a person or an application to possess a home directory containing all the streams owned by the user.</t>
        <t>As a conclusion for this section, we can mention that it is necessary to embrace a user space resource for Event Streaming. This resource should not only solve the users' motivations and requirements but also reduce the offline verbal communications and custom development dependencies. In the next sections, we will refer to this component as the Event User Space Service.</t>
      </section>
      <section anchor="necessity-3-an-agnostic-subscription-protocol">
        <name>3.3. Necessity 3: An Agnostic Subscription Protocol</name>
        <t>A third need for wide adoption is an agnostic protocol to manage subscriptions to event streams. For this need to be solved, it would be necessary first to count with an Event User Space Service. Then, in case a user has created a stream and wants to enable public subscriptions by other users, there is no general protocol to inform other parties of this subscription intention nor its confirmation.</t>
        <t>The result is the inability for the users to seamlessly subscribe to an event stream. They either must employ protocols like MQTT or, in the need of employing other application protocols like Apache Kafka, hardcode the subscription details in the different software implementations. This means that there is no general subscription protocol for Event Streaming that is agnostic of the application protocol employed. This protocol implements both the Metadata Payload Format and Payload Format.</t>
        <t>A good example to illustrate the difference between a control protocol that implements a Metadata Payload Format from a payload protocol that implements a Payload Format is how SIP (Session Initiation Protocol) works with RTP (Real Time Protocol) to provide VoIP capabilities. The former is a control protocol that initiates and maintains a session or call while the latter is the one responsible for carrying the payloads, which in the case of VoIP it would be coded audio.</t>
        <t>Consequently, a similar definition of protocols could potentially mitigate this limitation for Event Streaming. If a protocol can be used to establish and maintain the subscriptions relationships while another different protocol is used for the events payload, all the current application protocols implementations could be supported.</t>
        <t>Additionally, by counting also with an Event Streaming Public Registry, it would be possible to provide URI for streams in a similar way as email works with the "mailto" URI. For instance, in web pages one can find that email addresses are linked to mailto URIs which, when clicked, open the default email user application (i.e., Microsoft Outlook) to send an email to the referenced email address.</t>
        <t>If a user counts with a user space or streambox, then a user application like an email client could provide access to it. Then, if the user clicks on a link of a stream URI (i.e. "stream:myeventflow"), the streambox application would open and subscribe to the given stream.</t>
        <t>Currently, the Metadata Payload Format as well as the Payload Format are both provided by the queue or log application protocol. In the case of Apache Kafka, both formats are implemented within the Apache Kafka Protocol. This introduces a barrier for interoperability among different technologies, meaning that flows of event data cannot be seamlessly connected, without relying on custom development or proprietary software licensing.</t>
        <t>We can conclude that there is an actual need for an open specification of an Event Subscription Service for event streams, which implements what Urquhart calls Metadata Payload Format. This specification could be materialized in a network protocol that introduces an abstraction for the event queue or log technologies implemented by different organizations.</t>
      </section>
      <section anchor="necessity-4-an-open-cross-sector-payload-format">
        <name>3.4. Necessity 4: An Open Cross-sector Payload Format</name>
        <t>Currently, the different implementations of Event Streaming combine both the Payload Format with the Metadata Format. This means that the same protocol utilized for payload transport is used for subscription management.</t>
        <t>When a producer intends to publish events to a queue or, using Apache Kafka terminology, when a producer intends to write records to a topic, first it needs to initiate a connection to at least one of the Apache Kafka Brokers. In that initial exchange of TCP packages, the producer is authenticated, authorized, and informed with topic details. This set of transactions would belong to a protocol that implements a Metadata Payload Format. Afterwards, when the Producer starts writing the events to the topic, it encapsulates the event payload in a Kafka Protocol message. This latter behavior makes use of a Payload Format. Thus, we can observe how both theoretical formats are coupled in a single protocol. Similar behavior of a coupled Metadata and Payload Format in one single protocol happens also in AMQP, MQTT and RabbitMQ.</t>
        <t>As for the consumer, the behavior is the same with the difference that the initial intention is to subscribe to a queue or, in Apache Kafka terminology, to consume records of a topic. Then, a set of TCP packages encapsulating the Apache Kafka protocol authenticates, authorizes, and informs the Consumer with topic details for consumption. Afterwards, the consumer can start polling for new records in the different partitions of the topic. It is worth mentioning that the consumer needs to implement more queue management logic than the Producer, especially when multiple replicas of a consumer type are deployed.</t>
        <t>If we focus on the Payload Format, there is the need for an implementation-agnostic payload format suitable for Event Streaming. In this sense, CloudEvents project of the CNCF proposes a specification and a set of libraries for this purpose. The goal is to use CloudEvents specification as a Payload Format regardless of the Payload Protocol being used. For instance, we could transmit events in the CloudEvents format using the Kafka or AMQP Protocol.</t>
        <t>The general structure of the CloudEvents Payload Format includes a standardized methodology to include event data in an event message. For instance, instead of defining a customized JSON structure for sending the events of temperature changes measured by a device, a CloudEvent object could be used. Temperature could be included as an attribute in the CloudEvent object.</t>
        <t>We can then conclude that while there is no current protocol candidate that implements the Metadata Format, CloudEvents is a good candidate for the Payload Format needed in an Event Streaming Open Network. In this way, the different CloudEvents libraries made available in several programming could be leveraged.</t>
      </section>
    </section>
    <section anchor="event-streaming-open-network-architecture">
      <name>4. Event Streaming Open Network Architecture</name>
      <t>In this section, we will describe the overall architectural proposal for an Event Streaming Open Network. This description will include the different actors in play, the software components required, as well as the network protocols that should be specificized.</t>
      <section anchor="architecture-overview">
        <name>4.1. Architecture overview</name>
        <t>In Figure 1 we illustrate a high-level overview of an architecture proposal for the Open Network.</t>
        <figure>
          <name>Figure 1</name>
          <artwork alt="High-level overview of the Event Streaming Open Network" type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure1.svg"/>
        </figure>
        <t>We can identify different Network Participant (NP) in Figure 1 represented by different colors. The different NPs act as equals when consuming or producing events as part of the Flows they own. All of NPs implement the Event Streaming Open Network Protocol, which Is described in the next chapter.</t>
        <t>In the diagram, an initial flow starts on the orange NP to which a user in the blue NP is subscribed. After processing the events received in the first flow, the results are published to a new flow in NP blue, to which the orange NP is subscribed as well. Now, the green participant is subscribed to the same flow, enabling downstream activities across the rest of the network participants.</t>
        <t>It is possible to observe how the high-level architecture allows sharing the streaming of events across different network participants and their users. Also, there is also the need for security, in order to allow or deny the access to write to and read from flows.</t>
        <t>Regarding security, the architecture considers the integration with an Identity &amp; Access Management service, which could implement popular protocols such as OAuth, SAML or SASL. However, the network should also enable anonymous access in the same way FTP does. This means that a given NP could publicly publish flow and allow any party to subscribe to it.</t>
        <t>For example, nowadays the Network Time Protocol (NTP) is used to synchronize the day and time on servers. There are many NTP servers available that allow anonymous access, meaning that the service is openly available. The same must be considered for the Event Streaming Open Network.</t>
        <t>Additionally, the NP must be able to expand the capacity to support any number of flows, as well as extending the network with new services. Not only NP must be able to include any given set of data within events but also, they must be able to build applications and services on top of the network by employing the architecture primitives.</t>
        <figure>
          <name>Figure 2</name>
          <artwork alt="Event Streaming Open Network Architecture components" type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure2.svg"/>
        </figure>
        <t>Now, we provide a brief description of all the components that appear in the diagram of Figure 2. In the next sections further details of the components are provided.</t>
        <ul spacing="normal">
          <li>Flow Events Broker (FEB): a high-available and fault-tolerant service that provide queues to be consumed by network services, by users, and their applications. An example of an Event Queue Broker can be Apache Kafka, AWS SQS or Google Cloud PubSub. The payload format implemented by these tools are what in 3.1.4 we called Event Streaming Payload Format.</li>
          <li>Flow Name Service (FNS): a DNS-based registry that acts as an authoritative server for a set of domain names, which are used to represent flow addresses in a flow namespace. These domains contain all the necessary information to resolve flow names into flow network locations. This component refers to what in 3.1.1 we named Event Streaming Registry.</li>
          <li>Flow Namespace User Agent (FNUA): an application similar to User Mail Agents like Microsoft Outlook or Gmail. This application provides access to flow namespaces to users of the network. 
The definition of this component implies the specification of a dedicated protocol. We will refer to this protocol as FNAP (Flow Namespace Accessing Protocol).</li>
          <li>Flow Namespace Accessing Agent (FNAA): the server-side of the Flow Namespace User Agent. This component is the one that must provide convenient integration methods for GUI. This component refers to what in 3.1.2 we named Event User Space Service.
This component must implement the same protocol selected for the Flow Namespace User Agent: FNAP (Flow Namespace Accessing Protocol).</li>
          <li>Flow Processor (FP): a flow processing instance used to set up subscriptions that connect local or remote flows on demand. This component implements the processing part of what in 3.1.3 we called Event Subscription Service. This component will be created and managed by a FNAA instance, and the communication is held through an Inter-process Communications (IPC) interface. Also, this service must implement an Event Payload Format, for which we will mainly consider CNCF's CloudEvents and Protobuf.</li>
          <li>Flow Namespace Accessing Protocol (FNAP): the protocol implemented in the Flow Namespace Accessing Agent as well as in the Flow Namespace User Agent. The former will act both as a server and a client while the latter only as a client. This protocol is described in the next chapter.</li>
        </ul>
        <section anchor="flow-events-broker-feb">
          <name>4.1.1. Flow Events Broker (FEB)</name>
          <t>The FEB implementation that we will mostly consider is Apache Kafka. This open-source project is quickly becoming a commodity platform, and major cloud providers are building utilities for it. However, as a design decision, it should be possible to use the same protocols to support other applications, such as RabbitMQ, Apache Pulsar or the cloud-based options like AWS SQS or Azure Events Hub.</t>
          <t>Apache Kafka is the ecosystem leader in the Event Streaming space, considering mainly adoption. There is a growing set of tools and vendors supporting its installation, operation, and consumption. This fact makes Apache Kafka much more appealing to enterprise developers. However, the broker should provide a common set of functionalities which can be seen in the diagram of Figure 3.</t>
          <figure>
            <name>Figure 3</name>
            <artwork type="svg" alt="Event Streaming Open Network Architecture components" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure3.svg"/>
          </figure>
          <t>The selection of the Events Broker will impact on the implementation of the Flow Namespace Accessing Agent. This last component will be responsible for knowing how to set up and manage flows on top of different Events Brokers.</t>
        </section>
        <section anchor="flow-name-service-fns">
          <name>4.1.2. Flow Name Service (FNS)</name>
          <t>FNS is a core component for the overall proposed architecture. This component provides all needed functionalities for obtaining Flow connection details based on a Flow URI (Uniform Resource Identifier). Thus, it is required to define a URI format for Flow resources and to specify mechanisms for resource location resolution.</t>
          <t>In this section, we will focus on describing both the URI for Flow as well as the DNS mechanism for obtaining Flow network location details.</t>
          <section anchor="leveraging-dns-infrastructure">
            <name>4.1.2.1. Leveraging DNS infrastructure</name>
            <t>As mentioned previously, this component must maximize its leverage on the existing Internet DNS infrastructure. The reason for this requirement is to avoid defining new protocols and services that prevent broad adoption. Currently, DNS is the de facto name resolution protocol for the Internet, and there exist libraries for its usage on every programming language.</t>
            <t>Whereas DNS is mainly used to resolve FQDN (Fully Qualified Domain Names) into IP addresses, there are many other functionalities provided by the global DNS infrastructure. Theoretically, DNS is an open network of a distributed database. Individuals and organizations that want to participate in the network need to register a domain name and set up Authoritative DNS servers for domains.</t>
            <t>It is not in the scope of this work to detail the different available usages of DNS functionalities, but we can mention that it provides special Resource Records (i.e., types of information for a FQDN) that are solely used by special protocols. For instance, the MX Resource Records are used by SMTP servers to exchange email messages.</t>
            <t>For the Flow Open Network, it will be required to define a URI format for flows as well as the mechanism to resolve an URI into all the needed information to connect to a flow. In the case of email, a URI is the email address while the connection details will be the SMTP server responsible for receiving emails for that account. For instance, an email URI could be user@domain.com while its connection details could be smtp://mail.domain.com. The way in which the connection details are obtained is by resolving the MX DNS Resource Records of domain.com, which in this example is mail.domain.com.</t>
          </section>
          <section anchor="flow-uri">
            <name>4.1.2.2. Flow URI</name>
            <t>As we mentioned previously, the first needed element is a URI definition for flow resources. These resources identification must capture the following details:
* Domain, a registered domain in which create flow resources references. For example, airport.com.
* Flow Namespace, a subdomain which is solely used by users to host flow names. This subdomain must be delegated to the Flow Name Server component and desirable should not be used for any other purpose other than flow.
* Flow Name, a name for each flow that must be unique within its domain. The combination of flow name and flow domain results in an FQDN. For instance, we could have a flow named arrivals of the domain flow.airport.com. Thus, the FQDN of the flow would be arrivals.flow.airport.com. Also, the name can contain dots so that the following FQDN could be also used: airline.arrivals.flow.airport.com.</t>
            <t>Thus, the general syntax of a flow URI would be:</t>
            <t>flow://<flow_name>.<flow_namespace>.<domain/>
                </flow_namespace>
              </flow_name>
            </t>
            <t>This URI has the advantage that is similar to "mailto" URI and could be implemented in HTML to refer to flow resources. Some examples:</t>
            <ul spacing="normal">
              <li>flow://entrances.building.company.com</li>
              <li>flow://exits.building.company.com</li>
              <li>flow://temperature.house.mydomain.com</li>
              <li>flow://pressure.room1.office.mydomain.com</li>
            </ul>
            <t>The flow URI must unequivocally identify a flow resource and provide, by means of DNS resolution mechanisms, all the information required to use the flow. Among these parameters, at least the following should be resolvable:</t>
            <ul spacing="normal">
              <li>Event Queue Broker protocol utilized by the flow. For instance, if Apache Kafka is used, the protocol would be "kafka"; In case RabbitMQ is used by the flow, "amqp". Also, it must be informed if the protocol is protected by TLS.</li>
              <li>Event Queue Broker FQDN or list of FQDNs that resolve to the IP address of one or a set of the Event Queue Brokers. For instance, kafka-1.mycompany.com, kafka-2.mycompany.com.</li>
              <li>Event Queue Broker Port used by the Event Queue Brokers. For instance, in the case of Kafka: 9092, 9093.</li>
              <li>Event Queue Broker Transport Security Layer can be implemented. Thus, it is needed to know if the connection uses TLS before establishing it.</li>
              <li>Queue Name hosted in the Event Queue Broker, which must be equal to that of the corresponding flow name.</li>
            </ul>
            <t>The general syntax of the Flow URI would be as follows:</t>
            <t>flow://flowName.flowCategory.myNameSpace.domain.tld</t>
            <ul spacing="normal">
              <li>Flow Namespace FQDN: myNameSpace.domain.tld</li>
              <li>Flow Name: flowName.flowCategory</li>
              <li>Flow FQDN: flowName.flowCategory.myNameSpace.domain.tld</li>
            </ul>
            <t>The following are examples of this URI Syntax:</t>
            <t>flow://notifications.calendar.people.syndeno.com</t>
            <ul spacing="normal">
              <li>Flow Namespace FQDN: people.syndeno.com</li>
              <li>Flow Name: notifications.calendar</li>
              <li>Flow FQDN: notifications.calendar.people.syndeno.com</li>
            </ul>
            <t>flow://created.invoice.finance.syndeno.com:</t>
            <ul spacing="normal">
              <li>Flow Namespace FQDN: finance.syndeno.com</li>
              <li>Flow Name: created.invoice</li>
              <li>Flow FQDN: created.invoice.finance.syndeno.com</li>
            </ul>
          </section>
          <section anchor="flow-name-resolution">
            <name>4.1.2.2. Flow name resolution</name>
            <t>In Figure 4, we can see how a Flow FQDN can be resolved by means of the Flow Name Service.</t>
            <figure>
              <name>Figure 4</name>
              <artwork alt="High-level overview of the interactions with the Flow Name Service component." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure3.svg"/>
            </figure>
            <t>In order to illustrate the Flow Name resolution procedure by the FNAA (Flow Namespace Accessing Agent), we can consider the following flow URI:</t>
            <t>flow://notifications.calendar.people.syndeno.com</t>
            <t>First, the FNAA will perform a query to the DNS resolvers. These will perform a recursive DNS query to obtain the authoritative name servers for the Flow Namespace: people.syndeno.com. Thus, the authoritative name servers for syndeno.com will reply with one or more NS Resource Record containing the FQDN for the authoritative name servers of people.syndeno.com.</t>
            <t>Secondly, once these name servers are obtained, the FNUA will perform a PTR query on the Flow FQDN adding a service discovery prefix. The response of the PTR query will return another FQDN compliant with SRV DNS Resource Records (RFC-2782) and DNS Service Discovery (RFC-6763).</t>
            <t>In this case, the query for PTR records would be as follows:</t>
            <t>;; QUESTION SECTION:
;notifications.calendar.people.syndeno.com.             IN      PTR</t>
            <t>The response would be in the following form:</t>
            <t>;; ANSWER SECTION:
notifications.calendar.people.syndeno.com. 21600 IN     PTR _flow._tcp.notifications.calendar.people.syndeno.com.</t>
            <t>Using the FQDN returned by this query, an additional query asking for SRV records is made:</t>
            <t>;; QUESTION SECTION:
;_flow._tcp.notifications.calendar.people.syndeno.com.          IN      SRV</t>
            <t>;; ANSWER SECTION:
_flow._tcp.notifications.calendar.people.syndeno.com. 875 IN    SRV     30 30 65432 fnaa.syndeno.com.
_flow._tcp.notifications.calendar.people.syndeno.com. 875 IN TXT "tls"</t>
            <t>_queue._flow._tcp.notifications.calendar.people.syndeno.com. 875 IN     SRV     30 30 9092 kafka.syndeno.com.
_queue._flow._tcp.notifications.calendar.people.syndeno.com. 875 IN TXT "broker-type=kafka tls"</t>
            <t>First, the response informs the network location of the FNAA server, in this case a connection should be opened to TCP port 65432 of the IP resulting of resolving fnaa.syndeno.com:</t>
            <t>;; QUESTION SECTION:
;fnaa.syndeno.com.              IN      A</t>
            <t>;; ANSWER SECTION:
fnaa.syndeno.com.       21600   IN      A       208.68.163.200</t>
            <t>Secondly, this response offers other relevant information, like the TCP port where the queue service is located (9092). It also includes a TXT Resource Record that establishes the protocol of the Event Queue Broker, defined in the variable "broker-type=kafka".</t>
            <t>Now, using the returned FQDN for the queue, kafka.syndeno.com, the resolver can perform an additional query:</t>
            <t>;; QUESTION SECTION:
;kafka.syndeno.com.             IN      A</t>
            <t>;; ANSWER SECTION:
kafka.syndeno.com.      21600   IN      A       208.68.163.218</t>
          </section>
        </section>
        <section anchor="flow-namespace-accessing-agent-fnaa">
          <name>4.1.3. Flow Namespace Accessing Agent (FNAA)</name>
          <t>The Flow Namespace Accessing Agent is the core component of a Network Participant. This server application implements the Flow Namespace Accessing Protocol that allows client connections.</t>
          <t>In the diagram of Figure 5 we can see the different methods that the FNAA must support.</t>
          <figure/>
          <name>Figure 5</name>
          <artset>
            <artwork alt="High-level overview of the interactions among FNAA servers." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure4.svg"/>
          </artset>
          <t>&lt;/figure&gt;</t>
          <t>The clients connecting to a FNAA server can be remote FNAA servers as well as FNUA. The rationale is that users of a NP connect to the FNAA by means of a FNUA. On the other hand, when a user triggers a new subscription creation, the FNAA of his NP must connect as client to a remote FNAA server.</t>
        </section>
        <section anchor="flow-processor-fp">
          <name>4.1.4. Flow Processor (FP)</name>
          <t>Whenever a new subscription creation is triggered and all remote flow connection details are obtained, the FNAA needs to set up a Processor for it. The communications of the FNAA to and from the FP is by means of an IPC interface. This means that there can be different implementations of Processors, one of which will be the Subscription Processor.</t>
          <t>In the diagram of Figure 6, we can see the initial interface methods that should be implemented in a Flow Processor.</t>
          <figure/>
          <name>Figure 6</name>
          <artset>
            <artwork alt="High-level overview of the IPC interface for the FNAA server and Flow Processors communications." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure6.svg"/>
          </artset>
          <t>&lt;/figure&gt;</t>
          <t>Depending on the use of the processor, different data structures should be added to the different methods. In the case of a Subscription Processor, the minimum information will be the remote and local Flow connection details. Moreover, the interface also should include methods to update the Processor configuration and to destroy it, once a subscription is revoked. Finally, due to the nature of the stream communication, there could also be methods available to pause and to resume a Processor.</t>
          <t>There can be different types of Processors, which we can see in Figure 7.</t>
          <figure/>
          <name>Figure 7</name>
          <artset>
            <artwork alt="High-level overview of the IPC interface for the FNAA server and Flow Processors communications." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure7.svg"/>
          </artset>
          <t>&lt;/figure&gt;</t>
          <t>In Figure 7, we can see that there are different types of Flow Processors:
* Bridge Processor: Consumes events from a Flow located in an Event Broker (i.e., Apache Kafka) and transcribes them to a single Flow (local or remote).
* Collector Processor: Consumes events from N Flows located in an Event Broker and transcribes the aggregate to a single Flow (local or remote).
* Distributor Processor: Consumes events from a single Flow and transcribes or broadcast to N Flows (local or remote).
* Signal Processor: Consumes events from N Flows and produces new events to N Flows (local or remote)</t>
          <t>To implement the previously described Subscription Processor, we can utilize some form of the Bridge Processor. Although we are initially considering the basic use case of subscription, it must be possible for the network to extend the processor types supported. In any case, the different FNAA servers involved must be aware the supported processor types, with the goal of informing the users the capabilities available in the FNAA server. For instance, the fact that a FNAA supports the Bridge Processor should enable the subscription commands in the FNAA, for users to create subscriptions using the Bridge Processor.</t>
          <t>In summary, the IPC interface should support all the possible processors that the network may need although we are initially considering the subscription use case.</t>
        </section>
        <section anchor="flow-namespace-user-agent-fnua">
          <name>4.1.5. Flow Namespace User Agent (FNUA)</name>
          <t>The FNUA is an application analogous to email clients such as Microsoft Office or Gmail. These applications implement either different network protocols to access mailboxes by means of IMAP and/or POP3. In the case of FNUA, the protocol implemented is the FNAP (Flow Namespace Accessing Protocol).</t>
          <t>The FNUA is an application that acts as a client for the FNAA server. Only users that possess accounts in a Network Participant should be able to login to FNAA to manage Flow Namespaces. The FNUA could be any kind of user application: web application, desktop application, mobile application or even a cli tool.</t>
          <t>In the Diagram of Figure 8 we can see the actions that the user can request to the FNUA.</t>
          <figure/>
          <name>Figure 8</name>
          <artset>
            <artwork alt="High-level overview of the interactions between a user and the Flow Namespace User Agent component." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure8.svg"/>
          </artset>
          <t>&lt;/figure&gt;</t>
          <t>The main goal of the FNUA is to provide the user with access to Flow Namespaces and the flows hosted in them. A user may have many Flow Namespace and many Flows in each of them. By means of the FNUA, the user can manage the Flow Namespaces and the Flows in them. Also, the FNUA will provide the capabilities required to subscribe to external Flows, whether local to the FNAA, local to the NP or remote (in a different NP FNAA server).</t>
        </section>
      </section>
      <section anchor="communications-examples">
        <name>4.2. Communications Examples</name>
        <t>In this section, two usage examples of Network Participants communications are provided. The first one, we call unidirectional, since one NP subscribes to a remote Flow of a different NP. The second one, we call it bidirectional, since now these NP have mutual subscriptions.</t>
        <section anchor="unidirectional-subscription">
          <name>4.2.1. Unidirectional Subscription</name>
          <t>In the diagram of Figure 9, we can see an integration between two NP. In this case, there is a FlowA hosted in the Orange NP to which the FlowB in the Blue NP is subscribed. Both FlowA and FlowB count with a queue hosted in the Flow Events Broker, which could be an Apache Kafka instance for example. However, it must be possible to employ any Flow Events Broker of the NP's choice.</t>
          <figure/>
          <name>Figure 9</name>
          <artset>
            <artwork alt="Example of a unidirectional subscription among two Network Participants." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure9.svg"/>
          </artset>
          <t>&lt;/figure&gt;</t>
          <t>The steps followed to set up a subscription to a remote flow are:
1. A user of the Blue NP creates a new subscription to remote FlowA by means of the Flow Namespace User Agent (FNUA).
2. The FNUA connects to the Flow Namespace Accessing Agent (FNAA) of the Blue NP to inform the user request.
3. The FNAA in the Blue NP discovers the remote FNAA to which it must connect to obtain the flow connection parameters. First, it needs to authenticate and, if allowed, the connection parameters will be returned.
4. Once the FNAA in the Blue NP has all the necessary information, it will set up a new Processor that connects the flow in the Orange NP to a flow in the Blue NP.
5. Once the subscription is brought up, every time a Producer in the Orange NP writes an event to FlowA, the Flow Processor will receive it, since it is subscribed to it. Then, the Flow Processor will write that event to FlowB in the Blue NP.
6. From now on, every Consumer connected to FlowB will receive the events published on FlowA.</t>
          <t>In case the user owner of FlowA in the Orange NP wishes to revoke the access, it must be able to do so by means of security credentials revoking against the Identity &amp; Access Manager of the Orange NP.</t>
        </section>
        <section anchor="bidirectional-subscription">
          <name>4.2.2. Bidirectional Subscription</name>
          <t>In Figure 10 we can see an example of all the components needed to set up a flow integration between two different NP. In this case, there are two flows being connected:
* FlowA of the Orange NP with FlowB of the Blue NP
* FlowC of the Blue NP with FlowD of the Orange NP</t>
          <figure/>
          <name>Figure 10</name>
          <artset>
            <artwork alt="Example of a bidirectional subscription among two Network Participants." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure10.svg"/>
          </artset>
          <t>&lt;/figure&gt;</t>
          <t>Each Flow has its corresponding Queue hosted in the NP Flow Events Broker. Also, there is one Flow Processor for each connection, meaning that these components are in charge of reading new events on source flows to write them to the destination flows as soon as received.</t>
          <t>Also, we can see that in order to connect FlowB to FlowA, a connection from the Blue NP's FNAA has been initiated against the Orange NP's FNAA. This connection uses the FNAP to interchange the flow connection details. Analogously, the FNAA connection to set up the integration of FlowC with FlowD has been initiated by the Orange NP's FNAA.</t>
          <t>After the flow connection details are obtained, the different Flow Processors are set up to consume and produce events from and to the corresponding Queue in the different NPs.</t>
          <t>Once the two processors are initialized, all the events produced to FlowA in the Orange NP will be forwarded to FlowB in the Blue NP; and all the events produced to FlowC in the Blue NP will be forwarder to FlowD in the Orange NP.</t>
        </section>
      </section>
    </section>
    <section anchor="event-streaming-open-network-protocol">
      <name>5. Event Streaming Open Network Protocol</name>
      <t>The protocol to be used in an Event Streaming Open Network is a key component of the overall architecture and design. This chapter is dedicated to thoroughly describe this protocol.</t>
      <section anchor="protocol-definition-methodology">
        <name>5.1. Protocol definition methodology</name>
        <t>It is now necessary to specify the protocol needed for the Flow Namespace Accessing Agent or FNAA, which we have named the Flow Namespace Accessing Protocol or FNAP. In the diagram of Figure 11 we can see how an FNAA client connects with a FNAA server by means of the FNAP.</t>
        <figure/>
        <name>Figure 11</name>
        <artset>
          <artwork alt="FNAA client and server communicate using FNAP." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure10.svg"/>
        </artset>
        <t>&lt;/figure&gt;</t>
        <t>In order to define a finite state machine for the protocol and the different stimuli that cause a change of state, the model presented by M.Wild (Wild, 2013) in her paper "Guided Merging of Sequence Diagrams" will be employed. This model is beneficial since it provides an integrated method both for client and server maintaining the stimuli relationship that trigger a change of state in each component.</t>
        <figure/>
        <name>Figure 12</name>
        <artset>
          <artwork alt="Merged Sequence Diagram for SMTP proposed by Wild, 2013." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure12.svg"/>
        </artset>
        <t>&lt;/figure&gt;</t>
        <t>In Figure 12 we have the method proposed by Wild for SMTP, in which there are boxes representing states and arrows representing transitions. Each transition has a label composed of the originating stimulus that triggers the transition and a subsequent stimulus effect triggered by the transition itself. For instance, when a client connects to an SMTP Server, the client goes from "idle" state to "conPend" state. The label of this transition includes "uCon" as the stimulus triggering the transition, which triggers the effect "sCon". Then, on the diagram for the server we can see that the "sCon" triggers the transition from "waiting" state to "accepting" state in the server.</t>
        <t>This method will be used to define the states and transitions for the Flow Namespace Accessing Protocol both for client and server.</t>
      </section>
      <section anchor="flow-namespace-accessing-protocol-fnap">
        <name>5.2. Flow Namespace Accessing Protocol (FNAP)</name>
        <t>Using the model proposed by Wild described previously, we define the finite-state machine for the FNAA Server, which we can see in Figure 13.</t>
        <figure/>
        <name>Figure 13</name>
        <artset>
          <artwork alt="Finite-state machine for the Flow Namespace Accessing Protocol." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure13.svg"/>
        </artset>
        <t>&lt;/figure&gt;</t>
        <t>The model in right side of Figure 13 shows that the FNAA server starts in a "waiting" state, which basically means that the server has successfully set up the networking requirements to accept client connections. Then, when a client connects, a transition is made to "accepting" state, in which internally the authentication procedure is made. If the authentication is successful, a transition is made to "ready" state, meaning that the client can now execute commands on the FNAA server.</t>
        <t>For each command that the client executes, a transition is made to "cmdRecvd" state. Then, a response is returned to the client, transitioning again to "waiting" state. When the client executes the "Quit" command, a transition is made to the "waiting" state and the server must free all used networking resources for the now closed connection.</t>
        <t>On the left side of Figure 13, we also have the client state machine with its corresponding transitions. The client triggers a connection to the server and once established, an authentication is needed. Once the authentication is correctly done, the client can start requesting commands to the server. For each command executed by the client, a transition is made to "cmdPend" state, until a response is returned by the server.</t>
        <t>Eventually, a "Quit" command will be executed by the client and the connection will be closed.</t>
      </section>
      <section anchor="implementation">
        <name>6. Implementation</name>
        <t>In this section, we provide an approach for the overall implementation of the proposed Event Streaming Open Network. Considering the components defined previously for the architecture, we will define which existing tools can be leveraged and those that require development.</t>
        <section anchor="objectives">
          <name>6.1. Objectives</name>
          <t>The objective of this implementation is to provide specifications for an initial implementation of the overall architecture for the Event Streaming Open Network. Whenever it is possible, existing tools should be leveraged. For those components that need development, a thorough specification is to be provided.</t>
          <section anchor="implementation-overview">
            <name>6.2. Implementation overview</name>
            <t>In Figure 14, we have a diagram of the overall implementation proposal. The components that have the Kubernetes Deployment icon are the ones to be managed by the FNAA server instance. Then, we have a Kafka Cluster that provides a Topic instance for each flow. Finally, the DNS Infrastructure is leveraged.</t>
            <figure/>
            <name>Figure 14</name>
            <artset>
              <artwork alt="Implementation overview using Kubernetes, Apache Kafka, DNS Bind9 and the Flow CLI tool." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure14.svg"/>
            </artset>
            <t>&lt;/figure&gt;</t>
          </section>
        </section>
      </section>
      <section anchor="existing-components">
        <name>6.3. Existing components</name>
        <t>In this section, we describe the existing software components that can be leveraged for implementation.</t>
        <section anchor="flow-events-broker-feb-1">
          <name>6.3.1. Flow Events Broker (FEB)</name>
          <t>Since there are currently many implementations for this component, it is necessary to develop the needed integrations of other components of the architecture to the main market leaders. Thus, we will consider the following Flow Events Broker for the implementation: Apache Kafka, AWS SQS and Google Compute PubSub.</t>
          <t>In summary, this component does not need to be developed from scratch. However, the FNAA will need to be able to communicate with the different Flow Events Broker, meaning that it must implement their APIs as a client.</t>
        </section>
        <section anchor="flow-name-service-fn">
          <name>6.3.2. Flow Name Service (FN)</name>
          <t>This component can be completely implemented by leveraging on the ISC Bind9 software component, which is the de facto leader for DNS servers. A given NP will need to deploy a Bind9 Nameserver and enable both DNSSEC and DNS Dynamic Update.</t>
          <t>The impact of adopting Bind9 for the implementation means that the FNAA component needs to be able to use a remote DNS Server to manage the Flow URI registration, deregistration and execute recursive DNS resolution.</t>
        </section>
        <section anchor="components-to-be-developed">
          <name>6.4. Components to be developed</name>
          <t>In this section, we describe a set of tools that require development. These components, especially the FNAA, are the core components of every Network Participant. Moreover, these are the components that implement the network protocol FNAP.</t>
          <t>Since these are the core components of the network, they are the natural candidates for validation. In the next chapter, we will show the feasibility of the core network components in the form of a Proof of Concept.</t>
          <section anchor="flow-namespace-accessing-agent-fnaa-1">
            <name>6.4.1. Flow Namespace Accessing Agent (FNAA)</name>
            <t>The Flow Namespace Accessing Agent is a server component that triggers the creation of child processes that implement the different Flow Processors. This means that the instance running the FNAA will bring up new processes for each processor. One way of implementing this functionality can be a parent process that creates new child processes for each processor. However, this would imply the need of creating and managing different threads in a single FNAA instance.</t>
            <t>The problem with the approach of a parent process and child processes for the FNAA is on the infrastructure level. The more processor a FNAA needs to manage, the more compute resources the FNAA would need. In the current cloud infrastructure context, this is problem because it means that additional compute resources should be assigned to the FNAA, depending on the quantity of processors and the required resources for each of them. In summary, this approach would be vertically scalable but not horizontally scalable.</t>
            <t>Then, to avoid the scalability issue, the approach we propose is by implementing a Cloud Native application. By leveraging on Kubernetes, it is possible to trigger the creation of Deployments, which are composed of Pods. Each Pod can contain a given quantity of containers, which are processes running in a GNU/Linux Operating System. In this way, we can dedicate a Pod to run the FNAA server and different Pods to run the Processors. This approach provides a convenient process isolation and enables both horizontal and vertical scalability.</t>
            <t>Moreover, the way in which the FNAA would bring up and manage Processor instances would be though an integration with the underlaying Kubernetes instance, by means of the Kubernetes API. The result is a Cloud Native application that leverages the power and flexibility of Kubernetes to manage the Processor instances.</t>
            <t>On the other hand, the programming language for the FNAA must also be defined. For this, we consider that it must be possible to implement the FNAA and the Flow Processors in different programming languages. For the FNAP it is recommended to employ Golang, since Kubernetes CLI tool is implemented in this language and there are several libraries available for integration. As for the Flow Processors, it must be possible to use any programming language as long as the IPC interface is correctly implemented.</t>
            <t>Regarding the IPC interface for the communications between the FNAA and the Flow Processors, the recommendation is to employ gRPC together with Protobuf. The rationale for choosing this this technology is the fact that gRPC enables binary communications, which are the desired type of communication for systems integration. Then, both the FNAA and the Flow Processors must share this Protobuf interface definition and implement it accordingly through gRPC.</t>
            <t>Finally, the FNAA must implement the protocol we have named FNAP, which provides the main set of functionalities for the Event Streaming Open Network. The implementation of FNAP must be stateful, in the sense that it is connection-based. Additionally, the implementation must be text-based, with the goal that humans can interact with FNAA servers in the same way that it is possible for SMTP servers. The transport protocol must be TCP with no special definition for a port number, since the port should be able to be discovered by means of DNS SRV Resource Records.</t>
            <t>Regarding security for the FNAA servers, TLS must be supported. This means that any client can start a TLS handshake with the FNAA servers before issuing any command.</t>
            <t>In conclusion, the implementation of the FNAA over Kubernetes provides the needed flexibility and set of capabilities required for this component. It is recommended to implement the FNAA in Golang and enable the implementation of Flow Processors in any programming language as long as the Protobuf interface is correctly implemented. Finally, the FNAA must implement the protocol FNAP in a connection-based and text-based manner.</t>
          </section>
          <section anchor="flow-namespace-user-agent-fnua-1">
            <name>6.4.2. Flow Namespace User Agent (FNUA)</name>
            <t>The Flow Namespace User Agent (FNUA) can have different implementations as long as they comply with the protocol FNAP.</t>
            <t>We propose the initial availability of a CLI tool that acts as a Flow Namespace User Agent. This CLI tool must provide a client implementation of all the functionalities available in the FNAA server. Among the functionalities to be implemented as a must, we can mention:
* Discover the FNAA server for a given Flow URI.
* Connect to the FNAA server to manage Flow Namespaces and Flows, as exemplified in Figure 8.</t>
            <t>Additionally, the FNUA should be able to discover the Authoritative FNAA server for a given Flow Namespace. This discovery shall be performed by leveraging on the DNS-SD specification. Refer to Annex D to review the discovery process.</t>
            <t>Regarding the implementation of the CLI tool, it is recommended to employ Golang together with Cobra, a library specialized to create CLI tools. In Figure 15 we have a diagram that shows the different functionalities that the CLI tool should implement.</t>
            <figure/>
            <name>Figure 15</name>
            <artset>
              <artwork alt="Flow CLI parameters diagram." type="svg" src="https://github.com/syndeno/draft-spinella-event-streaming-open-network/blob/main/images/Figure15.svg"/>
            </artset>
            <t>&lt;/figure&gt;</t>
          </section>
        </section>
      </section>
    </section>
    <section anchor="proof-of-concept">
      <name>7. Proof of Concept</name>
      <t>In this section, we will focus on providing a minimum implementation of the main Event Streaming Open Network component: the Flow Namespace Accessing Agent. This implementation should serve as a Proof of Concept of the overall Event Streaming Open Network proposal.</t>
      <t>As described in the previous section, the Flow Namespace Accessing Agent (FNAA) is the main and core required component for the Open Network. All Network Participants must deploy an FNAA server instance in order to be part of the network. The FNAA actually implements a server-like application for the Flow Namespace Accessing Protocol (FNAP). Then, the first objective of this Proof of Concept is to show an initial implementation of the FNAA server component.</t>
      <t>On the other hand, the FNAA is accessed by means of a Flow Namespace User Agent (FUA). This component acts as a client application that connects to a FNAA. Also, this component can take different forms: it could be a web-based application, a desktop application or even a command line tool. For the purposes of this Proof of Concept, we will implement a CLI tool that acts as a client application for the FNAA. Thus, the second objective of this PoC is to provide an initial implementation of the FNUA client component.</t>
      <t>In the following sections, we will first describe the minimum functionalities considered for validating the overall proposal for the Event Streaming Open Network. This minimum set of requirements for both the FNAA and the FNUA will compose the Proof of Concept.</t>
      <t>Afterwards, we will describe the technology chosen for the initial implementation of both the FNAA and the FNUA. Then, a description of how these tools work in isolation will be provided. Subsequently, we will review different use cases to prove how the network could be used by network participants and its users.</t>
      <t>Lastly, we will provide a conclusion for this Proof of Concept, where we mentioning if and how the minimum established requirements have been met or not.</t>
      <section anchor="minimum-functionalities">
        <name>7.1. Minimum functionalities</name>
        <t>Network Participants system administrators must be able to run a Server Application that acts as FNAA.</t>
        <t>Users using a Client Application actiong as a FNUA must be able to:
1. Access the flow account and operate its flows.
2. Create a new flow.
3. Describe an existing flow.
4. Subscribe to an external flow.</t>
      </section>
      <section anchor="fnaa-server-application">
        <name>7.2. FNAA - Server application</name>
        <t>The FNAA server application must implement FNAP as described in Section 6. Basically, the FNAA will open a TCP port on all the IP addresses of the host to listen for new FNUA client connections.</t>
        <t>The chosen language for the development of the FNAA is GoLang. The reason for choosing GoLang is because Kubernetes is written in this language and there is a robust set of libraries available for integration. Although there is no integration built with Kubernetes for this Proof of Concept, the usage of GoLang will enable a seamless evolution of the FNAA application. In future versions of the FNAA codebase, new functionalities leveraging Kubernetes will be easier to implement than if using a different programming language.</t>
        <t>When the FNAA server application is initialized, it provides debug log messages describing all client interactions. In order to start the server application, a Network Participant system administrator can download the binary and execute it in a terminal:</t>
        <t>ignatius ~ 0$./fnaad 
server.go:146: Listen on [::]:61000
server.go:148: Accept a connection request.</t>
        <t>Now that the 61000 TCP port is open, we can test the behaviour by means of a raw TCP using telnet command in a different terminal:</t>
        <t>ignatius ~ 1$telnet localhost 61000
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
220 fnaa.unix.ar FNAA</t>
        <t>We can now see that the server has provided the first message in the connection: a welcome message indicating its FQDN fnaa.unix.ar.</t>
        <t>On the other hand, the server application starts providing debug information for the new connection established:</t>
        <t>ignatius ~ 0$./fnaad 
server.go:146: Listen on [::]:61000
server.go:148: Accept a connection request.
server.go:154: Handle incoming messages.
server.go:148: Accept a connection request.</t>
      </section>
      <section anchor="fnua-client-application">
        <name>7.3. FNUA - Client application</name>
        <t>In order to test the FNAA server application, a CLI-based FNUA application has been developed. The chosen language for this CLI tool is also GoLang. The reason for choosing GoLang for the FNUA is because of its functionalities for building CLI tools, leveraging on the Cobra library.
Thus, the FNUA for the PoC is an executable file that complies with the diagram in Figure 14.</t>
        <t>One of the requirements for the flow CLI tool is a configuration file that defines the different FNAA servers together with the credentials to use. An example of this configuration file follows:</t>
      </section>
      <section anchor="agents">
        <name>agents:</name>
        <t>name: fnaa-unix
fqdn: fnaa.unix.ar
username: test
password: test
prefix: unix.ar-
-
name: fnaa-emiliano
fqdn: fnaa.emiliano.ar
username: test
password: test
prefix: emiliano.ar-</t>
      </section>
      <section anchor="namespaces">
        <name>namespaces:</name>
        <t>name: flows.unix.ar
agent: fnaa-unix
-
name: flows.emiliano.ar
agent: fnaa-emiliano</t>
        <t>In this file, we can see that there are two FNAA instances described with FQDN fnaa.unix.ar and fnaa.emiliano.ar. Then, there are two namespaces: one called flow.unix.ar hosted on fnaa-unix and second namespace flows.emiliano.ar hosted on fnaa-emiliano. This configuration enables the FNUA to interact with two different FNAA, each of which is hosting different Flow Namespaces.</t>
        <t>Once the configuration file has been saved, the flow CLI tool can now be used. In the following sections, we will show how to use the minimum functionalities required for the Open Network using this CLI tool.</t>
      </section>
      <section anchor="use-cases">
        <name>7.4. Use cases</name>
        <t>### 7.4.1. Use case 1: Authenticating a user
After the connection is established, the first command that the client must execute is the authentication command. As previously defined in Chapter 5, every FNAA client must first authenticate in order to execute commands. Thus, the authentication challenge must be supported both by the FNAA as well as the FNUA.</t>
        <t>It is worth mentioning that the chosen authentication mechanism for this PoC is SASL Plain. This command can be extended furtherly with other mechanisms in later versions. However, this simple authentication mechanism is sufficient to demonstrate the authentication step in the FNAP.</t>
        <t>The SASL Plain Authentication implies sending the username and the password encoded in Base64. The way to obtain the Base64 if we consider a user test with password test, is as follows:
ignatius ~ 0$echo -en "\0test\0test" | base64
AHRlc3QAdGVzdA==</t>
        <t>Now, we can use this Base64 string to authenticate with the FNAA. First, we need to launch the FNAA server instance:</t>
        <t>ignatius~/ $./fnaad --config ./fnaad_flow.unix.ar.yaml
main.go:41: Using config file: ./fnaad_flow.unix.ar.yaml
main.go:57:     Using config file: ./fnaad_flow.unix.ar.yaml
server.go:103: Listen on [::]:61000
server.go:105: Accept a connection request.</t>
        <t>Then, we can connect to the TCP port in which the FNAA is listening:</t>
        <t>ignatius ~ 1$telnet localhost 61000
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
220 fnaa.unix.ar FNAA
AUTHENTICATE PLAIN
220 OK
AHRlc3QAdGVzdA==
220 Authenticated</t>
        <t>Once the client is authenticated, it can start executing FNAP commands to manage the Flow Namespace of the authenticated user. For simplicity purposes, in this Proof of Concept, we will be using a single user.</t>
        <t>In the case of the CLI tool, there is no need to perform an authentication step, since every command the user executes will be preceded by an authentication in the server.</t>
        <section anchor="use-case-2-creating-a-flow">
          <name>7.4.2. Use case 2: Creating a flow</name>
          <t>Once the authentication is successful, the client can now create a new Flow.  The way to do this using the CLI tool would be:</t>
          <t>ignatius ~/ 0$./fnua create flow time.flow.unix.ar
Resolving SRV for fnaa.unix.ar. using server 172.17.0.2:53
Executing query fnaa.unix.ar. IN 33 using server 172.17.0.2:53
Executing successful: [fnaa.unix.ar.    604800  IN      SRV     0 0 61000 fnaa.unix.ar.]
Resolving A for fnaa.unix.ar. using server 172.17.0.2:53
Executing query fnaa.unix.ar. IN 1 using server 172.17.0.2:53
Executing successful: [fnaa.unix.ar.    604800  IN      A       127.0.0.1]
Resolved A to 127.0.0.1 for fnaa.unix.ar. using server 172.17.0.2:53
C: Connecting to 127.0.0.1:61000
C: Got a response: 220 fnaa.unix.ar FNAA
C: Sending command AUTHENTICATE PLAIN
C: Wrote (20 bytes written)
C: Got a response: 220 OK
C: Authentication string sent: AHRlc3QAdGVzdA==
C: Wrote (18 bytes written)
C: Got a response: 220 Authenticated
C: Sending command CREATE FLOW time.flow.unix.ar
C: Wrote (31 bytes written)
C: Server sent OK for command CREATE FLOW time.flow.unix.ar
C: Sending command QUIT
C: Wrote (6 bytes written)</t>
          <t>The client has discovered the FNAA server for Flow Namespace flow.unix.ar by means of SRV DNS records. Thus, it obtained both the FQDN of the FNAA together with the TCP port where it is listening, in this case 61000. Once the resolution process ends, the FNUA connects to the FNAA. First, the FNUA authenticates with the FNAA and then it executes the create flow command.</t>
          <t>If we were to simulate the same behavior using a raw TCP connection, the following steps would be executed:</t>
          <t>ignatius ~ 1$telnet localhost 61000
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
220 fnaa.unix.ar FNAA
AUTHENTICATE PLAIN
220 OK
AHRlc3QAdGVzdA==
220 Authenticated
CREATE FLOW time.flows.unix.ar
220 OK time.flows.unix.ar</t>
          <t>Now, the client has created a new flow called time.flows.unix.ar located in the flows.unix.ar namespace. The FNAA in background has created a Kafka Topic as well as the necessary DNS entries for name resolution.</t>
        </section>
        <section anchor="use-case-3-describing-a-flow">
          <name>7.4.3. Use case 3: Describing a flow</name>
          <t>Once a flow has been created, we can obtain information of if by executing the following command using the CLI tool:</t>
          <t>ignatius ~/ 1$./fnua describe flow time.flow.unix.ar
Resolving SRV for fnaa.unix.ar. using server 172.17.0.2:53
Executing query fnaa.unix.ar. IN 33 using server 172.17.0.2:53
Executing successful: [fnaa.unix.ar.    604800  IN      SRV     0 0 61000 fnaa.unix.ar.]
Nameserver to be used: 172.17.0.2
Resolving A for fnaa.unix.ar. using server 172.17.0.2:53
Executing query fnaa.unix.ar. IN 1 using server 172.17.0.2:53
Executing successful: [fnaa.unix.ar.    604800  IN      A       127.0.0.1]
Resolved A to 127.0.0.1 for fnaa.unix.ar. using server 172.17.0.2:53
C: Connecting to 127.0.0.1:61000
C: Got a response: 220 fnaa.unix.ar FNAA
C: Sending command AUTHENTICATE PLAIN
C: Wrote (20 bytes written)
C: Got a response: 220 OK
C: Authentication string sent: AHRlc3QAdGVzdA==
C: Wrote (18 bytes written)
C: Got a response: 220 Authenticated
C: Sending command DESCRIBE FLOW time.flow.unix.ar
C: Wrote (33 bytes written)
C: Server sent OK for command DESCRIBE FLOW time.flow.unix.ar
Flow time.flow.unix.ar description:
flow=time.flow.unix.ar
type=kafka
topic=time.flow.unix.ar
server=kf1.unix.ar:9092
Flow time.flow.unix.ar described successfully
Quitting
C: Sending command QUIT
C: Wrote (6 bytes written)</t>
          <t>In the output of the describe command we can see all the necessary information to connect to the Flow called time.flow.unix.ar: (i) the type of Event Broker is Kafka, (ii) the Kafka topic has the same name of the flow and (iii) the Kafka Bootstrap server with port is provided. If we were to obtain this information using a manual connection, the steps would be:</t>
          <t>ignatius ~ 1$telnet localhost 61000
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
220 fnaa.unix.ar FNAA
AUTHENTICATE PLAIN
220 OK
AHRlc3QAdGVzdA==
220 Authenticated
DESCRIBE FLOW time.flows.unix.ar
220 DATA 
flow=time.flows.unix.ar
type=kafka
topic=time.flows.unix.ar
server=kf1.unix.ar:9092
220 OK</t>
          <t>Now, we can use this information to connect to the Kafka topic and start producing or consuming events.</t>
        </section>
        <section anchor="use-case-4-subscribing-to-a-remote-flow">
          <name>7.4.4. Use case 4: Subscribing to a remote flow</name>
          <t>In this section, we will show how a subscription can be set up. When a user commands the FNAA to create a new subscription to a remote Flow, the local FNAA server first needs to discover the remote FNAA server. Once the server is discovered by means of DNS resolution, the local FNAA contacts the remote FNAA, authenticates the user and then executes a subscription command.</t>
          <t>Thus, the initial communication between the FNUA and the FNAA, in which the user indicates to subscribe to a remote flow, would be as follows:</t>
          <t>ignatius ~ 1$telnet localhost 61000
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
220 fnaa.unix.ar FNAA
AUTHENTICATE PLAIN
220 OK
AHRlc3QAdGVzdA==
220 Authenticated
SUBSCRIBE time.flows.unix.ar LOCAL emiliano.ar-time.flows.unix.ar
220 DATA
ksdj898.time.flows.unix.ar
220 OK</t>
          <t>Once the user is authenticated, a SUBSCRIBE command is executed. This command indicates first the remote flow to subscribe to. Then, it also specifies with LOCAL the flow where the remote events will be written. In this example, the remote flow to subscribe to is time.flows.unix.ar, and the local flow is emiliano.ar-time.flows.unix.ar. Basically, a new flow has been created, emiliano.ar-time.flows.unix.ar, where all the events of flow time.flows.unix.ar will be written.</t>
          <t>The server answers back with a new Flow URI, in this case ksdj898.time.flows.unix.ar. This Flow URI indicates a copy of the original flow time.flows.unix.ar created for this subscription. Thus, the remote FNAA has full control over this subscription, being able to revoke it by simply deleting this flow or applying Quality of Service rules.</t>
          <t>The remote FNAA has set up a Bridge Processor to transcribe messages in topic time.flows.unix.ar to the new topic ksdj898.time.flows.unix.ar. Another alternative to a Bridge Processor would be a Distributor Processor, which could be optimized for a Flow with high demand. Moreover, instead of creating a single Bridge Processor per subscription, a Distributor Processor could be used, in order to have a single consumer of the source flow and write the events to several subscription flows.</t>
          <t>The user could use the FNUA CLI tool to execute this command in the following manner:</t>
          <t>ignatius ~ 0$./fnua --config=./flow.yml subscribe time.flows.unix.ar --nameserver 172.17.0.2 -d --agent fnaa-emiliano
Initializing initConfig
    Using config file: ./flow.yml
Subscribe to flow
Agent selected: fnaa-emiliano
Resolving FNAA FQDN fnaa.emiliano.ar
Starting FQDN resolution with 172.17.0.2
Resolving SRV for fnaa.emiliano.ar. using server 172.17.0.2:53
Executing query fnaa.emiliano.ar. IN 33 using server 172.17.0.2:53
FNAA FQDN Resolved to fnaa.emiliano.ar. port 51000
Resolving A for fnaa.emiliano.ar. using server 172.17.0.2:53
Resolved A to 127.0.0.1 for fnaa.emiliano.ar. using server 172.17.0.2:53
C: Connecting to 127.0.0.1:51000
C: Got a response: 220 fnaa.unix.ar FNAA
Connected to FNAA
Authenticating with PLAIN mechanism
C: Sending command AUTHENTICATE PLAIN
C: Wrote (20 bytes written)
C: Got a response: 220 OK
C: Authentication string sent: AHRlc3QAdGVzdA==
C: Wrote (18 bytes written)
C: Got a response: 220 Authenticated
Authenticated
Executing command SUBSCRIBE time.flows.unix.ar LOCAL emiliano.ar-time.flows.unix.ar
C: Sending command SUBSCRIBE time.flows.unix.ar LOCAL emiliano.ar-time.flows.unix.ar
C: Wrote (67 bytes written)
C: Server sent OK for command SUBSCRIBE time.flows.unix.ar LOCAL emiliano.ar-time.flows.unix.ar
Flow emiliano.ar-time.flows.unix.ar subscription created successfully
Server responded: emiliano.ar-time.flows.unix.ar SUBSCRIBED TO ksdj898.time.flows.unix.ar
Quitting
C: Sending command QUIT
C: Wrote (6 bytes written)
Connection closed</t>
          <t>This interaction of the FNUA with the FNAA of the Flow Namespace emiliano.ar (fnaa-emiliano) has trigger an interaction with the FNAA of unix.ar Flow Namespace (fnaa-unix). This means that before fnaa-emiliano was able to respond to the FNUA, a new connection was opened to the remote FNAA and the SUBSCRIBE command was executed.</t>
          <t>The log of fnaa-emiliano when the SUBCRIBE command was issued looks as follows:</t>
          <t>server.go:111: Handle incoming messages.
server.go:105: Accept a connection request.
server.go:253: User authenticated
server.go:347: FULL COMMAND: SUBSCRIBE time.flows.unix.ar LOCAL emiliano.ar-time.flows.unix.ar
server.go:401: Flow is REMOTE
client.go:280: **#Resolving SRV for time.flows.unix.ar. using server 172.17.0.2:53
server.go:417: FNAA FQDN Resolved to fnaa.unix.ar. port 61000
client.go:42: C: Connecting to 127.0.0.1:61000
client.go:69: C: Got a response: 220 fnaa.unix.ar FNAA
server.go:435: Connected to FNAA
server.go:436: Authenticating with PLAIN mechanism
client.go:126: C: Sending command AUTHENTICATE PLAIN
client.go:133: C: Wrote (20 bytes written)
client.go:144: C: Got a response: 220 OK
client.go:154: C: Authentication string sent: AHRlc3QAdGVzdA==
client.go:159: C: Wrote (18 bytes written)
client.go:170: C: Got a response: 220 Authenticated
server.go:444: Authenticated
client.go:82: C: Sending command SUBSCRIBE time.flows.unix.ar
client.go:88: C: Wrote (30 bytes written)
client.go:112: C: Server sent OK for command SUBSCRIBE time.flows.unix.ar
server.go:456: Flow time.flows.unix.ar subscribed successfully
server.go:457: Server responded: ksdj898.time.flows.unix.ar
server.go:459: Quitting</t>
          <t>We can see how fnaa-emiliano had to trigger a client subroutine to contact the remote fnaa-unix. Once the server FQDN, IP and Port is discovered by means of DNS, a new connection is established and the SUBSCRIBE command is issued. Here we can see the log of fnaa-unix:</t>
          <t>server.go:111: Handle incoming messages.
server.go:105: Accept a connection request.
server.go:253: User authenticated
server.go:139: Received command: subscribe
server.go:348: [SUBSCRIBE time.flows.unix.ar]
server.go:367: Creating flow endpoint time.flows.unix.ar
server.go:368: Creating new topic ksdj898.time.flows.unix.ar in Apache Kafka instance kafka_local
server.go:369: Creating Flow Processor src=time.flows.unix.ar dst=ksdj898.time.flows.unix.ar
server.go:370: Adding DNS Records for ksdj898.time.flows.unix.ar
server.go:372: Flow enabled ksdj898.time.flows.unix.ar
server.go:139: Received command: quit</t>
          <t>Thus, we were able to set up a new subscription in fnaa-emiliano that trigger a background interaction with fnaa-unix.</t>
        </section>
        <section anchor="results-of-the-poc">
          <name>7.5. Results of the PoC</name>
          <t>We can confirm the feasibility of the overall Event Streaming Open Network architecture. The test of the proposed protocol FNAP and its implementation, both in the FNAA and FNUA (CLI application), show that the architecture can be employed for the purpose of distributed subscription management among Network Participants.</t>
          <t>The minimum functionalities defined both for the Network Participants and the Users were met. Network Participants can run this type of service by means of a server application, the FNAA server. Also, the CLI-tool resulted in a convenient low-level method to interact with a FNAA server.</t>
          <t>In further implementations, the server application should be optimized as well as secured, for instance with a TLS handshake. Also, the CLI-tool could be enhanced by a web-based application with a friendly user interface.</t>
          <t>Nevertheless, the challenge for a stable implementation of both components is the possibility of supporting different Event Brokers and their evolution. Not only Apache Kafka should be supported but also the main Public Cloud providers events solutions, such as AWS SQS or Google Cloud Pub/Sub. Since the Event Brokers are continuously evolving, the implementation of the FNAA component should keep up both with the API and new functionalities of these vendors.</t>
          <t>Regarding the protocol design, it would be needed to enhance the serialization of the exchanged data. In this sense, it could be convenient to define a packet header for the overall interaction between the FNAA both with remote FNAA as well as with FNUA.</t>
          <t>Regarding the subscription use case, it would be necessary to establish a convenient format for the server response. Currently, the server is returning a key/value structure with the details of the Flow. This structure may not be the most adequate, since it may differ depending on the Event Broker used.</t>
          <t>Also, the security aspect needs further analysis and design since its fragility could lead to great economical damage for organizations. Thus, it would be recommended to review the different security controls needed for this solution as part of an Information Security Management System.</t>
          <t>Finally, the implementation should leverage the Cloud Native functionalities provided by the Kubernetes API. For example, the FNAA should trigger the deployment of Flow Processors on demand, in order to provide isolated computing resources for each subscription. Also, a Kubernetes resource could be developed to use the kubectl CLI tool for management, instead of a custom CLI tool.</t>
        </section>
        <section anchor="summary-conclusions">
          <name>8. Summary &amp; Conclusions</name>
          <t>In this chapter we will provide a summary of everything that has been described in this document as well as some conclusions about it.</t>
          <t>We have identified a use case for which there is currently no adequate solution provided by existing tools. This use case is based on the cross-organization integration of real-time event streams. Nowadays, organizations intending to integrate these kind of data streams struggle with offline communication to achieve a common interface for integration. In this context, we proposed an Open Network for Event Streaming as a possible solution for this difficulty.</t>
          <t>For this Open Network, we have followed the main necessities from the technical perspective. While there already exist many components that can be leveraged, some components require analysis, design, and implementation. Then, we referred to the Commons Infrastructure literature in order to show how Event Streaming can be considered an Infrastructure Resource that can enable downstream productive activities. Finally, we established the main guidelines that an Open Network should follow, basing these definitions on Free, Open &amp; Neutral Networks.</t>
          <t>Using the previous definitions, we have designed an architecture for the Event Streaming Open Network, establishing the components that the different Network Participants should implement in order to participate in the network. After providing a thorough description of all the components, we showed some use cases of integration among different Network Participants.</t>
          <t>Once the architecture was defined, we proposed an implementation approach which describes the existing components that can be leveraged as well as those that need to be developed from scratch. The outcome was that a server-side application called FNAA had to be developed. This application implements the protocol FNAP and can be accessed by a client application, which we named FNUA.</t>
          <t>Finally, we proved the feasibility of the proposed architecture by providing an implementation of the minimum functionalities required, in the form of a Proof of Concept. The results of this PoC were encouraging since it was possible to implement the initial functionalities for the FNAA and FNUA components.</t>
          <t>As conclusion, we can mention that there is great potential for an Open Network for Event Streaming among organizations. In the same way the email infrastructure acts as an open network for electronic communications among people, this kind of network would enable developers to integrate real-time event streams while minimizing offline agreement of interfaces and technologies.</t>
          <t>However, there are many difficulties that could be furtherly worked on. First, a robust implementation for the Event Streaming Open Network main components must be provided, mainly for the FNAA and FNUA. In order to achieve an acceptable level of quality and stability, the development of a community around the project is needed.</t>
          <t>Secondly, we found that the proposed architecture is a convenient starting point. However, it can suffer modifications based on the learning process during the implementation. For example, while designing the architecture, we avoided the need of a database for the FNAA component, leveraging on the DNS infrastructure. While this can be sufficient for the minimum functionalities described, it will most probably be necessary for the FNAA to persist data in a database of its own. In this sense, we believe that leveraging the Kubernetes resources model could be a convenient alternative.</t>
          <t>Thirdly, during the PoC execution, we identified some difficulties implementing the security functionalities of authentication and authorization. Although we were able to implement an authentication mechanism, the reality indicates that integration with well-established protocols is needed (i.e., OAuth, GSSAPI, etc.).</t>
          <t>Finally, there is also the need to leverage on the Cloud Native architecture, basically Kubernetes, to provide hyper-scalability and enable Network Participants to agnostically choose the underlaying infrastructure. The selection of Golang for the PoC implementation showed to be convenient, given the vast number of available libraries for integration of third-party components and services.</t>
          <t>Notwithstanding the difficulties, we firmly believe that cross-organization real-time event integration can provide great benefits for society. It would enhance the efficiency of business processes throughout organizations. Also, it would provide broad visibility to the final users, enabling experimentation and entrepreneurship. New business models for existing productive activities could be developed, as well as enabling innovation, which in turn would conform the positive externalities of the Event Streaming Open Network.</t>
        </section>
      </section>
    </section>
    <section anchor="security-considerations">
      <name>Security Considerations</name>
      <t>TODO Security</t>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <t>This document has no IANA actions.</t>
    </section>
  </middle>
  <back>
    <references>
      <name>Normative References</name>
      <reference anchor="RFC2119">
        <front>
          <title>Key words for use in RFCs to Indicate Requirement Levels</title>
          <author fullname="S. Bradner" initials="S." surname="Bradner">
            <organization/>
          </author>
          <date month="March" year="1997"/>
          <abstract>
            <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
          </abstract>
        </front>
        <seriesInfo name="BCP" value="14"/>
        <seriesInfo name="RFC" value="2119"/>
        <seriesInfo name="DOI" value="10.17487/RFC2119"/>
      </reference>
      <reference anchor="RFC8174">
        <front>
          <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
          <author fullname="B. Leiba" initials="B." surname="Leiba">
            <organization/>
          </author>
          <date month="May" year="2017"/>
          <abstract>
            <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
          </abstract>
        </front>
        <seriesInfo name="BCP" value="14"/>
        <seriesInfo name="RFC" value="8174"/>
        <seriesInfo name="DOI" value="10.17487/RFC8174"/>
      </reference>
    </references>
    <section numbered="false" anchor="acknowledgments">
      <name>Acknowledgments</name>
      <t>URQUHART J. (2021) Flow Architectures 
FRISCHMANN B. (2007) [Online] Infrastructure Commons in Economic Perspective &lt; https://firstmonday.org/article/view/1901/1783&gt;
WIDL M. (2013), Guided Merging of Sequence Diagrams
NAVARRO L. (2018) [Online] Network Infrastructures: The commons model for local participation, governance and sustainability <eref target="https://www.apc.org/en/pubs/network-infrastructures-commons-model-local-participation-governance-and-sustainability">https://www.apc.org/en/pubs/network-infrastructures-commons-model-local-participation-governance-and-sustainability</eref>
BRINO A. (2019) Towards an Event Streaming Service for ATLAS data processing.
GUTTRIDGE, Gartner (2021) "Modern Data Strategies for the Real-time Enterprise" Big Data Quarterly 2021</t>
    </section>
  </back>
  <!-- ##markdown-source:
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
A39XUsAKbwEA

-->

</rfc>
